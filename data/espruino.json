{
  "!name": "Espruino",
  "neopixel": {
    "!type": "fn()",
    "!doc": "<p>This library allows you to write to Neopixel/WS281x/APA10x/SK6812 LED strips</p>\n<p>These use a high speed single-wire protocol which needs platform-specific\nimplementation on some devices - hence this library to simplify things.</p>\n",
    "!url": "http://www.espruino.com/Reference#neopixel",
    "write": {
      "!type": "fn(pin: +Pin, data: ?)",
      "!doc": "<p>Write to a strip of NeoPixel/WS281x/APA104/APA106/SK6812-style LEDs attached to\nthe given pin.</p>\n<pre><code><span class=\"hljs-comment\">// set just one pixel, red, green, blue</span>\n<span class=\"hljs-built_in\">require</span>(&quot;neopixel&quot;)<span class=\"hljs-selector-class\">.write</span>(B15, [<span class=\"hljs-number\">255</span>,<span class=\"hljs-number\">0</span>,<span class=\"hljs-number\">0</span>]);\n</code></pre>\n<pre><code><span class=\"hljs-comment\">// Produce an animated rainbow over 25 LEDs</span>\n<span class=\"hljs-keyword\">var</span> rgb = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Uint8ClampedArray</span>(<span class=\"hljs-number\">25</span>*<span class=\"hljs-number\">3</span>);\n<span class=\"hljs-keyword\">var</span> pos = <span class=\"hljs-number\">0</span>;\n<span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">getPattern</span>(<span class=\"hljs-params\"></span>) {\n  pos++;\n  <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">var</span> i=<span class=\"hljs-number\">0</span>;i&lt;rgb.<span class=\"hljs-property\">length</span>;) {\n    rgb[i++] = (<span class=\"hljs-number\">1</span> + <span class=\"hljs-title class_\">Math</span>.<span class=\"hljs-title function_\">sin</span>((i+pos)*<span class=\"hljs-number\">0.1324</span>)) * <span class=\"hljs-number\">127</span>;\n    rgb[i++] = (<span class=\"hljs-number\">1</span> + <span class=\"hljs-title class_\">Math</span>.<span class=\"hljs-title function_\">sin</span>((i+pos)*<span class=\"hljs-number\">0.1654</span>)) * <span class=\"hljs-number\">127</span>;\n    rgb[i++] = (<span class=\"hljs-number\">1</span> + <span class=\"hljs-title class_\">Math</span>.<span class=\"hljs-title function_\">sin</span>((i+pos)*<span class=\"hljs-number\">0.1</span>)) * <span class=\"hljs-number\">127</span>;\n  }\n  <span class=\"hljs-keyword\">return</span> rgb;\n}\n<span class=\"hljs-built_in\">setInterval</span>(<span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) {\n  <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">&quot;neopixel&quot;</span>).<span class=\"hljs-title function_\">write</span>(<span class=\"hljs-variable constant_\">B15</span>, <span class=\"hljs-title function_\">getPattern</span>());\n}, <span class=\"hljs-number\">100</span>);\n</code></pre>\n<p><strong>Note:</strong></p>\n<ul>\n<li><p>Different types of LED have the data in different orders - so don&#39;t be\nsurprised by RGB or BGR orderings!</p>\n</li>\n<li><p>Some LED strips (SK6812) actually take 4 bytes per LED (red, green, blue and\nwhite). These are still supported but the array of data supplied must still be a\nmultiple of 3 bytes long. Just round the size up - it won&#39;t cause any problems.</p>\n</li>\n<li><p>On some platforms like STM32, pins capable of hardware SPI MOSI are required.</p>\n</li>\n<li><p>On STM32, <code>neopixel.write</code> chooses a hardware SPI device to output the signal on\nand uses that. However in order to avoid spikes in the output, if that hardware device is <em>already\ninitialised</em> it will not be re-initialised. This means that if the SPI device was already in use,\nyou may have to use <code>SPIx.setup({baud:3200000, mosi:the_pin})</code> to force it to be re-setup on the pin.</p>\n</li>\n<li><p>Espruino devices tend to have 3.3v IO, while WS2812/etc run off of 5v. Many\nWS2812 will only register a logic &#39;1&#39; at 70% of their input voltage - so if\npowering them off 5v you will not be able to send them data reliably. You can\nwork around this by powering the LEDs off a lower voltage (for example 3.7v from\na LiPo battery), can put the output into the <code>af_opendrain</code> state and use a\npullup resistor to 5v on STM32 based boards (nRF52 are not 5v tolerant so you\ncan&#39;t do this), or can use a level shifter to shift the voltage up into the 5v\nrange.</p>\n</li>\n</ul>\n",
      "!url": "http://www.espruino.com/Reference#l_neopixel_write"
    }
  },
  "tv": {
    "!type": "fn()",
    "!doc": "<p>This library provides TV out capability on the Espruino and Espruino Pico.</p>\n<p>See the <a href=\"/Television\">Television</a> page for more information.</p>\n",
    "!url": "http://www.espruino.com/Reference#tv",
    "setup": {
      "!type": "fn(options: ?, width: number) -> ?",
      "!doc": "<p>This initialises the TV output. Options for PAL are as follows:</p>\n<pre><code><span class=\"hljs-built_in\">var</span> g = <span class=\"hljs-keyword\">require</span>(<span class=\"hljs-string\">&#x27;tv&#x27;</span>).setup({ <span class=\"hljs-keyword\">type</span> : <span class=\"hljs-string\">&quot;pal&quot;</span>,\n  video : A7, <span class=\"hljs-comment\">// Pin - SPI MOSI Pin for Video output (MUST BE SPI1)</span>\n  sync : A6, <span class=\"hljs-comment\">// Pin - Timer pin to use for video sync</span>\n  width : <span class=\"hljs-number\">384</span>,\n  height : <span class=\"hljs-number\">270</span>, <span class=\"hljs-comment\">// max 270</span>\n});\n</code></pre>\n<p>and for VGA:</p>\n<pre><code><span class=\"hljs-built_in\">var</span> g = <span class=\"hljs-keyword\">require</span>(<span class=\"hljs-string\">&#x27;tv&#x27;</span>).setup({ <span class=\"hljs-keyword\">type</span> : <span class=\"hljs-string\">&quot;vga&quot;</span>,\n  video : A7, <span class=\"hljs-comment\">// Pin - SPI MOSI Pin for Video output (MUST BE SPI1)</span>\n  hsync : A6, <span class=\"hljs-comment\">// Pin - Timer pin to use for video sync</span>\n  vsync : A5, <span class=\"hljs-comment\">// Pin - pin to use for video sync</span>\n  width : <span class=\"hljs-number\">220</span>,\n  height : <span class=\"hljs-number\">240</span>,\n  repeat : <span class=\"hljs-number\">2</span>, <span class=\"hljs-comment\">// amount of times to repeat each line</span>\n});\n</code></pre>\n<p>or</p>\n<pre><code><span class=\"hljs-built_in\">var</span> g = <span class=\"hljs-keyword\">require</span>(<span class=\"hljs-string\">&#x27;tv&#x27;</span>).setup({ <span class=\"hljs-keyword\">type</span> : <span class=\"hljs-string\">&quot;vga&quot;</span>,\n  video : A7, <span class=\"hljs-comment\">// Pin - SPI MOSI Pin for Video output (MUST BE SPI1)</span>\n  hsync : A6, <span class=\"hljs-comment\">// Pin - Timer pin to use for video sync</span>\n  vsync : A5, <span class=\"hljs-comment\">// Pin - pin to use for video sync</span>\n  width : <span class=\"hljs-number\">220</span>,\n  height : <span class=\"hljs-number\">480</span>,\n  repeat : <span class=\"hljs-number\">1</span>, <span class=\"hljs-comment\">// amount of times to repeat each line</span>\n});\n</code></pre>\n<p>See the <a href=\"/Television\">Television</a> page for more information.</p>\n",
      "!url": "http://www.espruino.com/Reference#l_tv_setup"
    }
  },
  "Jolt": {
    "!type": "fn()",
    "!doc": "<p>Class containing utility functions for the <a href=\"http://www.espruino.com/Jolt.js\">Jolt.js Smart Bluetooth driver</a></p>\n",
    "!url": "http://www.espruino.com/Reference#Jolt",
    "Q0": {
      "!type": "?",
      "!doc": "<p><code>Q0</code> and <code>Q1</code> Qwiic connectors can have their power controlled by a 500mA FET (<code>Jolt.Q0.fet</code>) which switches GND.</p>\n<p>The <code>sda</code> and <code>scl</code> pins on this port are also analog inputs - use <code>analogRead(Jolt.Q0.sda)</code>/etc</p>\n<p>To turn this connector on run <code>Jolt.Q0.setPower(1)</code></p>\n",
      "!url": "http://www.espruino.com/Reference#l_Jolt_Q0"
    },
    "Q1": {
      "!type": "?",
      "!doc": "<p><code>Q0</code> and <code>Q1</code> Qwiic connectors can have their power controlled by a 500mA FET  (<code>Jolt.Q1.fet</code>) which switches GND.</p>\n<p>The <code>sda</code> and <code>scl</code> pins on this port are also analog inputs - use <code>analogRead(Jolt.Q1.sda)</code>/etc</p>\n<p>To turn this connector on run <code>Jolt.Q1.setPower(1)</code></p>\n",
      "!url": "http://www.espruino.com/Reference#l_Jolt_Q1"
    },
    "Q2": {
      "!type": "?",
      "!doc": "<p><code>Q2</code> and <code>Q3</code> have all 4 pins connected to Jolt.js&#39;s GPIO (including those usually used for power).\nAs such only around 8mA of power can be supplied to any connected device.</p>\n<p>To use this as a normal Qwiic connector, run <code>Jolt.Q2.setPower(1)</code></p>\n",
      "!url": "http://www.espruino.com/Reference#l_Jolt_Q2"
    },
    "Q3": {
      "!type": "?",
      "!doc": "<p><code>Q2</code> and <code>Q3</code> have all 4 pins connected to Jolt.js&#39;s GPIO (including those usually used for power).\nAs such only around 8mA of power can be supplied to any connected device.</p>\n<p>To use this as a normal Qwiic connector, run <code>Jolt.Q3.setPower(1)</code></p>\n",
      "!url": "http://www.espruino.com/Reference#l_Jolt_Q3"
    },
    "setDriverMode": {
      "!type": "fn(driver: number, mode: ?)",
      "!doc": "<p>Sets the mode of the motor drivers. Jolt.js has two motor drivers,\none (<code>0</code>) for outputs H0..H3, and one (<code>1</code>) for outputs H4..H7. They\ncan be controlled independently.</p>\n<p>Mode can be:</p>\n<ul>\n<li><code>undefined</code> / <code>false</code> / <code>&quot;off&quot;</code> - the motor driver is off, all motor driver pins are open circuit (the motor driver still has a ~2.5k pulldown to GND)</li>\n<li><code>&quot;auto&quot;</code> - (default) - if any pin in the set of 4 pins (H0..H3, H4..H7) is set as an output, the driver is turned on. Eg <code>H0.set()</code> will\nturn the driver on with a high output, <code>H0.reset()</code> will pull the output to GND and <code>H0.read()</code> (or <code>H0.mode(&quot;input&quot;)</code> to set the state explicitly) is needed to\nturn the motor driver off.</li>\n<li><code>true</code> / <code>&quot;output&quot;</code> - <strong>[recommended]</strong> driver is set to &quot;Independent bridge&quot; mode. All 4 outputs in the bank are enabled</li>\n<li><code>&quot;motor&quot;</code> - driver is set to &quot;4 pin interface&quot; mode where pins are paired up (H0+H1, H2+H3, etc). If both\nin a pair are 0 the output is open circuit (motor coast), if both are 1 both otputs are 0 (motor brake), and\nif both are different, those values are on the output:</li>\n</ul>\n<p><code>output</code>/<code>auto</code> mode:</p>\n<table>\n<thead>\n<tr>\n<th>H0</th>\n<th>H1</th>\n<th>Out 0</th>\n<th>Out 1</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>0</td>\n<td>0</td>\n<td>Low</td>\n<td>Low</td>\n</tr>\n<tr>\n<td>0</td>\n<td>1</td>\n<td>Low</td>\n<td>High</td>\n</tr>\n<tr>\n<td>1</td>\n<td>0</td>\n<td>High</td>\n<td>Low</td>\n</tr>\n<tr>\n<td>1</td>\n<td>1</td>\n<td>High</td>\n<td>High</td>\n</tr>\n</tbody></table>\n<p><code>motor</code> mode</p>\n<table>\n<thead>\n<tr>\n<th>H0</th>\n<th>H1</th>\n<th>Out 0</th>\n<th>Out 1</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>0</td>\n<td>0</td>\n<td>Open</td>\n<td>Open</td>\n</tr>\n<tr>\n<td>0</td>\n<td>1</td>\n<td>Low</td>\n<td>High</td>\n</tr>\n<tr>\n<td>1</td>\n<td>0</td>\n<td>High</td>\n<td>Low</td>\n</tr>\n<tr>\n<td>1</td>\n<td>1</td>\n<td>Low</td>\n<td>Low</td>\n</tr>\n</tbody></table>\n",
      "!url": "http://www.espruino.com/Reference#l_Jolt_setDriverMode"
    },
    "selfTest": {
      "!type": "fn() -> bool",
      "!doc": "<p>Run a self-test, and return true for a pass. This checks for shorts between\npins, so your Jolt shouldn&#39;t have anything connected to it.</p>\n<p><strong>Note:</strong> This self-test auto starts if you hold the button on your Jolt down\nwhile inserting the battery, leave it pressed for 3 seconds (while the green LED\nis lit) and release it soon after all LEDs turn on. 5 red blinks is a fail, 5\ngreen is a pass.</p>\n<p>If the self test fails, it&#39;ll set the Jolt.js Bluetooth advertising name to\n<code>Jolt.js !ERR</code> where ERR is a 3 letter error code.</p>\n",
      "!url": "http://www.espruino.com/Reference#l_Jolt_selfTest"
    }
  },
  "Unistroke": {
    "!type": "fn()",
    "!doc": "<p>This class provides functionality to recognise gestures drawn on a touchscreen.\nIt is only built into Bangle.js 2.</p>\n<p>Usage:</p>\n<pre><code>var strokes = {\n  stroke1 : <span class=\"hljs-module-access\"><span class=\"hljs-module\"><span class=\"hljs-identifier\">Unistroke</span>.</span></span><span class=\"hljs-keyword\">new</span>(<span class=\"hljs-keyword\">new</span> <span class=\"hljs-constructor\">Uint8Array([<span class=\"hljs-params\">x1</span>, <span class=\"hljs-params\">y1</span>, <span class=\"hljs-params\">x2</span>, <span class=\"hljs-params\">y2</span>, <span class=\"hljs-params\">x3</span>, <span class=\"hljs-params\">y3</span>, <span class=\"hljs-operator\">...</span>])</span>),\n  stroke2 : <span class=\"hljs-module-access\"><span class=\"hljs-module\"><span class=\"hljs-identifier\">Unistroke</span>.</span></span><span class=\"hljs-keyword\">new</span>(<span class=\"hljs-keyword\">new</span> <span class=\"hljs-constructor\">Uint8Array([<span class=\"hljs-params\">x1</span>, <span class=\"hljs-params\">y1</span>, <span class=\"hljs-params\">x2</span>, <span class=\"hljs-params\">y2</span>, <span class=\"hljs-params\">x3</span>, <span class=\"hljs-params\">y3</span>, <span class=\"hljs-operator\">...</span>])</span>),\n  stroke3 : <span class=\"hljs-module-access\"><span class=\"hljs-module\"><span class=\"hljs-identifier\">Unistroke</span>.</span></span><span class=\"hljs-keyword\">new</span>(<span class=\"hljs-keyword\">new</span> <span class=\"hljs-constructor\">Uint8Array([<span class=\"hljs-params\">x1</span>, <span class=\"hljs-params\">y1</span>, <span class=\"hljs-params\">x2</span>, <span class=\"hljs-params\">y2</span>, <span class=\"hljs-params\">x3</span>, <span class=\"hljs-params\">y3</span>, <span class=\"hljs-operator\">...</span>])</span>)\n};\nvar r = <span class=\"hljs-module-access\"><span class=\"hljs-module\"><span class=\"hljs-identifier\">Unistroke</span>.</span></span>recognise(strokes,<span class=\"hljs-keyword\">new</span> <span class=\"hljs-constructor\">Uint8Array([<span class=\"hljs-params\">x1</span>, <span class=\"hljs-params\">y1</span>, <span class=\"hljs-params\">x2</span>, <span class=\"hljs-params\">y2</span>, <span class=\"hljs-params\">x3</span>, <span class=\"hljs-params\">y3</span>, <span class=\"hljs-operator\">...</span>])</span>)\nprint(r); <span class=\"hljs-comment\">// stroke1/stroke2/stroke3</span>\n</code></pre>\n",
    "!url": "http://www.espruino.com/Reference#Unistroke",
    "new": {
      "!type": "fn(xy: ?) -> ?",
      "!doc": "<p>Create a new Unistroke based on XY coordinates</p>\n",
      "!url": "http://www.espruino.com/Reference#l_Unistroke_new"
    },
    "recognise": {
      "!type": "fn(strokes: ?, xy: ?) -> ?",
      "!doc": "<p>Recognise based on an object of named strokes, and a list of XY coordinates</p>\n",
      "!url": "http://www.espruino.com/Reference#l_Unistroke_recognise"
    }
  },
  "Qwiic": {
    "!type": "fn()",
    "!doc": "<p>Class containing utility functions for the Qwiic connectors\non the <a href=\"http://www.espruino.com/Jolt.js\">Jolt.js Smart Bluetooth driver</a>.</p>\n<p>Each class (available from <code>Jolt.Q0</code>/<code>Jolt.Q1</code>/<code>Jolt.Q2</code>/<code>Jolt.Q3</code>)\nhas <code>sda</code> and <code>scl</code> fields with the pins for SDA and SCL on them.</p>\n<p>On Jolt.js, the four Qwiic connectors can be individually powered:</p>\n<ul>\n<li>Q0/Q1 - GND is switched with a 500mA FET. The <code>fet</code> field contains the pin that controls the FET</li>\n<li>Q2/Q3 - all 4 pins are connected to GPIO. <code>gnd</code> and <code>vcc</code> fields contain the pins for GND and VCC</li>\n</ul>\n<p>To control the power, use <code>Qwiic.setPower</code>, for example: <code>Jolt.Q0.setPower(true)</code></p>\n",
    "!url": "http://www.espruino.com/Reference#Qwiic",
    "prototype": {
      "setPower": {
        "!type": "fn(isOn: bool) -> ?",
        "!doc": "<p>This turns power for the given Qwiic connector on or off. See <code>Qwiic</code> for more information.</p>\n",
        "!url": "http://www.espruino.com/Reference#l_Qwiic_setPower"
      },
      "i2c": {
        "!type": "?",
        "!doc": "",
        "!url": "http://www.espruino.com/Reference#l_Qwiic_i2c"
      }
    }
  },
  "WioLTE": {
    "!type": "fn()",
    "!doc": "<p>Class containing utility functions for the Seeed WIO LTE board</p>\n",
    "!url": "http://www.espruino.com/Reference#WioLTE",
    "LED": {
      "!type": "fn(red: number, green: number, blue: number)",
      "!doc": "<p>Set the WIO&#39;s LED</p>\n",
      "!url": "http://www.espruino.com/Reference#l_WioLTE_LED"
    },
    "setGrovePower": {
      "!type": "fn(onoff: bool)",
      "!doc": "<p>Set the power of Grove connectors, except for <code>D38</code> and <code>D39</code> which are always\non.</p>\n",
      "!url": "http://www.espruino.com/Reference#l_WioLTE_setGrovePower"
    },
    "setLEDPower": {
      "!type": "fn(onoff: bool)",
      "!doc": "<p>Turn power to the WIO&#39;s LED on or off.</p>\n<p>Turning the LED on won&#39;t immediately display a color - that must be done with\n<code>WioLTE.LED(r,g,b)</code></p>\n",
      "!url": "http://www.espruino.com/Reference#l_WioLTE_setLEDPower"
    },
    "D38": {
      "!type": "?",
      "!doc": "",
      "!url": "http://www.espruino.com/Reference#l_WioLTE_D38"
    },
    "D20": {
      "!type": "?",
      "!doc": "",
      "!url": "http://www.espruino.com/Reference#l_WioLTE_D20"
    },
    "A6": {
      "!type": "?",
      "!doc": "",
      "!url": "http://www.espruino.com/Reference#l_WioLTE_A6"
    },
    "I2C": {
      "!type": "?",
      "!doc": "",
      "!url": "http://www.espruino.com/Reference#l_WioLTE_I2C"
    },
    "UART": {
      "!type": "?",
      "!doc": "",
      "!url": "http://www.espruino.com/Reference#l_WioLTE_UART"
    },
    "A4": {
      "!type": "?",
      "!doc": "",
      "!url": "http://www.espruino.com/Reference#l_WioLTE_A4"
    }
  },
  "Graphics": {
    "!type": "fn()",
    "!doc": "<p>This class provides Graphics operations that can be applied to a surface.</p>\n<p>Use Graphics.createXXX to create a graphics object that renders in the way you\nwant. See <a href=\"https://www.espruino.com/Graphics\">the Graphics page</a> for more\ninformation.</p>\n<p><strong>Note:</strong> On boards that contain an LCD, there is a built-in <code>g</code> object of\ntype <code>Graphics</code>. For instance to draw a line you&#39;d type:\n<code>g.drawLine(0,0,100,100)</code></p>\n",
    "!url": "http://www.espruino.com/Reference#Graphics",
    "prototype": {
      "setFont14": {
        "!type": "fn(scale: number) -> +Graphics",
        "!doc": "<p>Set the current font</p>\n",
        "!url": "http://www.espruino.com/Reference#l_Graphics_setFont14"
      },
      "setFont22": {
        "!type": "fn(scale: number) -> +Graphics",
        "!doc": "<p>Set the current font</p>\n",
        "!url": "http://www.espruino.com/Reference#l_Graphics_setFont22"
      },
      "setFont28": {
        "!type": "fn(scale: number) -> +Graphics",
        "!doc": "<p>Set the current font</p>\n",
        "!url": "http://www.espruino.com/Reference#l_Graphics_setFont28"
      },
      "setFont6x15": {
        "!type": "fn(scale: number) -> +Graphics",
        "!doc": "<p>Set the current font</p>\n",
        "!url": "http://www.espruino.com/Reference#l_Graphics_setFont6x15"
      },
      "flip": {
        "!type": "fn(all: bool)",
        "!doc": "<p>On instances of graphics that drive a display with an offscreen buffer, calling\nthis function will copy the contents of the offscreen buffer to the screen.</p>\n<p>Call this when you have drawn something to Graphics and you want it shown on the\nscreen.</p>\n<p>If a display does not have an offscreen buffer, it may not have a <code>g.flip()</code>\nmethod.</p>\n<p>On Bangle.js 1, there are different graphics modes chosen with\n<code>Bangle.setLCDMode()</code>. The default mode is unbuffered and in this mode\n<code>g.flip()</code> does not affect the screen contents.</p>\n<p>On some devices, this command will attempt to only update the areas of the\nscreen that have changed in order to increase speed. If you have accessed the\n<code>Graphics.buffer</code> directly then you may need to use <code>Graphics.flip(true)</code> to\nforce a full update of the screen.</p>\n",
        "!url": "http://www.espruino.com/Reference#l_Graphics_flip"
      },
      "buffer": {
        "!type": "?",
        "!doc": "<p>On <code>Graphics</code> instances with an offscreen buffer, this is an <code>ArrayBuffer</code> that\nprovides access to the underlying pixel data.</p>\n<pre><code><span class=\"hljs-attribute\">g</span>=Graphics.createArrayBuffer(<span class=\"hljs-number\">8</span>,<span class=\"hljs-number\">8</span>,<span class=\"hljs-number\">8</span>)\n<span class=\"hljs-attribute\">g</span>.drawLine(<span class=\"hljs-number\">0</span>,<span class=\"hljs-number\">0</span>,<span class=\"hljs-number\">7</span>,<span class=\"hljs-number\">7</span>)\n<span class=\"hljs-attribute\">print</span>(new Uint8Array(g.buffer))\n<span class=\"hljs-attribute\">new</span> Uint8Array([\n<span class=\"hljs-attribute\">255</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>,\n<span class=\"hljs-attribute\">0</span>, <span class=\"hljs-number\">255</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>,\n<span class=\"hljs-attribute\">0</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">255</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>,\n<span class=\"hljs-attribute\">0</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">255</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>,\n<span class=\"hljs-attribute\">0</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">255</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>,\n<span class=\"hljs-attribute\">0</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">255</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>,\n<span class=\"hljs-attribute\">0</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">255</span>, <span class=\"hljs-number\">0</span>,\n<span class=\"hljs-attribute\">0</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">255</span>])\n</code></pre>\n",
        "!url": "http://www.espruino.com/Reference#l_Graphics_buffer"
      },
      "getWidth": {
        "!type": "fn() -> number",
        "!doc": "<p>The width of this <code>Graphics</code> instance</p>\n",
        "!url": "http://www.espruino.com/Reference#l_Graphics_getWidth"
      },
      "getHeight": {
        "!type": "fn() -> number",
        "!doc": "<p>The height of this <code>Graphics</code> instance</p>\n",
        "!url": "http://www.espruino.com/Reference#l_Graphics_getHeight"
      },
      "getBPP": {
        "!type": "fn() -> number",
        "!doc": "<p>The number of bits per pixel of this <code>Graphics</code> instance</p>\n<p><strong>Note:</strong> Bangle.js 2 behaves a little differently here. The display is 3 bit,\nso <code>getBPP</code> returns 3 and <code>asBMP</code>/<code>asImage</code>/etc return 3 bit images. However in\norder to allow dithering, the colors returned by <code>Graphics.getColor</code> and\n<code>Graphics.theme</code> are actually 16 bits.</p>\n",
        "!url": "http://www.espruino.com/Reference#l_Graphics_getBPP"
      },
      "reset": {
        "!type": "fn() -> +Graphics",
        "!doc": "<p>Reset the state of Graphics to the defaults (e.g. Color, Font, etc) that would\nhave been used when Graphics was initialised.</p>\n<p><strong>Note:</strong> The current graphics theme is not reset when <code>g.reset()</code> is called. To reset that\nyou must store the value from <code>g.getTheme()</code> before calling <code>g.setTheme()</code>, and manually\nset it back afterwards.</p>\n",
        "!url": "http://www.espruino.com/Reference#l_Graphics_reset"
      },
      "clear": {
        "!type": "fn(reset: bool) -> +Graphics",
        "!doc": "<p>Clear the LCD with the Background Color</p>\n",
        "!url": "http://www.espruino.com/Reference#l_Graphics_clear"
      },
      "fillRect": {
        "!type": "fn(x1: ?, y1: number, x2: number, y2: number) -> +Graphics",
        "!doc": "<p>Fill a rectangular area in the Foreground Color</p>\n<p>On devices with enough memory, you can specify <code>{x,y,x2,y2,r}</code> as the first\nargument, which allows you to draw a rounded rectangle.</p>\n",
        "!url": "http://www.espruino.com/Reference#l_Graphics_fillRect"
      },
      "clearRect": {
        "!type": "fn(x1: ?, y1: number, x2: number, y2: number) -> +Graphics",
        "!doc": "<p>Fill a rectangular area in the Background Color</p>\n<p>On devices with enough memory, you can specify <code>{x,y,x2,y2,r}</code> as the first\nargument, which allows you to draw a rounded rectangle.</p>\n",
        "!url": "http://www.espruino.com/Reference#l_Graphics_clearRect"
      },
      "drawRect": {
        "!type": "fn(x1: ?, y1: number, x2: number, y2: number) -> +Graphics",
        "!doc": "<p>Draw an unfilled rectangle 1px wide in the Foreground Color</p>\n",
        "!url": "http://www.espruino.com/Reference#l_Graphics_drawRect"
      },
      "fillCircle": {
        "!type": "fn(x: number, y: number, rad: number) -> +Graphics",
        "!doc": "<p>Draw a filled circle in the Foreground Color</p>\n",
        "!url": "http://www.espruino.com/Reference#l_Graphics_fillCircle"
      },
      "fillAnnulus": {
        "!type": "fn(x: number, y: number, r1: number, r2: number) -> +Graphics",
        "!doc": "<p>Draw a filled annulus in the Foreground Color</p>\n",
        "!url": "http://www.espruino.com/Reference#l_Graphics_fillAnnulus"
      },
      "drawCircle": {
        "!type": "fn(x: number, y: number, rad: number) -> +Graphics",
        "!doc": "<p>Draw an unfilled circle 1px wide in the Foreground Color</p>\n",
        "!url": "http://www.espruino.com/Reference#l_Graphics_drawCircle"
      },
      "drawCircleAA": {
        "!type": "fn(x: number, y: number, r: number) -> +Graphics",
        "!doc": "<p>Draw a circle, centred at (x,y) with radius r in the current foreground color</p>\n",
        "!url": "http://www.espruino.com/Reference#l_Graphics_drawCircleAA"
      },
      "fillEllipse": {
        "!type": "fn(x1: number, y1: number, x2: number, y2: number) -> +Graphics",
        "!doc": "<p>Draw a filled ellipse in the Foreground Color</p>\n",
        "!url": "http://www.espruino.com/Reference#l_Graphics_fillEllipse"
      },
      "drawEllipse": {
        "!type": "fn(x1: number, y1: number, x2: number, y2: number) -> +Graphics",
        "!doc": "<p>Draw an ellipse in the Foreground Color</p>\n",
        "!url": "http://www.espruino.com/Reference#l_Graphics_drawEllipse"
      },
      "getPixel": {
        "!type": "fn(x: number, y: number) -> number",
        "!doc": "<p>Get a pixel&#39;s color</p>\n",
        "!url": "http://www.espruino.com/Reference#l_Graphics_getPixel"
      },
      "setPixel": {
        "!type": "fn(x: number, y: number, col: ?) -> +Graphics",
        "!doc": "<p>Set a pixel&#39;s color</p>\n",
        "!url": "http://www.espruino.com/Reference#l_Graphics_setPixel"
      },
      "toColor": {
        "!type": "fn(r: ?, g: ?, b: ?) -> number",
        "!doc": "<p>Work out the color value to be used in the current bit depth based on the arguments.</p>\n<p>This is used internally by setColor and setBgColor</p>\n<pre><code><span class=\"hljs-comment\">// 1 bit</span>\ng.<span class=\"hljs-keyword\">to</span><span class=\"hljs-constructor\">Color(1,1,1)</span> =&gt; <span class=\"hljs-number\">1</span>\n<span class=\"hljs-comment\">// 16 bit</span>\ng.<span class=\"hljs-keyword\">to</span><span class=\"hljs-constructor\">Color(1,0,0)</span> =&gt; <span class=\"hljs-number\">0xF800</span>\n</code></pre>\n",
        "!url": "http://www.espruino.com/Reference#l_Graphics_toColor"
      },
      "blendColor": {
        "!type": "fn(col_a: ?, col_b: ?, amt: ?) -> number",
        "!doc": "<p>Blend between two colors, and return the result.</p>\n<pre><code><span class=\"hljs-comment\">// dark yellow - halfway between red and green</span>\nvar col = g.blend<span class=\"hljs-constructor\">Color(<span class=\"hljs-string\">&quot;#f00&quot;</span>,<span class=\"hljs-string\">&quot;#0f0&quot;</span>, 0.5)</span>;\n<span class=\"hljs-comment\">// Get a color 25% brighter than the theme&#x27;s background colour</span>\nvar col = g.blend<span class=\"hljs-constructor\">Color(<span class=\"hljs-params\">g</span>.<span class=\"hljs-params\">theme</span>.<span class=\"hljs-params\">fg</span>,<span class=\"hljs-params\">g</span>.<span class=\"hljs-params\">theme</span>.<span class=\"hljs-params\">bg</span>, 0.75)</span>;\n<span class=\"hljs-comment\">// then...</span>\ng.set<span class=\"hljs-constructor\">Color(<span class=\"hljs-params\">col</span>)</span>.fill<span class=\"hljs-constructor\">Rect(10,10,100,100)</span>;\n</code></pre>\n",
        "!url": "http://www.espruino.com/Reference#l_Graphics_blendColor"
      },
      "setColor": {
        "!type": "fn(r: ?, g: ?, b: ?) -> +Graphics",
        "!doc": "<p>Set the color to use for subsequent drawing operations.</p>\n<p>If just <code>r</code> is specified as an integer, the numeric value will be written directly into a pixel. eg. On a 24 bit <code>Graphics</code> instance you set bright blue with either <code>g.setColor(0,0,1)</code> or <code>g.setColor(0x0000FF)</code>.</p>\n<p>A good shortcut to ensure you get white on all platforms is to use <code>g.setColor(-1)</code></p>\n<p>The mapping is as follows:</p>\n<ul>\n<li>32 bit: <code>r,g,b</code> =&gt; <code>0xFFrrggbb</code></li>\n<li>24 bit: <code>r,g,b</code> =&gt; <code>0xrrggbb</code></li>\n<li>16 bit: <code>r,g,b</code> =&gt; <code>0brrrrrggggggbbbbb</code> (RGB565)</li>\n<li>Other bpp: <code>r,g,b</code> =&gt; white if <code>r+g+b &gt; 50%</code>, otherwise black (use <code>r</code> on its own as an integer)</li>\n</ul>\n<p>If you specified <code>color_order</code> when creating the <code>Graphics</code> instance, <code>r</code>,<code>g</code> and <code>b</code> will be swapped as you specified.</p>\n<p><strong>Note:</strong> On devices with low flash memory, <code>r</code> <strong>must</strong> be an integer representing the color in the current bit depth. It cannot\nbe a floating point value, and <code>g</code> and <code>b</code> are ignored.</p>\n",
        "!url": "http://www.espruino.com/Reference#l_Graphics_setColor"
      },
      "setBgColor": {
        "!type": "fn(r: ?, g: ?, b: ?) -> +Graphics",
        "!doc": "<p>Set the background color to use for subsequent drawing operations.</p>\n<p>See <code>Graphics.setColor</code> for more information on the mapping of <code>r</code>, <code>g</code>, and <code>b</code> to pixel values.</p>\n<p><strong>Note:</strong> On devices with low flash memory, <code>r</code> <strong>must</strong> be an integer representing the color in the current bit depth. It cannot\nbe a floating point value, and <code>g</code> and <code>b</code> are ignored.</p>\n",
        "!url": "http://www.espruino.com/Reference#l_Graphics_setBgColor"
      },
      "getColor": {
        "!type": "fn() -> number",
        "!doc": "<p>Get the color to use for subsequent drawing operations</p>\n",
        "!url": "http://www.espruino.com/Reference#l_Graphics_getColor"
      },
      "getBgColor": {
        "!type": "fn() -> number",
        "!doc": "<p>Get the background color to use for subsequent drawing operations</p>\n",
        "!url": "http://www.espruino.com/Reference#l_Graphics_getBgColor"
      },
      "setClipRect": {
        "!type": "fn(x1: number, y1: number, x2: number, y2: number) -> +Graphics",
        "!doc": "<p>This sets the &#39;clip rect&#39; that subsequent drawing operations are clipped to sit\nbetween.</p>\n<p>These values are inclusive - e.g. <code>g.setClipRect(1,0,5,0)</code> will ensure that only\npixel rows 1,2,3,4,5 are touched on column 0.</p>\n<p><strong>Note:</strong> For maximum flexibility on Bangle.js 1, the values here are not range\nchecked. For normal use, X and Y should be between 0 and\n<code>getWidth()-1</code>/<code>getHeight()-1</code>.</p>\n<p><strong>Note:</strong> The x/y values here are rotated, so that if <code>Graphics.setRotation</code> is\nused they correspond to the coordinates given to the draw functions, <em>not to the\nphysical device pixels</em>.</p>\n",
        "!url": "http://www.espruino.com/Reference#l_Graphics_setClipRect"
      },
      "setFontBitmap": {
        "!type": "fn() -> +Graphics",
        "!doc": "<p>Make subsequent calls to <code>drawString</code> use the built-in 4x6 pixel bitmapped Font</p>\n<p>It is recommended that you use <code>Graphics.setFont(&quot;4x6&quot;)</code> for more flexibility.</p>\n",
        "!url": "http://www.espruino.com/Reference#l_Graphics_setFontBitmap"
      },
      "setFontVector": {
        "!type": "fn(size: number) -> +Graphics",
        "!doc": "<p>Make subsequent calls to <code>drawString</code> use a Vector Font of the given height.</p>\n<p>It is recommended that you use <code>Graphics.setFont(&quot;Vector&quot;, size)</code> for more\nflexibility.</p>\n",
        "!url": "http://www.espruino.com/Reference#l_Graphics_setFontVector"
      },
      "setFontCustom": {
        "!type": "fn(bitmap: ?, firstChar: number, width: ?, height: number) -> +Graphics",
        "!doc": "<p>Make subsequent calls to <code>drawString</code> use a Custom Font of the given height. See\nthe <a href=\"http://www.espruino.com/Fonts\">Fonts page</a> for more information about\ncustom fonts and how to create them.</p>\n<p>For examples of use, see the <a href=\"https://www.espruino.com/Fonts#font-modules\">font\nmodules</a>.</p>\n<p><strong>Note:</strong> while you can specify the character code of the first character with\n<code>firstChar</code>, the newline character 13 will always be treated as a newline and\nnot rendered.</p>\n",
        "!url": "http://www.espruino.com/Reference#l_Graphics_setFontCustom"
      },
      "setFontPBF": {
        "!type": "fn(file: ?, scale: number) -> +Graphics",
        "!doc": "",
        "!url": "http://www.espruino.com/Reference#l_Graphics_setFontPBF"
      },
      "setFontAlign": {
        "!type": "fn(x: number, y: number, rotation: number) -> +Graphics",
        "!doc": "<p>Set the alignment for subsequent calls to <code>drawString</code></p>\n",
        "!url": "http://www.espruino.com/Reference#l_Graphics_setFontAlign"
      },
      "setFont": {
        "!type": "fn(name: ?, size: number) -> +Graphics",
        "!doc": "<p>Set the font by name. Various forms are available:</p>\n<ul>\n<li><code>g.setFont(&quot;4x6&quot;)</code> - standard 4x6 bitmap font</li>\n<li><code>g.setFont(&quot;Vector:12&quot;)</code> - vector font 12px high</li>\n<li><code>g.setFont(&quot;4x6:2&quot;)</code> - 4x6 bitmap font, doubled in size</li>\n<li><code>g.setFont(&quot;6x8:2x3&quot;)</code> - 6x8 bitmap font, doubled in width, tripled in height</li>\n</ul>\n<p>You can also use these forms, but they are not recommended:</p>\n<ul>\n<li><code>g.setFont(&quot;Vector12&quot;)</code> - vector font 12px high</li>\n<li><code>g.setFont(&quot;4x6&quot;,2)</code> - 4x6 bitmap font, doubled in size</li>\n</ul>\n<p><code>g.getFont()</code> will return the current font as a String.</p>\n<p>For a list of available font names, you can use <code>g.getFonts()</code>.</p>\n",
        "!url": "http://www.espruino.com/Reference#l_Graphics_setFont"
      },
      "getFont": {
        "!type": "fn() -> +String",
        "!doc": "<p>Get the font by name - can be saved and used with <code>Graphics.setFont</code>.</p>\n<p>Normally this might return something like <code>&quot;4x6&quot;</code>, but if a scale factor is\nspecified, a colon and then the size is reported, like &quot;4x6:2&quot;</p>\n<p><strong>Note:</strong> For custom fonts, <code>Custom</code> is currently reported instead of the font\nname.</p>\n",
        "!url": "http://www.espruino.com/Reference#l_Graphics_getFont"
      },
      "getFonts": {
        "!type": "fn() -> +Array",
        "!doc": "<p>Return an array of all fonts currently in the Graphics library.</p>\n<p><strong>Note:</strong> Vector fonts are specified as <code>Vector#</code> where <code>#</code> is the font height.\nAs there are effectively infinite fonts, just <code>Vector</code> is included in the list.</p>\n",
        "!url": "http://www.espruino.com/Reference#l_Graphics_getFonts"
      },
      "getFontHeight": {
        "!type": "fn() -> number",
        "!doc": "<p>Return the height in pixels of the current font</p>\n",
        "!url": "http://www.espruino.com/Reference#l_Graphics_getFontHeight"
      },
      "stringWidth": {
        "!type": "fn(str: ?) -> number",
        "!doc": "<p>Return the size in pixels of a string of text in the current font</p>\n",
        "!url": "http://www.espruino.com/Reference#l_Graphics_stringWidth"
      },
      "stringMetrics": {
        "!type": "fn(str: ?) -> ?",
        "!doc": "<p>Return the width and height in pixels of a string of text in the current font. The object returned contains:</p>\n<pre><code>{\n  <span class=\"hljs-attribute\">width</span>,              <span class=\"hljs-comment\">// Width of the string in pixels</span>\n  <span class=\"hljs-attribute\">height</span>,             <span class=\"hljs-comment\">// Height of the string in pixels</span>\n  unrenderableChars,  <span class=\"hljs-comment\">// If true, the string contains characters that the current font isn&#x27;t able to render.</span>\n  imageCount,         <span class=\"hljs-comment\">// How many inline images are in this string?</span>\n  maxImageHeight,     <span class=\"hljs-comment\">// If there are images, what is the maximum height of all images?</span>\n}\n</code></pre>\n",
        "!url": "http://www.espruino.com/Reference#l_Graphics_stringMetrics"
      },
      "wrapString": {
        "!type": "fn(str: ?, maxWidth: number) -> ?",
        "!doc": "<p>Wrap a string to the given pixel width using the current font, and return the\nlines as an array.</p>\n<p>To render within the screen&#39;s width you can do:</p>\n<pre><code>g.draw<span class=\"hljs-constructor\">String(<span class=\"hljs-params\">g</span>.<span class=\"hljs-params\">wrapString</span>(<span class=\"hljs-params\">text</span>, <span class=\"hljs-params\">g</span>.<span class=\"hljs-params\">getWidth</span>()</span>).join(<span class=\"hljs-string\">&quot;\\n&quot;</span>)),\n</code></pre>\n",
        "!url": "http://www.espruino.com/Reference#l_Graphics_wrapString"
      },
      "findFont": {
        "!type": "fn(text: ?, options: ?) -> ?",
        "!doc": "<p>Works out which font to use, and sets the current font to it.</p>\n<p>Usage:</p>\n<pre><code>g.findFont(<span class=\"hljs-string\">&quot;Hello World&quot;</span>, {\n  <span class=\"hljs-attr\">w</span> : <span class=\"hljs-number\">100</span>,    <span class=\"hljs-comment\">// optional: width available (default = screen width)</span>\n  h : <span class=\"hljs-number\">100</span>,    <span class=\"hljs-comment\">// optional: height available (default = screen height)</span>\n  <span class=\"hljs-built_in\">min</span> : <span class=\"hljs-number\">10</span>,   <span class=\"hljs-comment\">// optional: min font height</span>\n  <span class=\"hljs-built_in\">max</span> : <span class=\"hljs-number\">30</span>,   <span class=\"hljs-comment\">// optional: max font height</span>\n  wrap : <span class=\"hljs-literal\">true</span> <span class=\"hljs-comment\">// optional: allow word wrap?</span>\n  <span class=\"hljs-built_in\">trim</span> : <span class=\"hljs-literal\">true</span> <span class=\"hljs-comment\">// optional: trim to the specified height, add &#x27;...&#x27;</span>\n});\n</code></pre>\n<p>Returns:</p>\n<pre><code>{\n  <span class=\"hljs-built_in\">text</span> : <span class=\"hljs-string\">&quot;Hello\\nWorld&quot;</span>\n  font : <span class=\"hljs-string\">&quot;...&quot;</span>\n}\n</code></pre>\n",
        "!url": "http://www.espruino.com/Reference#l_Graphics_findFont"
      },
      "drawString": {
        "!type": "fn(str: ?, x: number, y: number, solid: bool) -> +Graphics",
        "!doc": "<p>Draw a string of text in the current font.</p>\n<pre><code><span class=\"hljs-attribute\">g</span>.drawString(<span class=\"hljs-string\">&quot;Hello World&quot;</span>, <span class=\"hljs-number\">10</span>, <span class=\"hljs-number\">10</span>);\n</code></pre>\n<p>Images may also be embedded inside strings (e.g. to render Emoji or characters\nnot in the current font). To do this, just add <code>0</code> then the image string (<a href=\"http://www.espruino.com/Graphics#images-bitmaps\">about\nImages</a>) For example:</p>\n<pre><code>g.drawString(<span class=\"hljs-string\">&quot;Hi \\0\\7\\5\\1\\x82 D\\x17\\xC0&quot;</span>);\n<span class=\"hljs-regexp\">//</span> draws:\n<span class=\"hljs-regexp\">//</span> <span class=\"hljs-comment\"># #  #      #     #</span>\n<span class=\"hljs-regexp\">//</span> <span class=\"hljs-comment\"># #            #</span>\n<span class=\"hljs-regexp\">//</span> <span class=\"hljs-comment\">### ##         #</span>\n<span class=\"hljs-regexp\">//</span> <span class=\"hljs-comment\"># #  #      #     #</span>\n<span class=\"hljs-regexp\">//</span> <span class=\"hljs-comment\"># # ###      #####</span>\n</code></pre>\n",
        "!url": "http://www.espruino.com/Reference#l_Graphics_drawString"
      },
      "getVectorFontPolys": {
        "!type": "fn(str: ?, options: ?) -> +Array",
        "!doc": "<p>Return the current string as a series of polygons (using the current vector font). <code>options</code> is as follows:</p>\n<ul>\n<li><code>x</code> - X offset of font (default 0)</li>\n<li><code>y</code> - Y offset of font (default 0)</li>\n<li><code>w</code> - Width of font (default 256) - the actual width will likely be less than this as most characters are non-square</li>\n<li><code>h</code> - Height of font (default 256) - the actual height will likely be less than this as most characters don&#39;t fully fill the font box</li>\n</ul>\n<pre><code>g.get<span class=\"hljs-constructor\">VectorFontPolys(<span class=\"hljs-string\">&quot;Hi&quot;</span>, {<span class=\"hljs-params\">x</span>:-80,<span class=\"hljs-params\">y</span>:-128})</span>;\n</code></pre>\n",
        "!url": "http://www.espruino.com/Reference#l_Graphics_getVectorFontPolys"
      },
      "drawLineString": {
        "!type": "fn(str: ?, x: number, y: number, options: ?) -> +Graphics",
        "!doc": "<p>Draw a string of text as a fixed-width line font</p>\n<p><code>options</code> contains:</p>\n<ul>\n<li><code>size</code>: font size in pixels (char width is half font size) - default 16</li>\n<li><code>rotate</code>: Initial rotation in radians - default 0</li>\n<li><code>twist</code>: Subsequent rotation per character in radians - default 0</li>\n</ul>\n",
        "!url": "http://www.espruino.com/Reference#l_Graphics_drawLineString"
      },
      "drawLine": {
        "!type": "fn(x1: number, y1: number, x2: number, y2: number) -> +Graphics",
        "!doc": "<p>Draw a line between x1,y1 and x2,y2 in the current foreground color</p>\n",
        "!url": "http://www.espruino.com/Reference#l_Graphics_drawLine"
      },
      "drawLineAA": {
        "!type": "fn(x1: number, y1: number, x2: number, y2: number) -> +Graphics",
        "!doc": "<p>Draw a line between x1,y1 and x2,y2 in the current foreground color</p>\n",
        "!url": "http://www.espruino.com/Reference#l_Graphics_drawLineAA"
      },
      "lineTo": {
        "!type": "fn(x: number, y: number) -> +Graphics",
        "!doc": "<p>Draw a line from the last position of <code>lineTo</code> or <code>moveTo</code> to this position</p>\n",
        "!url": "http://www.espruino.com/Reference#l_Graphics_lineTo"
      },
      "moveTo": {
        "!type": "fn(x: number, y: number) -> +Graphics",
        "!doc": "<p>Move the cursor to a position - see lineTo</p>\n",
        "!url": "http://www.espruino.com/Reference#l_Graphics_moveTo"
      },
      "drawPoly": {
        "!type": "fn(poly: ?, closed: bool) -> +Graphics",
        "!doc": "<p>Draw a polyline (lines between each of the points in <code>poly</code>) in the current\nforeground color</p>\n<p><strong>Note:</strong> there is a limit of 64 points (128 XY elements) for polygons</p>\n",
        "!url": "http://www.espruino.com/Reference#l_Graphics_drawPoly"
      },
      "drawPolyAA": {
        "!type": "fn(poly: ?, closed: bool) -> +Graphics",
        "!doc": "<p>Draw an <strong>antialiased</strong> polyline (lines between each of the points in <code>poly</code>) in\nthe current foreground color</p>\n<p><strong>Note:</strong> there is a limit of 64 points (128 XY elements) for polygons</p>\n",
        "!url": "http://www.espruino.com/Reference#l_Graphics_drawPolyAA"
      },
      "fillPoly": {
        "!type": "fn(poly: ?) -> +Graphics",
        "!doc": "<p>Draw a filled polygon in the current foreground color.</p>\n<pre><code><span class=\"hljs-attribute\">g</span>.fillPoly([\n  <span class=\"hljs-attribute\">16</span>, <span class=\"hljs-number\">0</span>,\n  <span class=\"hljs-attribute\">31</span>, <span class=\"hljs-number\">31</span>,\n  <span class=\"hljs-attribute\">26</span>, <span class=\"hljs-number\">31</span>,\n  <span class=\"hljs-attribute\">16</span>, <span class=\"hljs-number\">12</span>,\n  <span class=\"hljs-attribute\">6</span>, <span class=\"hljs-number\">28</span>,\n  <span class=\"hljs-attribute\">0</span>, <span class=\"hljs-number\">27</span> ]);\n</code></pre>\n<p>This fills from the top left hand side of the polygon (low X, low Y) <em>down to\nbut not including</em> the bottom right. When placed together polygons will align\nperfectly without overdraw - but this will not fill the same pixels as\n<code>drawPoly</code> (drawing a line around the edge of the polygon).</p>\n<p><strong>Note:</strong> there is a limit of 64 points (128 XY elements) for polygons</p>\n",
        "!url": "http://www.espruino.com/Reference#l_Graphics_fillPoly"
      },
      "fillPolyAA": {
        "!type": "fn(poly: ?) -> +Graphics",
        "!doc": "<p>Draw a filled polygon in the current foreground color.</p>\n<pre><code><span class=\"hljs-attribute\">g</span>.fillPolyAA([\n  <span class=\"hljs-attribute\">16</span>, <span class=\"hljs-number\">0</span>,\n  <span class=\"hljs-attribute\">31</span>, <span class=\"hljs-number\">31</span>,\n  <span class=\"hljs-attribute\">26</span>, <span class=\"hljs-number\">31</span>,\n  <span class=\"hljs-attribute\">16</span>, <span class=\"hljs-number\">12</span>,\n  <span class=\"hljs-attribute\">6</span>, <span class=\"hljs-number\">28</span>,\n  <span class=\"hljs-attribute\">0</span>, <span class=\"hljs-number\">27</span> ]);\n</code></pre>\n<p>This fills from the top left hand side of the polygon (low X, low Y) <em>down to\nbut not including</em> the bottom right. When placed together polygons will align\nperfectly without overdraw - but this will not fill the same pixels as\n<code>drawPoly</code> (drawing a line around the edge of the polygon).</p>\n<p><strong>Note:</strong> there is a limit of 64 points (128 XY elements) for polygons</p>\n",
        "!url": "http://www.espruino.com/Reference#l_Graphics_fillPolyAA"
      },
      "setRotation": {
        "!type": "fn(rotation: number, reflect: bool) -> +Graphics",
        "!doc": "<p>Set the current rotation of the graphics device.</p>\n",
        "!url": "http://www.espruino.com/Reference#l_Graphics_setRotation"
      },
      "imageMetrics": {
        "!type": "fn(str: ?) -> ?",
        "!doc": "<p>Return the width and height in pixels of an image (either Graphics, Image\nObject, Image String or ArrayBuffer). Returns <code>undefined</code> if image couldn&#39;t be\ndecoded.</p>\n<p><code>frames</code> is also included is the image contains more information than you&#39;d\nexpect for a single bitmap. In this case the bitmap might be an animation with\nmultiple frames</p>\n",
        "!url": "http://www.espruino.com/Reference#l_Graphics_imageMetrics"
      },
      "drawImage": {
        "!type": "fn(image: ?, x: number, y: number, options: ?) -> +Graphics",
        "!doc": "<p>Image can be:</p>\n<ul>\n<li>An object with the following fields <code>{ width : int, height : int, bpp : optional int, buffer : ArrayBuffer/String, transparent: optional int, palette : optional Uint16Array(2/4/16) }</code>. bpp = bits per pixel (default is\n1), transparent (if defined) is the colour that will be treated as\ntransparent, and palette is a color palette that each pixel will be looked up\nin first</li>\n<li>A String where the the first few bytes are:\n<code>width,height,bpp,[transparent,]image_bytes...</code>. If a transparent colour is\nspecified the top bit of <code>bpp</code> should be set.</li>\n<li>An ArrayBuffer <code>Graphics</code> object (if <code>bpp&lt;8</code>, <code>msb:true</code> must be set) - this is\ndisabled on devices without much flash memory available. If a <code>Graphics</code> object\nis supplied, it can also contain transparent/palette fields as if it were\nan image.</li>\n</ul>\n<p>See <a href=\"https://www.espruino.com/Graphics#images-bitmaps\">https://www.espruino.com/Graphics#images-bitmaps</a> for more information about\nimage formats.</p>\n<p>Draw an image at the specified position.</p>\n<ul>\n<li>If the image is 1 bit, the graphics foreground/background colours will be\nused.</li>\n<li>If <code>img.palette</code> is a Uint16Array or 2/4/16 elements, color data will be\nlooked from the supplied palette</li>\n<li>On Bangle.js, 2 bit images blend from background(0) to foreground(1) colours</li>\n<li>On Bangle.js, 4 bit images use the Apple Mac 16 color palette</li>\n<li>On Bangle.js, 8 bit images use the Web Safe 216 color palette</li>\n<li>Otherwise color data will be copied as-is. Bitmaps are rendered MSB-first</li>\n</ul>\n<p>If <code>options</code> is supplied, <code>drawImage</code> will allow images to be rendered at any\nscale or angle. If <code>options.rotate</code> is set it will center images at <code>x,y</code>.\n<code>options</code> must be an object of the form:</p>\n<pre><code>{\n  rotate : <span class=\"hljs-type\">float</span>, // the amount <span class=\"hljs-keyword\">to</span> rotate the image <span class=\"hljs-keyword\">in</span> radians (<span class=\"hljs-keyword\">default</span> <span class=\"hljs-number\">0</span>)\n  scale : <span class=\"hljs-type\">float</span>, // the amount <span class=\"hljs-keyword\">to</span> scale the image up (<span class=\"hljs-keyword\">default</span> <span class=\"hljs-number\">1</span>)\n  frame : <span class=\"hljs-type\">int</span>    // <span class=\"hljs-keyword\">if</span> specified <span class=\"hljs-keyword\">and</span> the image has frames <span class=\"hljs-keyword\">of</span> data\n                 //  <span class=\"hljs-keyword\">after</span> the initial frame, draw one <span class=\"hljs-keyword\">of</span> those frames <span class=\"hljs-keyword\">from</span> the image\n  <span class=\"hljs-keyword\">filter</span> : <span class=\"hljs-type\">bool</span>  // (<span class=\"hljs-number\">2</span>v19+) <span class=\"hljs-keyword\">when</span> <span class=\"hljs-keyword\">set</span>, <span class=\"hljs-keyword\">if</span> scale&lt;<span class=\"hljs-number\">0.75</span> <span class=\"hljs-keyword\">perform</span> <span class=\"hljs-number\">2</span>x2 supersampling <span class=\"hljs-keyword\">to</span> smoothly downscale the image\n}\n</code></pre>\n<p>For example:</p>\n<pre><code><span class=\"hljs-comment\">// In the top left of the screen</span>\ng.draw<span class=\"hljs-constructor\">Image(<span class=\"hljs-params\">img</span>,0,0)</span>;\n<span class=\"hljs-comment\">// In the top left of the screen, twice as big</span>\ng.draw<span class=\"hljs-constructor\">Image(<span class=\"hljs-params\">img</span>,0,0,{<span class=\"hljs-params\">scale</span>:2})</span>;\n<span class=\"hljs-comment\">// In the center of the screen, twice as big, 45 degrees</span>\ng.draw<span class=\"hljs-constructor\">Image(<span class=\"hljs-params\">img</span>, <span class=\"hljs-params\">g</span>.<span class=\"hljs-params\">getWidth</span>()</span>/<span class=\"hljs-number\">2</span>, g.get<span class=\"hljs-constructor\">Height()</span>/<span class=\"hljs-number\">2</span>,\n            {scale:<span class=\"hljs-number\">2</span>, rotate:Math.PI/<span class=\"hljs-number\">4</span>});\n</code></pre>\n",
        "!url": "http://www.espruino.com/Reference#l_Graphics_drawImage"
      },
      "drawImages": {
        "!type": "fn(layers: ?, options: ?) -> +Graphics",
        "!doc": "<p>Draws multiple images <em>at once</em> - which avoids flicker on unbuffered systems\nlike Bangle.js. Maximum layer count right now is 4.</p>\n<pre><code>layers = [ {\n  {x : <span class=\"hljs-type\">float</span>, <span class=\"hljs-comment\">// x start position</span>\n   y : <span class=\"hljs-type\">float</span>, <span class=\"hljs-comment\">// y start position</span>\n   image : string/object/Graphics,\n   scale : <span class=\"hljs-type\">float</span>, <span class=\"hljs-comment\">// scale factor, default 1</span>\n   rotate : <span class=\"hljs-type\">float</span>, <span class=\"hljs-comment\">// angle in radians</span>\n   center : <span class=\"hljs-type\">bool</span> <span class=\"hljs-comment\">// center on x,y? default is top left</span>\n   repeat : should <span class=\"hljs-keyword\">this</span> image be <span class=\"hljs-built_in\">repeated</span> (tiled?)\n   nobounds : <span class=\"hljs-type\">bool</span> <span class=\"hljs-comment\">// if true, the bounds of the image are not used to work out the default area to draw</span>\n   palette : <span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Uint16Array</span>(<span class=\"hljs-number\">2</span>/<span class=\"hljs-number\">4</span>/<span class=\"hljs-number\">8</span>/<span class=\"hljs-number\">16</span>/<span class=\"hljs-number\">256</span>) <span class=\"hljs-comment\">// (2v22+) a color palette to use with the image (overrides the image&#x27;s palette)</span>\n   compose : <span class=\"hljs-string\">&quot;&quot;</span>/<span class=\"hljs-string\">&quot;add&quot;</span>/<span class=\"hljs-string\">&quot;or&quot;</span>/<span class=\"hljs-string\">&quot;xor&quot;</span> <span class=\"hljs-comment\">// (2v22+) if set, the operation used when combining with the previous layer</span>\n  }\n]\noptions = {\n x,y, : <span class=\"hljs-type\">int</span> <span class=\"hljs-comment\">// the area to render. Defaults to rendering just enough to cover what&#x27;s requested</span>\n width,height : <span class=\"hljs-type\">int</span>\n}\n</code></pre>\n",
        "!url": "http://www.espruino.com/Reference#l_Graphics_drawImages"
      },
      "asImage": {
        "!type": "fn(options: ?) -> ?",
        "!doc": "<p>Return this <code>Graphics</code> object as an Image that can be used with\n<code>Graphics.drawImage</code>. Check out <a href=\"http://www.espruino.com/Graphics#images-bitmaps\">the Graphics reference\npage</a> for more information on\nimages.</p>\n<p>Will return undefined if data can&#39;t be allocated for the image.</p>\n<p><code>options</code> can be either:</p>\n<ul>\n<li><code>undefined</code> or <code>&quot;object&quot;</code> - return an image object</li>\n<li><code>string</code> - return the image as a string</li>\n<li>(in 2v26 onwards) <code>{type:undefined/&quot;object&quot;/&quot;string&quot;, x,y,w,h}</code> - Return only a part of the image as an object/string.</li>\n</ul>\n<p>The image data itself will be referenced rather than copied if:</p>\n<ul>\n<li>An image <code>object</code> was requested (not <code>string</code>)</li>\n<li><code>x</code>/<code>y</code> are 0 and <code>w</code>/<code>h</code> are the graphics&#39;s height</li>\n<li>The <code>Graphics</code> instance was created with <code>Graphics.createArrayBuffer</code></li>\n<li>Is 8 bpp <em>OR</em> the <code>{msb:true}</code> option was given</li>\n<li>No other format options (zigzag/etc) were given</li>\n</ul>\n<p>Otherwise data will be copied, which takes up more space and may be quite slow.</p>\n<p>If the <code>Graphics</code> object contains <code>transparent</code> or <code>palette</code> fields,\n<a href=\"http://www.espruino.com/Graphics#images-bitmaps\">as you might find in an image</a>,\nthose will be included in the generated image too.</p>\n<pre><code><span class=\"hljs-attribute\">var</span> gfx = Graphics.createArrayBuffer(<span class=\"hljs-number\">8</span>,<span class=\"hljs-number\">8</span>,<span class=\"hljs-number\">1</span>);\n<span class=\"hljs-attribute\">gfx</span>.transparent = <span class=\"hljs-number\">0</span>;\n<span class=\"hljs-attribute\">gfx</span>.drawString(<span class=\"hljs-string\">&quot;X&quot;</span>,<span class=\"hljs-number\">0</span>,<span class=\"hljs-number\">0</span>);\n<span class=\"hljs-attribute\">var</span> im = gfx.asImage(<span class=\"hljs-string\">&quot;string&quot;</span>);\n</code></pre>\n",
        "!url": "http://www.espruino.com/Reference#l_Graphics_asImage"
      },
      "getModified": {
        "!type": "fn(reset: bool) -> ?",
        "!doc": "<p>Return the area of the Graphics canvas that has been modified, and optionally\nclear the modified area to 0.</p>\n<p>For instance if <code>g.setPixel(10,20)</code> was called, this would return <code>{x1:10, y1:20, x2:10, y2:20}</code></p>\n",
        "!url": "http://www.espruino.com/Reference#l_Graphics_getModified"
      },
      "scroll": {
        "!type": "fn(x: number, y: number) -> +Graphics",
        "!doc": "<p>Scroll the contents of this graphics in a certain direction. The remaining area\nis filled with the background color.</p>\n<p>Note: This uses repeated pixel reads and writes, so will not work on platforms\nthat don&#39;t support pixel reads.</p>\n",
        "!url": "http://www.espruino.com/Reference#l_Graphics_scroll"
      },
      "blit": {
        "!type": "fn(options: ?) -> +Graphics",
        "!doc": "<p>Blit one area of the screen (x1,y1 w,h) to another (x2,y2 w,h)</p>\n<pre><code>g.<span class=\"hljs-title function_ invoke__\">blit</span>({\n  <span class=\"hljs-attr\">x1</span>:<span class=\"hljs-number\">0</span>, <span class=\"hljs-attr\">y1</span>:<span class=\"hljs-number\">0</span>,\n  <span class=\"hljs-attr\">w</span>:<span class=\"hljs-number\">32</span>, <span class=\"hljs-attr\">h</span>:<span class=\"hljs-number\">32</span>,\n  <span class=\"hljs-attr\">x2</span>:<span class=\"hljs-number\">100</span>, <span class=\"hljs-attr\">y2</span>:<span class=\"hljs-number\">100</span>,\n  setModified : <span class=\"hljs-literal\">true</span> // should we set the modified area?\n});\n</code></pre>\n<p>Note: This uses repeated pixel reads and writes, so will not work on platforms\nthat don&#39;t support pixel reads.</p>\n",
        "!url": "http://www.espruino.com/Reference#l_Graphics_blit"
      },
      "asBMP": {
        "!type": "fn() -> ?",
        "!doc": "<p>Create a Windows BMP file from this <code>Graphics</code> instance, and return it as a\nString.</p>\n",
        "!url": "http://www.espruino.com/Reference#l_Graphics_asBMP"
      },
      "asURL": {
        "!type": "fn() -> ?",
        "!doc": "<p>Create a URL of the form <code>data:image/bmp;base64,...</code> that can be pasted into the\nbrowser.</p>\n<p>The Espruino Web IDE can detect this data on the console and render the image\ninline automatically.</p>\n",
        "!url": "http://www.espruino.com/Reference#l_Graphics_asURL"
      },
      "dump": {
        "!type": "fn()",
        "!doc": "<p>Output this image as a bitmap URL of the form <code>data:image/bmp;base64,...</code>. The\nEspruino Web IDE will detect this on the console and will render the image\ninline automatically.</p>\n<p>This is identical to <code>console.log(g.asURL())</code> - it is just a convenient function\nfor easy debugging and producing screenshots of what is currently in the\n<code>Graphics</code> instance.</p>\n<p><strong>Note:</strong> This may not work on some bit depths of <code>Graphics</code> instances. It will\nalso not work for the main <code>Graphics</code> instance of Bangle.js 1 as the graphics on\nBangle.js 1 are stored in write-only memory.</p>\n",
        "!url": "http://www.espruino.com/Reference#l_Graphics_dump"
      },
      "saveScreenshot": {
        "!type": "fn(filename: ?)",
        "!doc": "",
        "!url": "http://www.espruino.com/Reference#l_Graphics_saveScreenshot"
      },
      "quadraticBezier": {
        "!type": "fn(arr: ?, options: ?) -> ?",
        "!doc": "<p>Calculate the square area under a Bezier curve.</p>\n<p> x0,y0: start point x1,y1: control point y2,y2: end point</p>\n<p> Max 10 points without start point.</p>\n",
        "!url": "http://www.espruino.com/Reference#l_Graphics_quadraticBezier"
      },
      "transformVertices": {
        "!type": "fn(verts: ?, transformation: ?) -> ?",
        "!doc": "<p>Transformation can be:</p>\n<ul>\n<li>An object of the form</li>\n</ul>\n<pre><code>{\n  x: <span class=\"hljs-keyword\">float</span>, <span class=\"hljs-comment\">// x offset (default 0)</span>\n  y: <span class=\"hljs-keyword\">float</span>, <span class=\"hljs-comment\">// y offset (default 0)</span>\n  <span class=\"hljs-keyword\">scale</span>: <span class=\"hljs-keyword\">float</span>, <span class=\"hljs-comment\">// scale factor (default 1)</span>\n  <span class=\"hljs-keyword\">rotate</span>: <span class=\"hljs-keyword\">float</span>, <span class=\"hljs-comment\">// angle in radians (default 0)</span>\n}\n</code></pre>\n<ul>\n<li>A six-element array of the form <code>[a,b,c,d,e,f]</code>, which represents the 2D transformation matrix</li>\n</ul>\n<pre><code><span class=\"hljs-attribute\">a</span> c e\n<span class=\"hljs-attribute\">b</span> d f\n<span class=\"hljs-attribute\">0</span> <span class=\"hljs-number\">0</span> <span class=\"hljs-number\">1</span>\n</code></pre>\n<p> Apply a transformation to an array of vertices.</p>\n",
        "!url": "http://www.espruino.com/Reference#l_Graphics_transformVertices"
      },
      "floodFill": {
        "!type": "fn(x: number, y: number, col: ?) -> +Graphics",
        "!doc": "<p>Flood fills the given <code>Graphics</code> instance out from a particular point.</p>\n<p><strong>Note:</strong> This only works on <code>Graphics</code> instances that support readback with <code>getPixel</code>. It\nis also not capable of filling over dithered patterns (eg non-solid colours on Bangle.js 2)</p>\n",
        "!url": "http://www.espruino.com/Reference#l_Graphics_floodFill"
      },
      "theme": {
        "!type": "?",
        "!doc": "<p>Returns an object of the form:</p>\n<pre><code>{\n  fg : <span class=\"hljs-number\">0</span>xFFFF,  <span class=\"hljs-regexp\">//</span> foreground colour\n  bg : <span class=\"hljs-number\">0</span>,       <span class=\"hljs-regexp\">//</span> background colour\n  fg2 : <span class=\"hljs-number\">0</span>xFFFF,  <span class=\"hljs-regexp\">//</span> accented foreground colour\n  bg2 : <span class=\"hljs-number\">0</span>x0007,  <span class=\"hljs-regexp\">//</span> accented background colour\n  fgH : <span class=\"hljs-number\">0</span>xFFFF,  <span class=\"hljs-regexp\">//</span> highlighted foreground colour\n  bgH : <span class=\"hljs-number\">0</span>x02F7,  <span class=\"hljs-regexp\">//</span> highlighted background colour\n  dark : true,  <span class=\"hljs-regexp\">//</span> Is background dark (e.g. foreground should be a light colour)\n}\n</code></pre>\n<p>These values can then be passed to <code>g.setColor</code>/<code>g.setBgColor</code> for example\n<code>g.setColor(g.theme.fg2)</code>. When the <code>Graphics</code> instance is reset, the background\ncolor is automatically set to <code>g.theme.bg</code> and foreground is set to\n<code>g.theme.fg</code>.</p>\n<p>On Bangle.js these values can be changed by writing updated values to <code>theme</code> in\n<code>settings.js</code> and reloading the app - or they can be changed temporarily by\ncalling <code>Graphics.setTheme</code></p>\n",
        "!url": "http://www.espruino.com/Reference#l_Graphics_theme"
      },
      "setTheme": {
        "!type": "fn(theme: ?) -> +Graphics",
        "!doc": "<p>Set the global colour scheme. On Bangle.js, this is reloaded from\n<code>settings.json</code> for each new app loaded.</p>\n<p>See <code>Graphics.theme</code> for the fields that can be provided. For instance you can\nchange the background to red using:</p>\n<pre><code>g.set<span class=\"hljs-constructor\">Theme({<span class=\"hljs-params\">bg</span>:<span class=\"hljs-string\">&quot;#f00&quot;</span>})</span>;\n</code></pre>\n",
        "!url": "http://www.espruino.com/Reference#l_Graphics_setTheme"
      },
      "filter": {
        "!type": "fn(filter: ?, options: ?) -> +Graphics",
        "!doc": "<p>Perform a filter on the current <code>Graphics</code> instance. Requires the Graphics\ninstance to support readback (eg <code>.getPixel</code> should work), and only uses\n8 bit values for buffer and filter.</p>\n<pre><code>g.filter([ // a gaussian filter\n<span class=\"hljs-built_in\">    1,</span> <span class=\"hljs-number\">4</span>, <span class=\"hljs-number\">7</span>, <span class=\"hljs-number\">4</span>, <span class=\"hljs-number\">1</span>,\n<span class=\"hljs-built_in\">    4,</span><span class=\"hljs-number\">16</span>,<span class=\"hljs-number\">26</span>,<span class=\"hljs-number\">16</span>, <span class=\"hljs-number\">4</span>,\n<span class=\"hljs-built_in\">    7,</span><span class=\"hljs-number\">26</span>,<span class=\"hljs-number\">41</span>,<span class=\"hljs-number\">26</span>, <span class=\"hljs-number\">7</span>,\n<span class=\"hljs-built_in\">    4,</span><span class=\"hljs-number\">16</span>,<span class=\"hljs-number\">26</span>,<span class=\"hljs-number\">16</span>, <span class=\"hljs-number\">4</span>,\n<span class=\"hljs-built_in\">    1,</span> <span class=\"hljs-number\">4</span>, <span class=\"hljs-number\">7</span>, <span class=\"hljs-number\">4</span>, <span class=\"hljs-number\">1</span>\n<span class=\"hljs-title\">], { w:5, h:5, div:</span><span class=\"hljs-number\">273</span> })<span class=\"hljs-comment\">;</span>\n</code></pre>\n<pre><code>{\n  w,h,    // <span class=\"hljs-keyword\">filter</span> width+height\n  div,    // divisor applied <span class=\"hljs-keyword\">after</span> <span class=\"hljs-keyword\">filter</span>\n  <span class=\"hljs-keyword\">offset</span>, // DC <span class=\"hljs-keyword\">offset</span> applied <span class=\"hljs-keyword\">to</span> <span class=\"hljs-keyword\">filter</span> <span class=\"hljs-keyword\">before</span> division (<span class=\"hljs-keyword\">default</span> <span class=\"hljs-number\">0</span>)\n  max,    // maximum output <span class=\"hljs-keyword\">value</span> (default=max allowed <span class=\"hljs-keyword\">by</span> bpp)\n  <span class=\"hljs-keyword\">filter</span>, // undefined (replace), <span class=\"hljs-keyword\">or</span> &quot;max&quot; (use max(original,filtered))\n}\n</code></pre>\n",
        "!url": "http://www.espruino.com/Reference#l_Graphics_filter"
      },
      "setFont17": {
        "!type": "fn(scale: number) -> +Graphics",
        "!doc": "<p>Set the current font</p>\n",
        "!url": "http://www.espruino.com/Reference#l_Graphics_setFont17"
      },
      "setFont12x20": {
        "!type": "fn(scale: number) -> +Graphics",
        "!doc": "<p>Set the current font</p>\n",
        "!url": "http://www.espruino.com/Reference#l_Graphics_setFont12x20"
      }
    },
    "getInstance": {
      "!type": "fn() -> ?",
      "!doc": "<p>On devices like Pixl.js or HYSTM boards that contain a built-in display this\nwill return an instance of the graphics class that can be used to access that\ndisplay.</p>\n<p>Internally, this is stored as a member called <code>gfx</code> inside the &#39;hiddenRoot&#39;.</p>\n",
      "!url": "http://www.espruino.com/Reference#l_Graphics_getInstance"
    },
    "createArrayBuffer": {
      "!type": "fn(width: number, height: number, bpp: number, options: ?) -> +Graphics",
      "!doc": "<p>Create a <code>Graphics</code> object that renders to an <code>ArrayBuffer</code>. This will have a field\ncalled <code>&#39;buffer&#39;</code> that can get used to get at the buffer itself</p>\n",
      "!url": "http://www.espruino.com/Reference#l_Graphics_createArrayBuffer"
    },
    "createCallback": {
      "!type": "fn(width: number, height: number, bpp: number, callback: ?) -> +Graphics",
      "!doc": "<p>Create a <code>Graphics</code> object that renders by calling a JavaScript callback function\nto draw pixels</p>\n",
      "!url": "http://www.espruino.com/Reference#l_Graphics_createCallback"
    },
    "createSDL": {
      "!type": "fn(width: number, height: number, bpp: number) -> +Graphics",
      "!doc": "<p>Create a <code>Graphics</code> object that renders to SDL window (Linux-based devices only)</p>\n",
      "!url": "http://www.espruino.com/Reference#l_Graphics_createSDL"
    },
    "createImage": {
      "!type": "fn(str: ?) -> ?",
      "!doc": "<p>Create a simple Black and White image for use with <code>Graphics.drawImage</code>.</p>\n<p>Use as follows:</p>\n<pre><code>var img = Graphics.createImage(`\nXXXXXXXXX\nX       X\nX   X   X\nX   X   X\nX       X\nXXXXXXXXX\n`);\ng.drawImage(img, x,y);\nvar img = Graphics.createImage(`\n<span class=\"hljs-code\">.....\n.XXX.\n.X.X.\n.XXX.\n.....</span>\n`);\ng.drawImage(img, x,y);\n</code></pre>\n<p>If the characters at the beginning and end of the string are newlines, they will\nbe ignored. Spaces are treated as <code>0</code>, and any other character is a <code>1</code></p>\n",
      "!url": "http://www.espruino.com/Reference#l_Graphics_createImage"
    }
  },
  "Terminal": {
    "!type": "+Serial",
    "!doc": "<p>A simple VT100 terminal emulator.</p>\n<p>When data is sent to the <code>Terminal</code> object, <code>Graphics.getInstance()</code> is called\nand if an instance of <code>Graphics</code> is found then characters are written to it.</p>\n",
    "!url": "http://www.espruino.com/Reference#l__global_Terminal"
  },
  "tensorflow": {
    "!type": "fn()",
    "!doc": "",
    "!url": "http://www.espruino.com/Reference#tensorflow",
    "create": {
      "!type": "fn(arenaSize: number, model: ?) -> +TFMicroInterpreter",
      "!doc": "",
      "!url": "http://www.espruino.com/Reference#l_tensorflow_create"
    }
  },
  "TFMicroInterpreter": {
    "!type": "fn()",
    "!doc": "<p>Class containing an instance of TFMicroInterpreter</p>\n",
    "!url": "http://www.espruino.com/Reference#TFMicroInterpreter",
    "prototype": {
      "getInput": {
        "!type": "fn() -> +ArrayBufferView",
        "!doc": "",
        "!url": "http://www.espruino.com/Reference#l_TFMicroInterpreter_getInput"
      },
      "getOutput": {
        "!type": "fn() -> +ArrayBufferView",
        "!doc": "",
        "!url": "http://www.espruino.com/Reference#l_TFMicroInterpreter_getOutput"
      },
      "invoke": {
        "!type": "fn()",
        "!doc": "",
        "!url": "http://www.espruino.com/Reference#l_TFMicroInterpreter_invoke"
      }
    }
  },
  "crypto": {
    "!type": "fn()",
    "!doc": "<p>Cryptographic functions</p>\n<p><strong>Note:</strong> This library is currently only included in builds for boards where\nthere is space. For other boards there is <code>crypto.js</code> which implements SHA1 in\nJS.</p>\n",
    "!url": "http://www.espruino.com/Reference#crypto",
    "AES": {
      "!type": "?",
      "!doc": "<p>Class containing AES encryption/decryption</p>\n",
      "!url": "http://www.espruino.com/Reference#l_crypto_AES"
    },
    "SHA1": {
      "!type": "fn(message: ?) -> +ArrayBuffer",
      "!doc": "<p>Performs a SHA1 hash and returns the result as a 20 byte ArrayBuffer.</p>\n<p><strong>Note:</strong> On some boards (currently only Espruino Original) there isn&#39;t space\nfor a fully unrolled SHA1 implementation so a slower all-JS implementation is\nused instead.</p>\n",
      "!url": "http://www.espruino.com/Reference#l_crypto_SHA1"
    },
    "SHA224": {
      "!type": "fn(message: ?) -> +ArrayBuffer",
      "!doc": "<p>Performs a SHA224 hash and returns the result as a 28 byte ArrayBuffer</p>\n",
      "!url": "http://www.espruino.com/Reference#l_crypto_SHA224"
    },
    "SHA256": {
      "!type": "fn(message: ?) -> +ArrayBuffer",
      "!doc": "<p>Performs a SHA256 hash and returns the result as a 32 byte ArrayBuffer</p>\n",
      "!url": "http://www.espruino.com/Reference#l_crypto_SHA256"
    },
    "SHA384": {
      "!type": "fn(message: ?) -> +ArrayBuffer",
      "!doc": "<p>Performs a SHA384 hash and returns the result as a 48 byte ArrayBuffer</p>\n",
      "!url": "http://www.espruino.com/Reference#l_crypto_SHA384"
    },
    "SHA512": {
      "!type": "fn(message: ?) -> +ArrayBuffer",
      "!doc": "<p>Performs a SHA512 hash and returns the result as a 64 byte ArrayBuffer</p>\n",
      "!url": "http://www.espruino.com/Reference#l_crypto_SHA512"
    },
    "PBKDF2": {
      "!type": "fn(passphrase: ?, salt: ?, options: ?) -> +ArrayBuffer",
      "!doc": "<p>Password-Based Key Derivation Function 2 algorithm, using SHA512</p>\n",
      "!url": "http://www.espruino.com/Reference#l_crypto_PBKDF2"
    }
  },
  "AES": {
    "!type": "fn()",
    "!doc": "<p>Class containing AES encryption/decryption</p>\n<p><strong>Note:</strong> This library is currently only included in builds for boards where\nthere is space. For other boards there is <code>crypto.js</code> which implements SHA1 in\nJS.</p>\n",
    "!url": "http://www.espruino.com/Reference#AES",
    "encrypt": {
      "!type": "fn(passphrase: ?, key: ?, options: ?) -> +ArrayBuffer",
      "!doc": "",
      "!url": "http://www.espruino.com/Reference#l_AES_encrypt"
    },
    "decrypt": {
      "!type": "fn(passphrase: ?, key: ?, options: ?) -> +ArrayBuffer",
      "!doc": "",
      "!url": "http://www.espruino.com/Reference#l_AES_decrypt"
    },
    "ccmEncrypt": {
      "!type": "fn(message: ?, key: ?, iv: ?, tagLen: ?) -> +AES_CCM_EncryptResult",
      "!doc": "<p>Encrypt a message with a key using AES in CCM authenticated encryption mode.</p>\n<p>This returns an object with the encrypted data and a generated tag for message authentication.</p>\n<p>Usage example:</p>\n<pre><code><span class=\"hljs-keyword\">let</span> message = <span class=\"hljs-string\">&quot;Hello World!&quot;</span>;\n<span class=\"hljs-keyword\">let</span> key = <span class=\"hljs-literal\">[<span class=\"hljs-number\">0x00</span>, <span class=\"hljs-number\">0x11</span>, <span class=\"hljs-number\">0x22</span>, <span class=\"hljs-number\">0x33</span>, <span class=\"hljs-number\">0x44</span>, <span class=\"hljs-number\">0x55</span>, <span class=\"hljs-number\">0x66</span>, <span class=\"hljs-number\">0x77</span>, <span class=\"hljs-number\">0x88</span>, <span class=\"hljs-number\">0x99</span>, <span class=\"hljs-number\">0xaa</span>, <span class=\"hljs-number\">0xbb</span>, <span class=\"hljs-number\">0xcc</span>, <span class=\"hljs-number\">0xdd</span>, <span class=\"hljs-number\">0xee</span>, <span class=\"hljs-number\">0xff</span>]</span>;\n<span class=\"hljs-keyword\">let</span> nonce = <span class=\"hljs-literal\">[<span class=\"hljs-number\">0x00</span>, <span class=\"hljs-number\">0x11</span>, <span class=\"hljs-number\">0x22</span>, <span class=\"hljs-number\">0x33</span>, <span class=\"hljs-number\">0x44</span>, <span class=\"hljs-number\">0x55</span>, <span class=\"hljs-number\">0x66</span>]</span>;\n<span class=\"hljs-keyword\">let</span> tagLength = <span class=\"hljs-number\">4</span>;\n<span class=\"hljs-keyword\">let</span> result = <span class=\"hljs-module-access\"><span class=\"hljs-module\"><span class=\"hljs-identifier\">AES</span>.</span></span>ccm<span class=\"hljs-constructor\">Encrypt(<span class=\"hljs-params\">message</span>, <span class=\"hljs-params\">key</span>, <span class=\"hljs-params\">nonce</span>, <span class=\"hljs-params\">tagLength</span>)</span>;\n</code></pre>\n<p>The <code>result</code> object should now have a <code>data</code> and <code>tag</code> attribute; both are needed for decrypting and verifying the message:</p>\n<pre><code>{\n  data: <span class=\"hljs-string\">[206, 98, 239, 219, 146, 157, 59, 123, 102, 92, 118, 209]</span>,\n  tag: <span class=\"hljs-string\">[230, 153, 191, 142]</span>\n}\n</code></pre>\n",
      "!url": "http://www.espruino.com/Reference#l_AES_ccmEncrypt"
    },
    "ccmDecrypt": {
      "!type": "fn(message: ?, key: ?, iv: ?, tag: ?) -> ?",
      "!doc": "<p>Decrypt and authenticate an AES CCM encrypted message with an associated tag.</p>\n<p>Usage example:</p>\n<pre><code><span class=\"hljs-keyword\">let</span> message = <span class=\"hljs-string\">&quot;Hello World!&quot;</span>;\n<span class=\"hljs-keyword\">let</span> key = <span class=\"hljs-literal\">[<span class=\"hljs-number\">0x00</span>, <span class=\"hljs-number\">0x11</span>, <span class=\"hljs-number\">0x22</span>, <span class=\"hljs-number\">0x33</span>, <span class=\"hljs-number\">0x44</span>, <span class=\"hljs-number\">0x55</span>, <span class=\"hljs-number\">0x66</span>, <span class=\"hljs-number\">0x77</span>, <span class=\"hljs-number\">0x88</span>, <span class=\"hljs-number\">0x99</span>, <span class=\"hljs-number\">0xaa</span>, <span class=\"hljs-number\">0xbb</span>, <span class=\"hljs-number\">0xcc</span>, <span class=\"hljs-number\">0xdd</span>, <span class=\"hljs-number\">0xee</span>, <span class=\"hljs-number\">0xff</span>]</span>;\n<span class=\"hljs-keyword\">let</span> nonce = <span class=\"hljs-literal\">[<span class=\"hljs-number\">0x00</span>, <span class=\"hljs-number\">0x11</span>, <span class=\"hljs-number\">0x22</span>, <span class=\"hljs-number\">0x33</span>, <span class=\"hljs-number\">0x44</span>, <span class=\"hljs-number\">0x55</span>, <span class=\"hljs-number\">0x66</span>]</span>;\n<span class=\"hljs-keyword\">let</span> tagLength = <span class=\"hljs-number\">4</span>;\n<span class=\"hljs-keyword\">let</span> result = <span class=\"hljs-module-access\"><span class=\"hljs-module\"><span class=\"hljs-identifier\">AES</span>.</span></span>ccm<span class=\"hljs-constructor\">Encrypt(<span class=\"hljs-params\">message</span>, <span class=\"hljs-params\">key</span>, <span class=\"hljs-params\">nonce</span>, <span class=\"hljs-params\">tagLength</span>)</span>;\n<span class=\"hljs-keyword\">let</span> decrypted = <span class=\"hljs-module-access\"><span class=\"hljs-module\"><span class=\"hljs-identifier\">AES</span>.</span></span>ccm<span class=\"hljs-constructor\">Decrypt(<span class=\"hljs-params\">result</span>.<span class=\"hljs-params\">data</span>, <span class=\"hljs-params\">key</span>, <span class=\"hljs-params\">nonce</span>, <span class=\"hljs-params\">result</span>.<span class=\"hljs-params\">tag</span>)</span>;\n<span class=\"hljs-keyword\">let</span> decryptedMessage = <span class=\"hljs-module-access\"><span class=\"hljs-module\"><span class=\"hljs-identifier\">String</span>.</span></span>fromCharCode.apply(null, decrypted);\n</code></pre>\n<p>The <code>decryptedMessage</code> variable should now contain &quot;Hello World!&quot;.</p>\n",
      "!url": "http://www.espruino.com/Reference#l_AES_ccmDecrypt"
    }
  },
  "Bangle": {
    "!type": "fn()",
    "!doc": "<p>Class containing utility functions for the <a href=\"http://www.espruino.com/Bangle.js\">Bangle.js Smart\nWatch</a></p>\n",
    "!url": "http://www.espruino.com/Reference#Bangle",
    "setBacklight": {
      "!type": "fn(isOn: bool)",
      "!doc": "<p>This function can be used to turn Bangle.js&#39;s LCD backlight off or on.</p>\n<p>This function resets the Bangle&#39;s &#39;activity timer&#39; (like pressing a button or\nthe screen would) so after a time period of inactivity set by\n<code>Bangle.setOptions({backlightTimeout: X});</code> the backlight will turn off.</p>\n<p>If you want to keep the backlight on permanently (until apps are changed) you can\ndo:</p>\n<pre><code><span class=\"hljs-module-access\"><span class=\"hljs-module\"><span class=\"hljs-identifier\">Bangle</span>.</span></span>set<span class=\"hljs-constructor\">Options({<span class=\"hljs-params\">backlightTimeout</span>: 0})</span> <span class=\"hljs-comment\">// turn off the timeout</span>\n<span class=\"hljs-module-access\"><span class=\"hljs-module\"><span class=\"hljs-identifier\">Bangle</span>.</span></span>set<span class=\"hljs-constructor\">Backlight(1)</span>; <span class=\"hljs-comment\">// keep screen on</span>\n</code></pre>\n<p>Of course, the backlight depends on <code>Bangle.setLCDPower</code> too, so any lcdPowerTimeout/setLCDTimeout will\nalso turn the backlight off. The use case is when you require the backlight timeout\nto be shorter than the power timeout.</p>\n",
      "!url": "http://www.espruino.com/Reference#l_Bangle_setBacklight"
    },
    "setLCDPower": {
      "!type": "fn(isOn: bool)",
      "!doc": "<p>This function can be used to turn Bangle.js&#39;s LCD off or on.</p>\n<p>This function resets the Bangle&#39;s &#39;activity timer&#39; (like pressing a button or\nthe screen would) so after a time period of inactivity set by\n<code>Bangle.setLCDTimeout</code> the screen will turn off.</p>\n<p>If you want to keep the screen on permanently (until apps are changed) you can\ndo:</p>\n<pre><code><span class=\"hljs-module-access\"><span class=\"hljs-module\"><span class=\"hljs-identifier\">Bangle</span>.</span></span>set<span class=\"hljs-constructor\">LCDTimeout(0)</span>; <span class=\"hljs-comment\">// turn off the timeout</span>\n<span class=\"hljs-module-access\"><span class=\"hljs-module\"><span class=\"hljs-identifier\">Bangle</span>.</span></span>set<span class=\"hljs-constructor\">LCDPower(1)</span>; <span class=\"hljs-comment\">// keep screen on</span>\n</code></pre>\n<p><strong>When on full, the LCD draws roughly 40mA.</strong> You can adjust When brightness\nusing <code>Bangle.setLCDBrightness</code>.</p>\n",
      "!url": "http://www.espruino.com/Reference#l_Bangle_setLCDPower"
    },
    "setLCDBrightness": {
      "!type": "fn(brightness: number)",
      "!doc": "<p>This function can be used to adjust the brightness of Bangle.js&#39;s display, and\nhence prolong its battery life.</p>\n<p>Due to hardware design constraints on Bangle.js 1, software PWM has to be used which means that\nthe display may flicker slightly when Bluetooth is active and the display is not\nat full power.</p>\n<p><strong>Power consumption</strong></p>\n<ul>\n<li>0 = 7mA</li>\n<li>0.1 = 12mA</li>\n<li>0.2 = 18mA</li>\n<li>0.5 = 28mA</li>\n<li>0.9 = 40mA (switching overhead)</li>\n<li>1 = 40mA</li>\n</ul>\n<p>In 2v21 and earlier, this function would erroneously turn the LCD backlight on. 2v22 and later\nfix this, and if you want the backlight on your should use <code>Bangle.setLCDPowerBacklight()</code></p>\n",
      "!url": "http://www.espruino.com/Reference#l_Bangle_setLCDBrightness"
    },
    "setLCDMode": {
      "!type": "fn(mode: ?)",
      "!doc": "<p>This function can be used to change the way graphics is handled on Bangle.js.</p>\n<p>Available options for <code>Bangle.setLCDMode</code> are:</p>\n<ul>\n<li><code>Bangle.setLCDMode()</code> or <code>Bangle.setLCDMode(&quot;direct&quot;)</code> (the default) - The\ndrawable area is 240x240 16 bit. Unbuffered, so draw calls take effect\nimmediately. Terminal and vertical scrolling work (horizontal scrolling\ndoesn&#39;t).</li>\n<li><code>Bangle.setLCDMode(&quot;doublebuffered&quot;)</code> - The drawable area is 240x160 16 bit,\nterminal and scrolling will not work. <code>g.flip()</code> must be called for draw\noperations to take effect.</li>\n<li><code>Bangle.setLCDMode(&quot;120x120&quot;)</code> - The drawable area is 120x120 8 bit,\n<code>g.getPixel</code>, terminal, and full scrolling work. Uses an offscreen buffer\nstored on Bangle.js, <code>g.flip()</code> must be called for draw operations to take\neffect.</li>\n<li><code>Bangle.setLCDMode(&quot;80x80&quot;)</code> - The drawable area is 80x80 8 bit, <code>g.getPixel</code>,\nterminal, and full scrolling work. Uses an offscreen buffer stored on\nBangle.js, <code>g.flip()</code> must be called for draw operations to take effect.</li>\n</ul>\n<p>You can also call <code>Bangle.setLCDMode()</code> to return to normal, unbuffered\n<code>&quot;direct&quot;</code> mode.</p>\n",
      "!url": "http://www.espruino.com/Reference#l_Bangle_setLCDMode"
    },
    "getLCDMode": {
      "!type": "fn() -> ?",
      "!doc": "<p>The current LCD mode.</p>\n<p>See <code>Bangle.setLCDMode</code> for examples.</p>\n",
      "!url": "http://www.espruino.com/Reference#l_Bangle_getLCDMode"
    },
    "setLCDOffset": {
      "!type": "fn(y: number)",
      "!doc": "<p>This can be used to move the displayed memory area up or down temporarily. It&#39;s\nused for displaying notifications while keeping the main display contents\nintact.</p>\n",
      "!url": "http://www.espruino.com/Reference#l_Bangle_setLCDOffset"
    },
    "setLCDOverlay": {
      "!type": "fn(img: ?, x: ?, y: number, options: ?)",
      "!doc": "<p>Overlay an image or graphics instance on top of the contents of the graphics buffer.</p>\n<p>This only works on Bangle.js 2 because Bangle.js 1 doesn&#39;t have an offscreen buffer accessible from the CPU.</p>\n<pre><code><span class=\"hljs-regexp\">//</span> display an alarm clock icon on the screen\nvar img = require(<span class=\"hljs-string\">&quot;heatshrink&quot;</span>).decompress(atob(`lss4UBvvv<span class=\"hljs-regexp\">//</span><span class=\"hljs-regexp\">/ovBlMyqoADv/</span>VAwlV<span class=\"hljs-regexp\">//</span><span class=\"hljs-number\">1</span>qtfAQX<span class=\"hljs-regexp\">/BINXDoPVq/</span><span class=\"hljs-number\">9</span>DAP\n<span class=\"hljs-regexp\">/AYIKDrWq0oREAYPW1QAB1IWCBQXaBQWq04WCAQP6BQeqA4P1AQPq1WggEK1WrBAIkBBQJsCBYO/</span><span class=\"hljs-regexp\">//</span>fBQOoPAcqCwP3BQnwgECCwP9\nGwIKCngWC14sB7QKCh4CBCwN/<span class=\"hljs-number\">64</span>KDgfACwWn6vWGwYsBCwOputWJgYsCgGqytVBQYsCLYOlqtqwAsFEINVrR4BFgghBBQosDEINWIQ\nYsDEIQ3DFgYhCG4msSYeVFgnrFhMvOAgsEkE/FhEggYWCFgIhDkEACwQKBEIYKBCwSGFBQJxCQwYhBBQTKDqohCBQhCCEIJlDXwrKE\nBQoWHBQdaCwuqJoI4CCwgKECwJ9CJgIKDq+qBYUq1WtBQf+BYIAC3<span class=\"hljs-regexp\">/VBQX/</span>tQKDz<span class=\"hljs-regexp\">/9BQY5BAAVV/</span><span class=\"hljs-number\">4</span>WCBQJcBKwVf+oHBv4wCAAYhB`));\nBangle.setLCDOverlay(img,<span class=\"hljs-number\">66</span>,<span class=\"hljs-number\">66</span>, {id: <span class=\"hljs-string\">&quot;myOverlay&quot;</span>, remove: () =&gt; print(<span class=\"hljs-string\">&quot;Removed&quot;</span>)});\n</code></pre>\n<p>Or use a <code>Graphics</code> instance:</p>\n<pre><code>var ovr = <span class=\"hljs-module-access\"><span class=\"hljs-module\"><span class=\"hljs-identifier\">Graphics</span>.</span></span>create<span class=\"hljs-constructor\">ArrayBuffer(100,100,2,{<span class=\"hljs-params\">msb</span>:<span class=\"hljs-params\">true</span>})</span>;\novr.transparent = <span class=\"hljs-number\">0</span>; <span class=\"hljs-comment\">// (optional) set a transparent color</span>\novr.palette = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-constructor\">Uint16Array([0,0,<span class=\"hljs-params\">g</span>.<span class=\"hljs-params\">toColor</span>(<span class=\"hljs-string\">&quot;#F00&quot;</span>)</span>,g.<span class=\"hljs-keyword\">to</span><span class=\"hljs-constructor\">Color(<span class=\"hljs-string\">&quot;#FFF&quot;</span>)</span>]); <span class=\"hljs-comment\">// (optional) set a color palette</span>\novr.set<span class=\"hljs-constructor\">Color(1)</span>.fill<span class=\"hljs-constructor\">Rect({<span class=\"hljs-params\">x</span>:0,<span class=\"hljs-params\">y</span>:0,<span class=\"hljs-params\">w</span>:99,<span class=\"hljs-params\">h</span>:99,<span class=\"hljs-params\">r</span>:8})</span>;\novr.set<span class=\"hljs-constructor\">Color(3)</span>.fill<span class=\"hljs-constructor\">Rect({<span class=\"hljs-params\">x</span>:2,<span class=\"hljs-params\">y</span>:2,<span class=\"hljs-params\">w</span>:95,<span class=\"hljs-params\">h</span>:95,<span class=\"hljs-params\">r</span>:7})</span>;\novr.set<span class=\"hljs-constructor\">Color(2)</span>.set<span class=\"hljs-constructor\">Font(<span class=\"hljs-string\">&quot;Vector:30&quot;</span>)</span>.set<span class=\"hljs-constructor\">FontAlign(0,0)</span>.draw<span class=\"hljs-constructor\">String(<span class=\"hljs-string\">&quot;Hi&quot;</span>,50,50)</span>;\n<span class=\"hljs-module-access\"><span class=\"hljs-module\"><span class=\"hljs-identifier\">Bangle</span>.</span></span>set<span class=\"hljs-constructor\">LCDOverlay(<span class=\"hljs-params\">ovr</span>,38,38, {<span class=\"hljs-params\">id</span>: <span class=\"hljs-string\">&quot;myOverlay&quot;</span>, <span class=\"hljs-params\">remove</span>: ()</span> =&gt; print(<span class=\"hljs-string\">&quot;Removed&quot;</span>)});\n</code></pre>\n<p>To remove an overlay, simply call:</p>\n<pre><code><span class=\"hljs-module-access\"><span class=\"hljs-module\"><span class=\"hljs-identifier\">Bangle</span>.</span></span>set<span class=\"hljs-constructor\">LCDOverlay(<span class=\"hljs-params\">undefined</span>, {<span class=\"hljs-params\">id</span>: <span class=\"hljs-string\">&quot;myOverlay&quot;</span>})</span>;\n</code></pre>\n<p>Before 2v22 the <code>options</code> object isn&#39;t parsed, and as a result\nthe remove callback won&#39;t be called, and <code>Bangle.setLCDOverlay(undefined)</code> will\nremove <em>any</em> active overlay.</p>\n<p>The <code>remove</code> callback is called when the current overlay is removed or replaced with\nanother, but <em>not</em> if setLCDOverlay is called again with an image and the same ID.</p>\n",
      "!url": "http://www.espruino.com/Reference#l_Bangle_setLCDOverlay"
    },
    "setLCDTimeout": {
      "!type": "fn(isOn: number)",
      "!doc": "<p>This function can be used to turn Bangle.js&#39;s LCD power saving on or off.</p>\n<p>With power saving off, the display will remain in the state you set it with\n<code>Bangle.setLCDPower</code>.</p>\n<p>With power saving on, the display will turn on if a button is pressed, the watch\nis turned face up, or the screen is updated (see <code>Bangle.setOptions</code> for\nconfiguration). It&#39;ll turn off automatically after the given timeout.</p>\n<p><strong>Note:</strong> This function also sets the Backlight and Lock timeout (the time at\nwhich the touchscreen/buttons start being ignored). To set both separately, use\n<code>Bangle.setOptions</code></p>\n",
      "!url": "http://www.espruino.com/Reference#l_Bangle_setLCDTimeout"
    },
    "setPollInterval": {
      "!type": "fn(interval: number)",
      "!doc": "<p>Set how often the watch should poll its sensors (accel/hr/mag) for new data and kick the\nWatchdog timer. It isn&#39;t recommended that you make this interval much larger\nthan 1000ms, but values up to 4000ms are allowed.</p>\n<p>Calling this will set <code>Bangle.setOptions({powerSave: false})</code> - disabling the\ndynamic adjustment of poll interval to save battery power when Bangle.js is\nstationary.</p>\n",
      "!url": "http://www.espruino.com/Reference#l_Bangle_setPollInterval"
    },
    "setOptions": {
      "!type": "fn(options: ?)",
      "!doc": "<p>Set internal options used for gestures, etc...</p>\n<ul>\n<li><code>wakeOnBTN1</code> should the LCD turn on when BTN1 is pressed? default = <code>true</code></li>\n<li><code>wakeOnBTN2</code> (Bangle.js 1) should the LCD turn on when BTN2 is pressed?\ndefault = <code>true</code></li>\n<li><code>wakeOnBTN3</code> (Bangle.js 1) should the LCD turn on when BTN3 is pressed?\ndefault = <code>true</code></li>\n<li><code>wakeOnFaceUp</code> should the LCD turn on when the watch is turned face up?\ndefault = <code>false</code></li>\n<li><code>wakeOnTouch</code> should the LCD turn on when the touchscreen is pressed? On Bangle.js 1 this\nis a physical press on the touchscreen, on Bangle.js 2 we have to use the accelerometer as\nthe touchscreen cannot be left powered without running the battery down. default = <code>false</code></li>\n<li><code>wakeOnDoubleTap</code> (2v20 onwards) should the LCD turn on when the watch is double-tapped on the screen?\nThis uses the accelerometer, not the touchscreen itself. default = <code>false</code></li>\n<li><code>wakeOnTwist</code> should the LCD turn on when the watch is twisted? default =\n<code>true</code></li>\n<li><code>twistThreshold</code> How much acceleration to register a twist of the watch strap?\nCan be negative for opposite direction. default = <code>800</code></li>\n<li><code>twistMaxY</code> Maximum acceleration in Y to trigger a twist (low Y means watch is\nfacing the right way up). default = <code>-800</code></li>\n<li><code>twistTimeout</code> How little time (in ms) must a twist take from low-&gt;high\nacceleration? default = <code>1000</code></li>\n<li><code>gestureStartThresh</code> how big a difference before we consider a gesture\nstarted? default = <code>sqr(800)</code></li>\n<li><code>gestureEndThresh</code> how small a difference before we consider a gesture ended?\ndefault = <code>sqr(2000)</code></li>\n<li><code>gestureInactiveCount</code> how many samples do we keep after a gesture has ended?\ndefault = <code>4</code></li>\n<li><code>gestureMinLength</code> how many samples must a gesture have before we notify about\nit? default = <code>10</code></li>\n<li><code>powerSave</code> after a minute of not being moved, Bangle.js will change the\n accelerometer poll interval down to 800ms (10x accelerometer samples). On\n movement it&#39;ll be raised to the default 80ms. If <code>Bangle.setPollInterval</code> is\n used this is disabled, and for it to work the poll interval must be either\n 80ms or 800ms. default = <code>true</code>. Setting <code>powerSave:false</code> will disable this\n automatic power saving, but will <strong>not</strong> change the poll interval from its\n current value. If you desire a specific interval (e.g. the default 80ms) you\n must set it manually with <code>Bangle.setPollInterval(80)</code> after setting\n <code>powerSave:false</code>.</li>\n<li><code>lowResistanceFix</code> (Bangle.js 2, 2v22+) In the very rare case that your watch button\ngets damaged such that it has a low resistance and always stays on, putting the watch\ninto a boot loop, setting this flag may improve matters (by forcing the input low\nbefore reading and disabling the hardware watch on BTN1).</li>\n<li><code>lockTimeout</code> how many milliseconds before the screen locks</li>\n<li><code>lcdPowerTimeout</code> how many milliseconds before the screen turns off</li>\n<li><code>backlightTimeout</code> how many milliseconds before the screen&#39;s backlight turns\noff</li>\n<li><code>btnLoadTimeout</code> how many milliseconds does the home button have to be pressed\nfor before the clock is reloaded? 1500ms default, or 0 means never.</li>\n<li><code>manualWatchdog</code> if set, this disables automatic kicking of the watchdog timer\nfrom the interrupt (when the button isn&#39;t held). You will then have to manually\ncall <code>E.kickWatchdog()</code> from your code or the watch will reset after ~5 seconds.</li>\n<li><code>hrmPollInterval</code> set the requested poll interval (in milliseconds) for the\nheart rate monitor. On Bangle.js 2 only 10,20,40,80,160,200 ms are supported,\nand polling rate may not be exact. The algorithm&#39;s filtering is tuned for\n20-40ms poll intervals, so higher/lower intervals may effect the reliability\nof the BPM reading. You must call this <em>before</em> <code>Bangle.setHRMPower</code> - calling\nwhen the HRM is already on will not affect the poll rate.</li>\n<li><code>hrmSportMode</code> - on the newest Bangle.js 2 builds with with the proprietary\nheart rate algorithm, this is the sport mode passed to the algorithm. See <code>libs/misc/vc31_binary/algo.h</code>\nfor more info. -1 = auto, 0 = normal (default), 1 = running, 2 = ...</li>\n<li><code>hrmGreenAdjust</code> - (Bangle.js 2, 2v19+) if false (default is true) the green LED intensity won&#39;t be adjusted to get the HRM sensor &#39;exposure&#39; correct. This is reset when the HRM is initialised with <code>Bangle.setHRMPower</code>.</li>\n<li><code>hrmWearDetect</code> - (Bangle.js 2, 2v19+) if false (default is true) HRM readings won&#39;t be turned off if the watch isn&#39;t on your arm (based on HRM proximity sensor). This is reset when the HRM is initialised with <code>Bangle.setHRMPower</code>.</li>\n<li><code>hrmPushEnv</code> - (Bangle.js 2, 2v19+) if true (default is false) HRM environment readings will be produced as <code>Bangle.on(</code>HRM-env<code>, ...)</code> events. This is reset when the HRM is initialised with <code>Bangle.setHRMPower</code>.</li>\n<li><code>hrmStaticSampleTime</code> - (Bangle.js 2, 2v28+) if true (default is false) force the HRM to use hrmPollInterval as the sample time rather than the real poll interval</li>\n<li><code>seaLevelPressure</code> (Bangle.js 2) Default 1013.25 millibars - this is used when calculating altitude from pressure sensor values from <code>Bangle.getPressure</code>/<code>pressure</code> events.</li>\n<li><code>lcdBufferPtr</code> (Bangle.js 2 2v21+) Return a pointer to the first pixel of the 3 bit graphics buffer used by Bangle.js for the screen (stride = 178 bytes)</li>\n<li><code>lcdDoubleRefresh</code> (Bangle.js 2 2v22+) If enabled, pulses EXTCOMIN twice per poll interval (avoids off-axis flicker)</li>\n</ul>\n<p>Where accelerations are used they are in internal units, where <code>8192 = 1g</code></p>\n",
      "!url": "http://www.espruino.com/Reference#l_Bangle_setOptions"
    },
    "getOptions": {
      "!type": "fn() -> ?",
      "!doc": "<p>Return the current state of options as set by <code>Bangle.setOptions</code></p>\n",
      "!url": "http://www.espruino.com/Reference#l_Bangle_getOptions"
    },
    "isLCDOn": {
      "!type": "fn() -> bool",
      "!doc": "<p>Also see the <code>Bangle.lcdPower</code> event</p>\n<p>You can use <code>Bangle.setLCDPower</code> to turn on the LCD (on Bangle.js 2 the LCD is normally on, and draws very little power so can be left on).</p>\n",
      "!url": "http://www.espruino.com/Reference#l_Bangle_isLCDOn"
    },
    "isBacklightOn": {
      "!type": "fn() -> bool",
      "!doc": "<p>Also see the <code>Bangle.backlight</code> event</p>\n<p>You can use <code>Bangle.setLCDPowerBacklight</code> to turn on the LCD backlight.</p>\n",
      "!url": "http://www.espruino.com/Reference#l_Bangle_isBacklightOn"
    },
    "setLocked": {
      "!type": "fn(isLocked: bool)",
      "!doc": "<p>This function can be used to lock or unlock Bangle.js (e.g. whether buttons and\ntouchscreen work or not)</p>\n",
      "!url": "http://www.espruino.com/Reference#l_Bangle_setLocked"
    },
    "isLocked": {
      "!type": "fn() -> bool",
      "!doc": "<p>Also see the <code>Bangle.lock</code> event</p>\n",
      "!url": "http://www.espruino.com/Reference#l_Bangle_isLocked"
    },
    "isCharging": {
      "!type": "fn() -> bool",
      "!doc": "",
      "!url": "http://www.espruino.com/Reference#l_Bangle_isCharging"
    },
    "lcdWr": {
      "!type": "fn(cmd: number, data: ?)",
      "!doc": "<p>Writes a command directly to the ST7735 LCD controller</p>\n",
      "!url": "http://www.espruino.com/Reference#l_Bangle_lcdWr"
    },
    "setHRMPower": {
      "!type": "fn(isOn: bool, appID: ?) -> bool",
      "!doc": "<p>Set the power to the Heart rate monitor</p>\n<p>When on, data is output via the <code>HRM</code> event on <code>Bangle</code>:</p>\n<pre><code>Bangle.setHRMPower(<span class=\"hljs-literal\">true</span>, <span class=\"hljs-string\">&quot;myapp&quot;</span>);\nBangle.<span class=\"hljs-literal\">on</span>(<span class=\"hljs-string\">&#x27;HRM&#x27;</span>,<span class=\"hljs-built_in\">print</span>);\n</code></pre>\n<p><em>When on, the Heart rate monitor draws roughly 5mA</em></p>\n",
      "!url": "http://www.espruino.com/Reference#l_Bangle_setHRMPower"
    },
    "isHRMOn": {
      "!type": "fn() -> bool",
      "!doc": "<p>Is the Heart rate monitor powered?</p>\n<p>Set power with <code>Bangle.setHRMPower(...);</code></p>\n",
      "!url": "http://www.espruino.com/Reference#l_Bangle_isHRMOn"
    },
    "setGPSPower": {
      "!type": "fn(isOn: bool, appID: ?) -> bool",
      "!doc": "<p>Set the power to the GPS.</p>\n<p>When on, data is output via the <code>GPS</code> event on <code>Bangle</code>:</p>\n<pre><code>Bangle.setGPSPower(<span class=\"hljs-literal\">true</span>, <span class=\"hljs-string\">&quot;myapp&quot;</span>);\nBangle.<span class=\"hljs-literal\">on</span>(<span class=\"hljs-string\">&#x27;GPS&#x27;</span>,<span class=\"hljs-built_in\">print</span>);\n</code></pre>\n<p><em>When on, the GPS draws roughly 20mA</em></p>\n",
      "!url": "http://www.espruino.com/Reference#l_Bangle_setGPSPower"
    },
    "isGPSOn": {
      "!type": "fn() -> bool",
      "!doc": "<p>Is the GPS powered?</p>\n<p>Set power with <code>Bangle.setGPSPower(...);</code></p>\n",
      "!url": "http://www.espruino.com/Reference#l_Bangle_isGPSOn"
    },
    "getGPSFix": {
      "!type": "fn() -> ?",
      "!doc": "<p>Get the last available GPS fix info (or <code>undefined</code> if GPS is off).</p>\n<p>The fix info received is the same as you&#39;d get from the <code>Bangle.GPS</code> event.</p>\n",
      "!url": "http://www.espruino.com/Reference#l_Bangle_getGPSFix"
    },
    "setCompassPower": {
      "!type": "fn(isOn: bool, appID: ?) -> bool",
      "!doc": "<p>Set the power to the Compass</p>\n<p>When on, data is output via the <code>mag</code> event on <code>Bangle</code>:</p>\n<pre><code>Bangle.setCompassPower(<span class=\"hljs-literal\">true</span>, <span class=\"hljs-string\">&quot;myapp&quot;</span>);\nBangle.<span class=\"hljs-literal\">on</span>(<span class=\"hljs-string\">&#x27;mag&#x27;</span>,<span class=\"hljs-built_in\">print</span>);\n</code></pre>\n<p><em>When on, the compass draws roughly 2mA</em></p>\n",
      "!url": "http://www.espruino.com/Reference#l_Bangle_setCompassPower"
    },
    "isCompassOn": {
      "!type": "fn() -> bool",
      "!doc": "<p>Is the compass powered?</p>\n<p>Set power with <code>Bangle.setCompassPower(...);</code></p>\n",
      "!url": "http://www.espruino.com/Reference#l_Bangle_isCompassOn"
    },
    "resetCompass": {
      "!type": "fn()",
      "!doc": "<p>Resets the compass minimum/maximum values. Can be used if the compass isn&#39;t\nproviding a reliable heading any more.</p>\n",
      "!url": "http://www.espruino.com/Reference#l_Bangle_resetCompass"
    },
    "setBarometerPower": {
      "!type": "fn(isOn: bool, appID: ?) -> bool",
      "!doc": "<p>Set the power to the barometer IC. Once enabled, <code>Bangle.pressure</code> events are\nfired each time a new barometer reading is available.</p>\n<p>When on, the barometer draws roughly 50uA</p>\n",
      "!url": "http://www.espruino.com/Reference#l_Bangle_setBarometerPower"
    },
    "isBarometerOn": {
      "!type": "fn() -> bool",
      "!doc": "<p>Is the Barometer powered?</p>\n<p>Set power with <code>Bangle.setBarometerPower(...);</code></p>\n",
      "!url": "http://www.espruino.com/Reference#l_Bangle_isBarometerOn"
    },
    "getStepCount": {
      "!type": "fn() -> number",
      "!doc": "<p>Returns the current amount of steps recorded by the step counter</p>\n",
      "!url": "http://www.espruino.com/Reference#l_Bangle_getStepCount"
    },
    "setStepCount": {
      "!type": "fn(count: number)",
      "!doc": "<p>Sets the current value of the step counter</p>\n",
      "!url": "http://www.espruino.com/Reference#l_Bangle_setStepCount"
    },
    "getCompass": {
      "!type": "fn() -> ?",
      "!doc": "<p>Get the most recent Magnetometer/Compass reading. Data is in the same format as\nthe <code>Bangle.on(&#39;mag&#39;,</code> event.</p>\n<p>Returns an <code>{x,y,z,dx,dy,dz,heading}</code> object</p>\n<ul>\n<li><code>x/y/z</code> raw x,y,z magnetometer readings</li>\n<li><code>dx/dy/dz</code> readings based on calibration since magnetometer turned on</li>\n<li><code>heading</code> in degrees based on calibrated readings (will be NaN if magnetometer\nhasn&#39;t been rotated around 360 degrees).</li>\n</ul>\n<p><strong>Note:</strong> In 2v15 firmware and earlier the heading is inverted (360-heading). There&#39;s\na fix in the bootloader which will apply a fix for those headings, but old apps may\nstill expect an inverted value.</p>\n<p>To get this event you must turn the compass on with <code>Bangle.setCompassPower(1)</code>.</p>\n",
      "!url": "http://www.espruino.com/Reference#l_Bangle_getCompass"
    },
    "getAccel": {
      "!type": "fn() -> ?",
      "!doc": "<p>Get the most recent accelerometer reading. Data is in the same format as the\n<code>Bangle.on(&#39;accel&#39;,</code> event.</p>\n<ul>\n<li><code>x</code> is X axis (left-right) in <code>g</code></li>\n<li><code>y</code> is Y axis (up-down) in <code>g</code></li>\n<li><code>z</code> is Z axis (in-out) in <code>g</code></li>\n<li><code>diff</code> is difference between this and the last reading in <code>g</code> (calculated by\ncomparing vectors, not magnitudes)</li>\n<li><code>td</code> is the elapsed</li>\n<li><code>mag</code> is the magnitude of the acceleration in <code>g</code></li>\n</ul>\n",
      "!url": "http://www.espruino.com/Reference#l_Bangle_getAccel"
    },
    "getHealthStatus": {
      "!type": "fn(range: ?) -> ?",
      "!doc": "<p><code>range</code> is one of:</p>\n<ul>\n<li><code>undefined</code> or <code>&#39;10min&#39;</code> - health data so far in this 10 minute block (eg. 9:00.00 - 9:09.59)</li>\n<li><code>&#39;last&#39;</code> - health data during the last 10 minute block</li>\n<li><code>&#39;day&#39;</code> - the health data so far for the day</li>\n</ul>\n<p><code>getHealthStatus</code> returns an object containing:</p>\n<ul>\n<li><code>movement</code> is the 32 bit sum of all <code>acc.diff</code> readings since power on (and\nrolls over). It is the difference in accelerometer values as <code>g*8192</code></li>\n<li><code>steps</code> is the number of steps during this period</li>\n<li><code>bpm</code> the best BPM reading from HRM sensor during this period</li>\n<li><code>bpmConfidence</code> best BPM confidence (0-100%) during this period</li>\n<li><code>bpmMin</code>/<code>bpmMax</code> (2v26+) the minimum/maximum BPM reading from HRM sensor during this period (where confidence is over 90)</li>\n<li><code>activity</code> (2v26+) the currently assumed activity, one of &quot;UNKNOWN&quot;,&quot;NOT_WORN&quot;,&quot;WALKING&quot;,&quot;EXERCISE&quot;</li>\n</ul>\n",
      "!url": "http://www.espruino.com/Reference#l_Bangle_getHealthStatus"
    },
    "dbg": {
      "!type": "fn() -> ?",
      "!doc": "<p>Reads debug info. Exposes the current values of <code>accHistoryIdx</code>, <code>accGestureCount</code>, <code>accIdleCount</code>, <code>pollInterval</code> and others.</p>\n<p>Please see the declaration of this function for more information (click the <code>==&gt;</code> link above <a href=\"http://www.espruino.com/Reference#l_Bangle_dbg\">this description</a>)</p>\n",
      "!url": "http://www.espruino.com/Reference#l_Bangle_dbg"
    },
    "touchWr": {
      "!type": "fn(reg: number, data: number)",
      "!doc": "<p>Writes a register on the touch controller</p>\n",
      "!url": "http://www.espruino.com/Reference#l_Bangle_touchWr"
    },
    "touchRd": {
      "!type": "fn(reg: number, cnt: number) -> ?",
      "!doc": "<p>Reads a register from the touch controller. See <a href=\"https://github.com/espruino/Espruino/issues/2146#issuecomment-2554296721\">https://github.com/espruino/Espruino/issues/2146#issuecomment-2554296721</a> for a list\nof registers. When the touchscreen is off (eg the Bangle is locked) then reading from any register will return <code>255</code> (<code>0xFF</code>) -\nso ensure the Bangle is unlocked with <code>Bangle.setLocked(false)</code> before trying to read or write.</p>\n<p>For example <code>print(Bangle.touchRd(0xa7).toString(16))</code> returns the <code>ChipID</code> register, which is <code>0xB4</code> (CST816S) on older Bangles or <code>0xB6</code> (CST816D) on newer ones.</p>\n<p><strong>Note:</strong> On Espruino 2v06 and before this function only returns a number (<code>cnt</code> is ignored).</p>\n",
      "!url": "http://www.espruino.com/Reference#l_Bangle_touchRd"
    },
    "accelWr": {
      "!type": "fn(reg: number, data: number)",
      "!doc": "<p>Writes a register on the accelerometer</p>\n",
      "!url": "http://www.espruino.com/Reference#l_Bangle_accelWr"
    },
    "accelRd": {
      "!type": "fn(reg: number, cnt: number) -> ?",
      "!doc": "<p>Reads a register from the accelerometer</p>\n<p><strong>Note:</strong> On Espruino 2v06 and before this function only returns a number (<code>cnt</code>\nis ignored).</p>\n",
      "!url": "http://www.espruino.com/Reference#l_Bangle_accelRd"
    },
    "barometerWr": {
      "!type": "fn(reg: number, data: number)",
      "!doc": "<p>Writes a register on the barometer IC</p>\n",
      "!url": "http://www.espruino.com/Reference#l_Bangle_barometerWr"
    },
    "barometerRd": {
      "!type": "fn(reg: number, cnt: number) -> ?",
      "!doc": "<p>Reads a register from the barometer IC</p>\n",
      "!url": "http://www.espruino.com/Reference#l_Bangle_barometerRd"
    },
    "compassWr": {
      "!type": "fn(reg: number, data: number)",
      "!doc": "<p>Writes a register on the Magnetometer/Compass</p>\n",
      "!url": "http://www.espruino.com/Reference#l_Bangle_compassWr"
    },
    "compassRd": {
      "!type": "fn(reg: number, cnt: number) -> ?",
      "!doc": "<p>Read a register on the Magnetometer/Compass</p>\n",
      "!url": "http://www.espruino.com/Reference#l_Bangle_compassRd"
    },
    "hrmWr": {
      "!type": "fn(reg: number, data: number)",
      "!doc": "<p>Writes a register on the Heart rate monitor</p>\n",
      "!url": "http://www.espruino.com/Reference#l_Bangle_hrmWr"
    },
    "hrmRd": {
      "!type": "fn(reg: number, cnt: number) -> ?",
      "!doc": "<p>Read a register on the Heart rate monitor</p>\n",
      "!url": "http://www.espruino.com/Reference#l_Bangle_hrmRd"
    },
    "ioWr": {
      "!type": "fn(mask: number, isOn: number)",
      "!doc": "<p>Changes a pin state on the IO expander</p>\n",
      "!url": "http://www.espruino.com/Reference#l_Bangle_ioWr"
    },
    "getPressure": {
      "!type": "fn() -> ?",
      "!doc": "<p>Read temperature, pressure and altitude data. A promise is returned which will\nbe resolved with <code>{temperature (C), pressure (hPa), altitude (meters)}</code>.</p>\n<p>If the Barometer has been turned on with <code>Bangle.setBarometerPower</code> then this\nwill return with the <em>next</em> reading as of 2v21 (or the existing reading on 2v20 or earlier). If the Barometer is off,\nconversions take between 500-750ms.</p>\n<p>Altitude assumes a sea-level pressure of 1013.25 hPa, but this cal be adjusted with\na call to <code>Bangle.setOptions({ seaLevelPressure : 1013.25 })</code> - the Bangle.js Settings\napp contains a tool to adjust it.</p>\n<p>If there&#39;s no pressure device (for example, the emulator),\nthis returns <code>undefined</code>, rather than a Promise.</p>\n<pre><code>Bangle.getPressure().then(<span class=\"hljs-function\"><span class=\"hljs-params\">d</span>=&gt;</span>{\n  <span class=\"hljs-built_in\">console</span>.<span class=\"hljs-built_in\">log</span>(d);\n  <span class=\"hljs-comment\">// {temperature, pressure, altitude}</span>\n});\n</code></pre>\n",
      "!url": "http://www.espruino.com/Reference#l_Bangle_getPressure"
    },
    "project": {
      "!type": "fn(latlong: ?) -> ?",
      "!doc": "<p>Perform a Spherical <a href=\"https://en.wikipedia.org/wiki/Web_Mercator_projection\">Web Mercator\nprojection</a> of latitude\nand longitude into <code>x</code> and <code>y</code> coordinates, which are roughly equivalent to\nmeters from <code>{lat:0,lon:0}</code>.</p>\n<p>This is the formula used for most online mapping and is a good way to compare\nGPS coordinates to work out the distance between them.</p>\n",
      "!url": "http://www.espruino.com/Reference#l_Bangle_project"
    },
    "beep": {
      "!type": "fn(time: number, freq: number) -> +Promise",
      "!doc": "<p>Use the piezo speaker to Beep for a certain time period and frequency</p>\n",
      "!url": "http://www.espruino.com/Reference#l_Bangle_beep"
    },
    "buzz": {
      "!type": "fn(time: number, strength: number) -> +Promise",
      "!doc": "<p>Use the vibration motor to buzz for a certain time period</p>\n",
      "!url": "http://www.espruino.com/Reference#l_Bangle_buzz"
    },
    "off": {
      "!type": "fn()",
      "!doc": "<p>Turn Bangle.js off. It can only be woken by pressing BTN1.</p>\n",
      "!url": "http://www.espruino.com/Reference#l_Bangle_off"
    },
    "softOff": {
      "!type": "fn()",
      "!doc": "<p>Turn Bangle.js (mostly) off, but keep the CPU in sleep mode until BTN1 is\npressed to preserve the RTC (current time).</p>\n",
      "!url": "http://www.espruino.com/Reference#l_Bangle_softOff"
    },
    "getLogo": {
      "!type": "fn() -> ?",
      "!doc": "<ul>\n<li>On platforms with an LCD of &gt;=8bpp this is 222 x 104 x 2 bits</li>\n<li>Otherwise it&#39;s 119 x 56 x 1 bits</li>\n</ul>\n",
      "!url": "http://www.espruino.com/Reference#l_Bangle_getLogo"
    },
    "loadWidgets": {
      "!type": "fn()",
      "!doc": "<p>Load all widgets from flash Storage. Call this once at the beginning of your\napplication if you want any on-screen widgets to be loaded.</p>\n<p>They will be loaded into a global <code>WIDGETS</code> array, and can be rendered with\n<code>Bangle.drawWidgets</code>.</p>\n",
      "!url": "http://www.espruino.com/Reference#l_Bangle_loadWidgets"
    },
    "drawWidgets": {
      "!type": "fn()",
      "!doc": "",
      "!url": "http://www.espruino.com/Reference#l_Bangle_drawWidgets"
    },
    "showLauncher": {
      "!type": "fn()",
      "!doc": "<p>Load the Bangle.js app launcher, which will allow the user to select an\napplication to launch.</p>\n",
      "!url": "http://www.espruino.com/Reference#l_Bangle_showLauncher"
    },
    "showClock": {
      "!type": "fn()",
      "!doc": "<p>Load the Bangle.js clock - this has the same effect as calling <code>Bangle.load()</code>.</p>\n",
      "!url": "http://www.espruino.com/Reference#l_Bangle_showClock"
    },
    "showRecoveryMenu": {
      "!type": "fn()",
      "!doc": "",
      "!url": "http://www.espruino.com/Reference#l_Bangle_showRecoveryMenu"
    },
    "showTestScreen": {
      "!type": "fn()",
      "!doc": "<p>(2v20 and later) Show a test screen that lights green when each sensor on the Bangle\nworks and reports within range.</p>\n<p>Swipe on the screen when all items are green and the Bangle will turn bluetooth off\nand display a <code>TEST PASS</code> screen for 60 minutes, after which it will turn off.</p>\n<p>You can enter this menu by restarting your Bangle while holding down the button,\nthen choosing <code>Test</code> from the recovery menu.</p>\n",
      "!url": "http://www.espruino.com/Reference#l_Bangle_showTestScreen"
    },
    "load": {
      "!type": "fn(file: ?)",
      "!doc": "<p>This behaves the same as the global <code>load()</code> function, but if fast\nloading is possible (<code>Bangle.setUI</code> was called with a <code>remove</code> handler)\nthen instead of a complete reload, the <code>remove</code> handler will be\ncalled and the new app will be loaded straight after with <code>eval</code>.</p>\n<p><strong>This should only be used if the app being loaded also uses widgets</strong>\n(eg it contains a <code>Bangle.loadWidgets()</code> call).</p>\n<p><code>load()</code> is slower, but safer. As such, care should be taken\nwhen using <code>Bangle.load()</code> with <code>Bangle.setUI({..., remove:...})</code>\nas if your remove handler doesn&#39;t completely clean up after your app,\nmemory leaks or other issues could occur - see <code>Bangle.setUI</code> for more\ninformation.</p>\n",
      "!url": "http://www.espruino.com/Reference#l_Bangle_load"
    },
    "setUI": {
      "!type": "fn()",
      "!doc": "",
      "!url": "http://www.espruino.com/Reference#l_Bangle_setUI"
    },
    "factoryReset": {
      "!type": "fn(noReboot: bool)",
      "!doc": "<p>Erase all storage and reload it with the default contents.</p>\n<p>This is only available on Bangle.js 2.0. On Bangle.js 1.0 you need to use\n<code>Install Default Apps</code> under the <code>More...</code> tab of <a href=\"http://banglejs.com/apps\">http://banglejs.com/apps</a></p>\n",
      "!url": "http://www.espruino.com/Reference#l_Bangle_factoryReset"
    },
    "appRect": {
      "!type": "?",
      "!doc": "<p>Returns the rectangle on the screen that is currently reserved for the app.</p>\n",
      "!url": "http://www.espruino.com/Reference#l_Bangle_appRect"
    }
  },
  "Microbit": {
    "!type": "fn()",
    "!doc": "<p>Class containing <a href=\"https://www.espruino.com/MicroBit\">micro:bit&#39;s</a> utility\nfunctions.</p>\n",
    "!url": "http://www.espruino.com/Reference#Microbit",
    "SPEAKER": {
      "!type": "+Pin",
      "!doc": "<p>The micro:bit&#39;s speaker pin</p>\n",
      "!url": "http://www.espruino.com/Reference#l_Microbit_SPEAKER"
    },
    "MIC": {
      "!type": "+Pin",
      "!doc": "<p>The micro:bit&#39;s microphone pin</p>\n<p><code>MIC_ENABLE</code> should be set to 1 before using this</p>\n",
      "!url": "http://www.espruino.com/Reference#l_Microbit_MIC"
    },
    "MIC_ENABLE": {
      "!type": "+Pin",
      "!doc": "<p>The micro:bit&#39;s microphone enable pin</p>\n",
      "!url": "http://www.espruino.com/Reference#l_Microbit_MIC_ENABLE"
    },
    "mag": {
      "!type": "fn() -> ?",
      "!doc": "",
      "!url": "http://www.espruino.com/Reference#l_Microbit_mag"
    },
    "accel": {
      "!type": "fn() -> ?",
      "!doc": "",
      "!url": "http://www.espruino.com/Reference#l_Microbit_accel"
    },
    "accelWr": {
      "!type": "fn(addr: number, data: number)",
      "!doc": "<p><strong>Note:</strong> This function is only available on the <a href=\"/MicroBit\">BBC micro:bit</a>\nboard</p>\n<p>Write the given value to the accelerometer</p>\n",
      "!url": "http://www.espruino.com/Reference#l_Microbit_accelWr"
    },
    "accelOn": {
      "!type": "fn()",
      "!doc": "<p>Turn on the accelerometer, and create <code>Microbit.accel</code> and <code>Microbit.gesture</code>\nevents.</p>\n<p><strong>Note:</strong> The accelerometer is currently always enabled - this code just\nresponds to interrupts and reads</p>\n",
      "!url": "http://www.espruino.com/Reference#l_Microbit_accelOn"
    },
    "accelOff": {
      "!type": "fn()",
      "!doc": "<p>Turn off events from the accelerometer (started with <code>Microbit.accelOn</code>)</p>\n",
      "!url": "http://www.espruino.com/Reference#l_Microbit_accelOff"
    },
    "play": {
      "!type": "fn(waveform: ?, samplesPerSecond: ?, callback: ?)",
      "!doc": "<p>Play a waveform on the Micro:bit&#39;s speaker</p>\n",
      "!url": "http://www.espruino.com/Reference#l_Microbit_play"
    },
    "record": {
      "!type": "fn(samplesPerSecond: ?, callback: ?, samples: ?)",
      "!doc": "<p>Records sound from the micro:bit&#39;s onboard microphone and returns the result</p>\n",
      "!url": "http://www.espruino.com/Reference#l_Microbit_record"
    }
  },
  "File": {
    "!type": "fn()",
    "!doc": "<p>This is the File object - it allows you to stream data to and from files (As\nopposed to the <code>require(&#39;fs&#39;).readFile(..)</code> style functions that read an entire\nfile).</p>\n<p>To create a File object, you must type <code>var fd = E.openFile(&#39;filepath&#39;,&#39;mode&#39;)</code> - see <a href=\"#l_E_openFile\">E.openFile</a> for more\ninformation.</p>\n<p><strong>Note:</strong> If you want to remove an SD card after you have started using it, you\n<em>must</em> call <code>E.unmountSD()</code> or you may cause damage to the card.</p>\n",
    "!url": "http://www.espruino.com/Reference#File",
    "prototype": {
      "close": {
        "!type": "fn()",
        "!doc": "<p>Close an open file.</p>\n",
        "!url": "http://www.espruino.com/Reference#l_File_close"
      },
      "write": {
        "!type": "fn(buffer: ?) -> number",
        "!doc": "<p>Write data to a file.</p>\n<p><strong>Note:</strong> By default this function flushes all changes to the SD card, which\nmakes it slow (but also safe!). You can use <code>E.setFlags({unsyncFiles:1})</code> to\ndisable this behaviour and really speed up writes - but then you must be sure to\nclose all files you are writing before power is lost or you will cause damage to\nyour SD card&#39;s filesystem.</p>\n",
        "!url": "http://www.espruino.com/Reference#l_File_write"
      },
      "read": {
        "!type": "fn(length: number) -> ?",
        "!doc": "<p>Read data in a file in byte size chunks</p>\n",
        "!url": "http://www.espruino.com/Reference#l_File_read"
      },
      "skip": {
        "!type": "fn(nBytes: number)",
        "!doc": "<p>Skip the specified number of bytes forward in the file</p>\n",
        "!url": "http://www.espruino.com/Reference#l_File_skip"
      },
      "seek": {
        "!type": "fn(nBytes: number)",
        "!doc": "<p>Seek to a certain position in the file</p>\n",
        "!url": "http://www.espruino.com/Reference#l_File_seek"
      },
      "pipe": {
        "!type": "fn(destination: ?, options: ?)",
        "!doc": "<p>Pipe this file to a stream (an object with a &#39;write&#39; method)</p>\n",
        "!url": "http://www.espruino.com/Reference#l_File_pipe"
      },
      "truncate": {
        "!type": "fn(length: ?) -> bool",
        "!doc": "<p>Truncate the file. If <code>length</code> is supplied it truncates to that length in bytes\nfrom start of file; otherwise it truncates at the current file position.\nFile must be opened with write access (w, w+, a, r+). Returns true on success.</p>\n",
        "!url": "http://www.espruino.com/Reference#l_File_truncate"
      }
    }
  },
  "fs": {
    "!type": "fn()",
    "!doc": "<p>This library handles interfacing with a FAT32 filesystem on an SD card. The API\nis designed to be similar to node.js&#39;s - However Espruino does not currently\nsupport asynchronous file IO, so the functions behave like node.js&#39;s xxxxSync\nfunctions. Versions of the functions with &#39;Sync&#39; after them are also provided\nfor compatibility.</p>\n<p>To use this, you must type <code>var fs = require(&#39;fs&#39;)</code> to get access to the\nlibrary</p>\n<p>See <a href=\"http://www.espruino.com/File+IO\">the page on File IO</a> for more information,\nand for examples on wiring up an SD card if your device doesn&#39;t come with one.</p>\n<p><strong>Note:</strong> If you want to remove an SD card after you have started using it, you\n<em>must</em> call <code>E.unmountSD()</code> or you may cause damage to the card.</p>\n",
    "!url": "http://www.espruino.com/Reference#fs",
    "readdir": {
      "!type": "fn(path: ?) -> ?",
      "!doc": "<p>List all files in the supplied directory, returning them as an array of strings.</p>\n<p>NOTE: Espruino does not yet support Async file IO, so this function behaves like\nthe &#39;Sync&#39; version.</p>\n",
      "!url": "http://www.espruino.com/Reference#l_fs_readdir"
    },
    "readdirSync": {
      "!type": "fn(path: ?) -> ?",
      "!doc": "<p>List all files in the supplied directory, returning them as an array of strings.</p>\n",
      "!url": "http://www.espruino.com/Reference#l_fs_readdirSync"
    },
    "writeFile": {
      "!type": "fn(path: ?, data: ?) -> bool",
      "!doc": "<p>Write the data to the given file</p>\n<p>NOTE: Espruino does not yet support Async file IO, so this function behaves like\nthe &#39;Sync&#39; version.</p>\n",
      "!url": "http://www.espruino.com/Reference#l_fs_writeFile"
    },
    "writeFileSync": {
      "!type": "fn(path: ?, data: ?) -> bool",
      "!doc": "<p>Write the data to the given file</p>\n",
      "!url": "http://www.espruino.com/Reference#l_fs_writeFileSync"
    },
    "appendFile": {
      "!type": "fn(path: ?, data: ?) -> bool",
      "!doc": "<p>Append the data to the given file, created a new file if it doesn&#39;t exist</p>\n<p>NOTE: Espruino does not yet support Async file IO, so this function behaves like\nthe &#39;Sync&#39; version.</p>\n",
      "!url": "http://www.espruino.com/Reference#l_fs_appendFile"
    },
    "appendFileSync": {
      "!type": "fn(path: ?, data: ?) -> bool",
      "!doc": "<p>Append the data to the given file, created a new file if it doesn&#39;t exist</p>\n",
      "!url": "http://www.espruino.com/Reference#l_fs_appendFileSync"
    },
    "readFile": {
      "!type": "fn(path: ?) -> ?",
      "!doc": "<p>Read all data from a file and return as a string</p>\n<p>NOTE: Espruino does not yet support Async file IO, so this function behaves like\nthe &#39;Sync&#39; version.</p>\n",
      "!url": "http://www.espruino.com/Reference#l_fs_readFile"
    },
    "readFileSync": {
      "!type": "fn(path: ?) -> ?",
      "!doc": "<p>Read all data from a file and return as a string.</p>\n<p><strong>Note:</strong> The size of files you can load using this method is limited by the\namount of available RAM. To read files a bit at a time, see the <code>File</code> class.</p>\n",
      "!url": "http://www.espruino.com/Reference#l_fs_readFileSync"
    },
    "unlink": {
      "!type": "fn(path: ?) -> bool",
      "!doc": "<p>Delete the given file</p>\n<p>NOTE: Espruino does not yet support Async file IO, so this function behaves like\nthe &#39;Sync&#39; version.</p>\n",
      "!url": "http://www.espruino.com/Reference#l_fs_unlink"
    },
    "unlinkSync": {
      "!type": "fn(path: ?) -> bool",
      "!doc": "<p>Delete the given file</p>\n",
      "!url": "http://www.espruino.com/Reference#l_fs_unlinkSync"
    },
    "statSync": {
      "!type": "fn(path: ?) -> ?",
      "!doc": "<p>Return information on the given file. This returns an object with the following\nfields:</p>\n<p>size: size in bytes dir: a boolean specifying if the file is a directory or not\nmtime: A Date structure specifying the time the file was last modified</p>\n",
      "!url": "http://www.espruino.com/Reference#l_fs_statSync"
    },
    "getFree": {
      "!type": "fn(path: ?) -> ?",
      "!doc": "<p>Get the number of free sectors on the volume. This returns an object with the following\nfields:</p>\n<p>freeSectors: the number of free sectors\ntotalSectors: the total number of sectors on the volume\nsectorSize: the number of bytes per sector\nclusterSize: the number of sectors per cluster</p>\n",
      "!url": "http://www.espruino.com/Reference#l_fs_getFree"
    },
    "mkdir": {
      "!type": "fn(path: ?) -> bool",
      "!doc": "<p>Create the directory</p>\n<p>NOTE: Espruino does not yet support Async file IO, so this function behaves like\nthe &#39;Sync&#39; version.</p>\n",
      "!url": "http://www.espruino.com/Reference#l_fs_mkdir"
    },
    "mkdirSync": {
      "!type": "fn(path: ?) -> bool",
      "!doc": "<p>Create the directory</p>\n",
      "!url": "http://www.espruino.com/Reference#l_fs_mkdirSync"
    },
    "mkfs": {
      "!type": "fn() -> bool",
      "!doc": "<p>Reformat the connected media to a FAT filesystem</p>\n",
      "!url": "http://www.espruino.com/Reference#l_fs_mkfs"
    },
    "pipe": {
      "!type": "fn(source: ?, destination: ?, options: ?)",
      "!doc": "<p>Pipe this file to a destination stream (object which has a <code>.write(data)</code> method).</p>\n",
      "!url": "http://www.espruino.com/Reference#l_fs_pipe"
    }
  },
  "SWDCON": {
    "!type": "+Serial",
    "!doc": "<p>In memory serial I/O device accessible via SWD debugger.\nUses SEGGER RTT so it can be used with openocd and other SEGGER compatible tools.</p>\n",
    "!url": "http://www.espruino.com/Reference#l__global_SWDCON"
  },
  "Pixl": {
    "!type": "fn()",
    "!doc": "<p>Class containing utility functions for\n<a href=\"http://www.espruino.com/Pixl.js\">Pixl.js</a></p>\n",
    "!url": "http://www.espruino.com/Reference#Pixl",
    "getBatteryPercentage": {
      "!type": "fn() -> number",
      "!doc": "<p><strong>DEPRECATED</strong> - Please use <code>E.getBattery()</code> instead.</p>\n<p>Return an approximate battery percentage remaining based on a normal CR2032\nbattery (2.8 - 2.2v)</p>\n",
      "!url": "http://www.espruino.com/Reference#l_Pixl_getBatteryPercentage"
    },
    "setContrast": {
      "!type": "fn(c: number)",
      "!doc": "<p>Set the LCD&#39;s contrast</p>\n",
      "!url": "http://www.espruino.com/Reference#l_Pixl_setContrast"
    },
    "setLCDPower": {
      "!type": "fn(isOn: bool)",
      "!doc": "<p>This function can be used to turn Pixl.js&#39;s LCD off or on.</p>\n<ul>\n<li>With the LCD off, Pixl.js draws around 0.1mA</li>\n<li>With the LCD on, Pixl.js draws around 0.25mA</li>\n</ul>\n",
      "!url": "http://www.espruino.com/Reference#l_Pixl_setLCDPower"
    },
    "lcdw": {
      "!type": "fn(c: number)",
      "!doc": "<p>Writes a command directly to the ST7567 LCD controller</p>\n",
      "!url": "http://www.espruino.com/Reference#l_Pixl_lcdw"
    },
    "menu": {
      "!type": "fn(menu: ?) -> ?",
      "!doc": "<p>Display a menu on Pixl.js&#39;s screen, and set up the buttons to navigate through\nit.</p>\n<p>DEPRECATED: Use <code>E.showMenu</code></p>\n",
      "!url": "http://www.espruino.com/Reference#l_Pixl_menu"
    }
  },
  "NRF": {
    "!type": "fn()",
    "!doc": "<p>The NRF class is for controlling functionality of the Nordic nRF51/nRF52 chips.</p>\n<p>Most functionality is related to Bluetooth Low Energy, however there are also\nsome functions related to NFC that apply to NRF52-based devices.</p>\n",
    "!url": "http://www.espruino.com/Reference#NRF",
    "disconnect": {
      "!type": "fn()",
      "!doc": "<p>If a device is connected to Espruino, disconnect from it.</p>\n",
      "!url": "http://www.espruino.com/Reference#l_NRF_disconnect"
    },
    "sleep": {
      "!type": "fn()",
      "!doc": "<p>Disable Bluetooth advertising and disconnect from any device that connected to\nPuck.js as a peripheral (this won&#39;t affect any devices that Puck.js initiated\nconnections to).</p>\n<p>This makes Puck.js undiscoverable, so it can&#39;t be connected to.</p>\n<p>Use <code>NRF.wake()</code> to wake up and make Puck.js connectable again.</p>\n",
      "!url": "http://www.espruino.com/Reference#l_NRF_sleep"
    },
    "wake": {
      "!type": "fn()",
      "!doc": "<p>Enable Bluetooth advertising (this is enabled by default), which allows other\ndevices to discover and connect to Puck.js.</p>\n<p>Use <code>NRF.sleep()</code> to disable advertising.</p>\n",
      "!url": "http://www.espruino.com/Reference#l_NRF_wake"
    },
    "restart": {
      "!type": "fn(callback: ?)",
      "!doc": "<p>Restart the Bluetooth softdevice (if there is currently a BLE connection, it\nwill queue a restart to be done when the connection closes).</p>\n<p>You shouldn&#39;t need to call this function in normal usage. However, Nordic&#39;s BLE\nsoftdevice has some settings that cannot be reset. For example there are only a\ncertain number of unique UUIDs. Once these are all used the only option is to\nrestart the softdevice to clear them all out.</p>\n",
      "!url": "http://www.espruino.com/Reference#l_NRF_restart"
    },
    "eraseBonds": {
      "!type": "fn(callback: ?)",
      "!doc": "<p>Delete all data stored for all peers (bonding data used for secure connections). This cannot be done\nwhile a connection is active, so if there is a connection it will be postponed until everything is disconnected\n(which can be done by calling <code>NRF.disconnect()</code> and waiting).</p>\n<p>Booting your device while holding all buttons down together should also have the same effect.</p>\n",
      "!url": "http://www.espruino.com/Reference#l_NRF_eraseBonds"
    },
    "getAddress": {
      "!type": "fn(current: bool) -> ?",
      "!doc": "<p>Get this device&#39;s default or current Bluetooth MAC address.</p>\n<p>For Puck.js, the last 5 characters of this (e.g. <code>ee:ff</code>) are used in the\ndevice&#39;s advertised Bluetooth name.</p>\n",
      "!url": "http://www.espruino.com/Reference#l_NRF_getAddress"
    },
    "setAddress": {
      "!type": "fn(addr: ?)",
      "!doc": "<p>Set this device&#39;s default Bluetooth MAC address:</p>\n<pre><code><span class=\"hljs-module-access\"><span class=\"hljs-module\"><span class=\"hljs-identifier\">NRF</span>.</span></span>set<span class=\"hljs-constructor\">Address(<span class=\"hljs-string\">&quot;ff:ee:dd:cc:bb:aa random&quot;</span>)</span>;\n</code></pre>\n<p>Addresses take the form:</p>\n<ul>\n<li><code>&quot;ff:ee:dd:cc:bb:aa&quot;</code> or <code>&quot;ff:ee:dd:cc:bb:aa public&quot;</code> for a public address</li>\n<li><code>&quot;ff:ee:dd:cc:bb:aa random&quot;</code> for a random static address (the default for\nEspruino)</li>\n</ul>\n<p>This may throw a <code>INVALID_BLE_ADDR</code> error if the upper two bits of the address\ndon&#39;t match the address type.</p>\n<p>To change the address, Espruino must restart the softdevice. It will only do so\nwhen it is disconnected from other devices.</p>\n",
      "!url": "http://www.espruino.com/Reference#l_NRF_setAddress"
    },
    "resolveAddress": {
      "!type": "fn(options: ?) -> ?",
      "!doc": "<p>Try to resolve a <strong>bonded</strong> peer&#39;s address from a random private resolvable address. If the peer\nis not bonded, there will be no IRK and <code>undefined</code> will be returned.</p>\n<p>A bunch of devices, especially smartphones, implement address randomisation and periodically change\ntheir bluetooth address to prevent being tracked.</p>\n<p>If such a device uses a &quot;random private resolvable address&quot;, that address is generated\nwith the help of an identity resolving key (IRK) that is exchanged during bonding.</p>\n<p>If we know the IRK of a device, we can check if an address was potentially generated by that device.</p>\n<p>The following will check an address against the IRKs of all bonded devices,\nand return the actual address of a bonded device if the given address was likely generated using that device&#39;s IRK:</p>\n<pre><code><span class=\"hljs-type\">NRF</span>.on(&#x27;connect&#x27;,<span class=\"hljs-keyword\">addr</span>=&gt; {\n  // <span class=\"hljs-keyword\">addr</span> could be <span class=\"hljs-string\">&quot;aa:bb:cc:dd:ee:ff private-resolvable&quot;</span>\n  <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-keyword\">addr</span>.endsWith(<span class=\"hljs-string\">&quot;private-resolvable&quot;</span>)) {\n    <span class=\"hljs-keyword\">let</span> resolved = <span class=\"hljs-type\">NRF</span>.resolveAddress(<span class=\"hljs-keyword\">addr</span>);\n    // resolved <span class=\"hljs-keyword\">is</span> <span class=\"hljs-string\">&quot;aa:bb:cc:dd:ee:ff public&quot;</span>\n    <span class=\"hljs-keyword\">if</span> (resolved) <span class=\"hljs-keyword\">addr</span> = resolved;\n  }\n  console.log(<span class=\"hljs-string\">&quot;Device connected: &quot;</span>, <span class=\"hljs-keyword\">addr</span>);\n})\n</code></pre>\n<p>You can get the current connection&#39;s address using <code>NRF.getSecurityStatus().connected_addr</code>,\nso can for instance do <code>NRF.resolveAddress(NRF.getSecurityStatus().connected_addr)</code>.</p>\n",
      "!url": "http://www.espruino.com/Reference#l_NRF_resolveAddress"
    },
    "getBattery": {
      "!type": "fn() -> number",
      "!doc": "<p>Get the battery level in volts (the voltage that the NRF chip is running off\nof).</p>\n<p>This is the battery level of the device itself - it has nothing to with any\ndevice that might be connected.</p>\n",
      "!url": "http://www.espruino.com/Reference#l_NRF_getBattery"
    },
    "setAdvertising": {
      "!type": "fn(data: ?, options: ?)",
      "!doc": "<p>Change the data that Espruino advertises. By default Espruino advertises:</p>\n<ul>\n<li>3 bytes of Bluetooth Connection Flags</li>\n<li>The device name</li>\n<li>(2v26+) the Espruino Manufacturer ID of 0x0590, but with no data</li>\n</ul>\n<p>Data can be of the form <code>{ UUID : data_as_byte_array }</code>. The UUID should be a\n<a href=\"https://developer.bluetooth.org/gatt/services/Pages/ServicesHome.aspx\">Bluetooth Service ID</a>.</p>\n<p>For example to return battery level at 95%, do:</p>\n<pre><code>NRF.setAdvertising({\n  <span class=\"hljs-number\">0</span>x180F : [<span class=\"hljs-number\">95</span>] <span class=\"hljs-regexp\">//</span> Service data <span class=\"hljs-number\">0</span>x180F = <span class=\"hljs-number\">95</span>\n});\n</code></pre>\n<p>Or you could report the current temperature:</p>\n<pre><code>setInterval(<span class=\"hljs-name\">function</span>() {\n  NRF.setAdvertising({\n    <span class=\"hljs-number\">0</span>x1809 : [Math.round(<span class=\"hljs-name\">E</span>.getTemperature())]\n  })<span class=\"hljs-comment\">;</span>\n}, <span class=\"hljs-number\">30000</span>)<span class=\"hljs-comment\">;</span>\n</code></pre>\n<p>If you specify a value for the object key, Service Data is advertised. However\nif you specify <code>undefined</code>, the Service UUID is advertised:</p>\n<pre><code>NRF.setAdvertising({\n  <span class=\"hljs-number\">0x180D</span> : <span class=\"hljs-literal\">undefined</span> <span class=\"hljs-comment\">// Advertise service UUID 0x180D (HRM)</span>\n});\n</code></pre>\n<p>Service UUIDs can also be supplied in the second argument of <code>NRF.setServices</code>,\nbut those go in the scan response packet.</p>\n<p>You can also supply the raw advertising data in an array. For example to\nadvertise as an Eddystone beacon:</p>\n<pre><code>NRF.setAdvertising([<span class=\"hljs-number\">0</span>x03,  <span class=\"hljs-regexp\">//</span> Length of Service List\n  <span class=\"hljs-number\">0</span>x03,  <span class=\"hljs-regexp\">//</span> Param: Service List\n  <span class=\"hljs-number\">0</span>xAA, <span class=\"hljs-number\">0</span>xFE,  <span class=\"hljs-regexp\">//</span> Eddystone ID\n  <span class=\"hljs-number\">0</span>x13,  <span class=\"hljs-regexp\">//</span> Length of Service Data\n  <span class=\"hljs-number\">0</span>x16,  <span class=\"hljs-regexp\">//</span> Service Data\n  <span class=\"hljs-number\">0</span>xAA, <span class=\"hljs-number\">0</span>xFE, <span class=\"hljs-regexp\">//</span> Eddystone ID\n  <span class=\"hljs-number\">0</span>x10,  <span class=\"hljs-regexp\">//</span> Frame type: URL\n  <span class=\"hljs-number\">0</span>xF8, <span class=\"hljs-regexp\">//</span> Power\n  <span class=\"hljs-number\">0</span>x03, <span class=\"hljs-regexp\">//</span> https:<span class=\"hljs-regexp\">//</span>\n  <span class=\"hljs-string\">&#x27;g&#x27;</span>,<span class=\"hljs-string\">&#x27;o&#x27;</span>,<span class=\"hljs-string\">&#x27;o&#x27;</span>,<span class=\"hljs-string\">&#x27;.&#x27;</span>,<span class=\"hljs-string\">&#x27;g&#x27;</span>,<span class=\"hljs-string\">&#x27;l&#x27;</span>,<span class=\"hljs-string\">&#x27;/&#x27;</span>,<span class=\"hljs-string\">&#x27;B&#x27;</span>,<span class=\"hljs-string\">&#x27;3&#x27;</span>,<span class=\"hljs-string\">&#x27;J&#x27;</span>,<span class=\"hljs-string\">&#x27;0&#x27;</span>,<span class=\"hljs-string\">&#x27;O&#x27;</span>,<span class=\"hljs-string\">&#x27;c&#x27;</span>],\n    {interval:<span class=\"hljs-number\">100</span>});\n</code></pre>\n<p>(However for Eddystone we&#39;d advise that you use the <a href=\"/Puck.js+Eddystone\">Espruino Eddystone\nlibrary</a>)</p>\n<p><strong>Note:</strong> When specifying data as an array, certain advertising options such as\n<code>discoverable</code> and <code>showName</code> won&#39;t have any effect.</p>\n<p><strong>Note:</strong> The size of Bluetooth LE advertising packets is limited to 31 bytes.\nIf you want to advertise more data, consider using an array for <code>data</code> (See\nbelow), or <code>NRF.setScanResponse</code>.</p>\n<p>You can even specify an array of arrays or objects, in which case each\nadvertising packet will be used in turn - for instance to make your device\nadvertise battery level and its name as well as both Eddystone and iBeacon :</p>\n<pre><code>NRF<span class=\"hljs-selector-class\">.setAdvertising</span>([\n  {<span class=\"hljs-number\">0</span>x180F : [E.getBattery()]}, <span class=\"hljs-comment\">// normal advertising, with battery %</span>\n  <span class=\"hljs-built_in\">require</span>(&quot;ble_ibeacon&quot;)<span class=\"hljs-selector-class\">.get</span>(...), <span class=\"hljs-comment\">// iBeacon</span>\n  <span class=\"hljs-built_in\">require</span>(&quot;ble_eddystone&quot;)<span class=\"hljs-selector-class\">.get</span>(...), <span class=\"hljs-comment\">// eddystone</span>\n], {interval:<span class=\"hljs-number\">300</span>});\n</code></pre>\n<p><code>options</code> is an object, which can contain:</p>\n<pre><code>{\n  <span class=\"hljs-type\">name</span>: &quot;Hello&quot;              // The <span class=\"hljs-type\">name</span> <span class=\"hljs-keyword\">of</span> the device\n  showName: <span class=\"hljs-keyword\">true</span>/<span class=\"hljs-keyword\">false</span>       // <span class=\"hljs-keyword\">include</span> <span class=\"hljs-keyword\">full</span> <span class=\"hljs-type\">name</span>, <span class=\"hljs-keyword\">or</span> <span class=\"hljs-keyword\">nothing</span>\n  discoverable: <span class=\"hljs-keyword\">true</span>/<span class=\"hljs-keyword\">false</span>   // general discoverable, <span class=\"hljs-keyword\">or</span> limited - <span class=\"hljs-keyword\">default</span> <span class=\"hljs-keyword\">is</span> limited\n  connectable: <span class=\"hljs-keyword\">true</span>/<span class=\"hljs-keyword\">false</span>    // whether device <span class=\"hljs-keyword\">is</span> connectable - <span class=\"hljs-keyword\">default</span> <span class=\"hljs-keyword\">is</span> <span class=\"hljs-keyword\">true</span>\n  scannable : <span class=\"hljs-keyword\">true</span>/<span class=\"hljs-keyword\">false</span>     // whether device can be scanned <span class=\"hljs-keyword\">for</span> scan response packets - <span class=\"hljs-keyword\">default</span> <span class=\"hljs-keyword\">is</span> <span class=\"hljs-keyword\">true</span>\n  whenConnected : <span class=\"hljs-keyword\">true</span>/<span class=\"hljs-keyword\">false</span> // keep advertising <span class=\"hljs-keyword\">when</span> connected (nRF52 <span class=\"hljs-keyword\">only</span>)\n                             // switches <span class=\"hljs-keyword\">to</span> advertising <span class=\"hljs-keyword\">as</span> non-connectable <span class=\"hljs-keyword\">when</span> it <span class=\"hljs-keyword\">is</span> connected\n  <span class=\"hljs-type\">interval</span>: <span class=\"hljs-number\">600</span>              // Advertising <span class=\"hljs-type\">interval</span> <span class=\"hljs-keyword\">in</span> msec, <span class=\"hljs-keyword\">between</span> <span class=\"hljs-number\">20</span> <span class=\"hljs-keyword\">and</span> <span class=\"hljs-number\">10000</span> (<span class=\"hljs-keyword\">default</span> <span class=\"hljs-keyword\">is</span> <span class=\"hljs-number\">375</span>ms)\n  manufacturer: <span class=\"hljs-number\">0x0590</span>       // This <span class=\"hljs-keyword\">is</span> the manufacturer ID. <span class=\"hljs-keyword\">Set</span> <span class=\"hljs-keyword\">to</span> `<span class=\"hljs-number\">0</span>/<span class=\"hljs-keyword\">false</span>` <span class=\"hljs-keyword\">to</span> <span class=\"hljs-keyword\">disable</span> manufacturer data (<span class=\"hljs-number\">2</span>v26+ advertises Espruino<span class=\"hljs-string\">&#x27;s 0x0590 by default)\n  manufacturerData: [...]    // If sending manufacturer data, this is an array of data to send\n  phy: &quot;1mbps/2mbps/coded/coded,1mbps/1mbps,coded&quot;   // ((2v26+, NRF52833/NRF52840 only) use the long-range coded phy for transmission (1mbps default)\n  extended : true // (2v26+, NRF52833/NRF52840 only) force use of extended (&gt;31 byte) advertising packets - usually only done if phy isn&#x27;</span>t <span class=\"hljs-keyword\">set</span> <span class=\"hljs-keyword\">to</span> &quot;1mbps&quot;\n}\n</code></pre>\n<p>Setting <code>connectable</code> and <code>scannable</code> to false gives the lowest power\nconsumption as the BLE radio doesn&#39;t have to listen after sending advertising.</p>\n<p><strong>NOTE:</strong> Non-<code>connectable</code> advertising can&#39;t have an advertising interval less\nthan 100ms according to the BLE spec.</p>\n<p>So for instance to set the name of Puck.js without advertising any other data\nyou can just use the command:</p>\n<pre><code><span class=\"hljs-module-access\"><span class=\"hljs-module\"><span class=\"hljs-identifier\">NRF</span>.</span></span>set<span class=\"hljs-constructor\">Advertising({},{<span class=\"hljs-params\">name</span>:<span class=\"hljs-string\">&quot;Hello&quot;</span>})</span>;\n</code></pre>\n<h4 id=\"manufacturer-data\">Manufacturer Data</h4>\n<p>You can also specify &#39;manufacturer data&#39;, which is another form of advertising\ndata. We&#39;ve registered the Manufacturer ID 0x0590 (as Pur3 Ltd) for use with\n<em>Official Espruino devices</em> - use it to advertise whatever data you&#39;d like, but\nwe&#39;d recommend using JSON.</p>\n<p>For example by not advertising a device name you can send up to 24 bytes of JSON\non Espruino&#39;s manufacturer ID:</p>\n<pre><code><span class=\"hljs-title\">var</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">data</span> = {<span class=\"hljs-title\">a</span>:1,<span class=\"hljs-title\">b</span>:2};</span>\n<span class=\"hljs-type\">NRF</span>.setAdvertising({},{\n  showName:false,\n  manufacturer:<span class=\"hljs-number\">0x0590</span>,\n  manufacturerData:<span class=\"hljs-type\">JSON</span>.stringify(<span class=\"hljs-class\"><span class=\"hljs-keyword\">data</span>)</span>\n});\n</code></pre>\n<p>If you&#39;re using <a href=\"https://github.com/espruino/EspruinoHub\">EspruinoHub</a> then it\nwill automatically decode this into the following MQTT topics:</p>\n<ul>\n<li><code>/ble/advertise/ma:c_:_a:dd:re:ss/espruino</code> -&gt; <code>{&quot;a&quot;:10,&quot;b&quot;:15}</code></li>\n<li><code>/ble/advertise/ma:c_:_a:dd:re:ss/a</code> -&gt; <code>1</code></li>\n<li><code>/ble/advertise/ma:c_:_a:dd:re:ss/b</code> -&gt; <code>2</code></li>\n</ul>\n<p>Note that <strong>you only have 24 characters available for JSON</strong>, so try to use the\nshortest field names possible and avoid floating point values that can be very\nlong when converted to a String.</p>\n<h4 id=\"phy\">Phy</h4>\n<p>On NRF52833/NRF52840 based devices you can specify <code>phy</code> (the physical connection type used) as:</p>\n<ul>\n<li><code>phy:&quot;1mbps&quot;&quot;</code> - the default Bluetooth phy (compatible with everything)</li>\n<li><code>phy:&quot;2mbps&quot;</code> - a faster Bluetooth connection</li>\n<li><code>phy:&quot;coded&quot;</code> - a slower connection with error correction (much longer range)</li>\n<li><code>phy:&quot;coded,1mbps&quot;</code> - both long range and normal, but advertisements sent on the <code>coded</code> phy</li>\n<li><code>phy:&quot;1mbps,coded&quot;</code> - both long range and normal, but advertisements sent on the <code>1mbps</code> phy - this allows for long range connections while also being compatible with everything</li>\n</ul>\n<p>If you wish to have the best of both world (long range advertising and compatiblity) then\nNordic suggest changing advertising between <code>coded,1mbps</code> and <code>1mbps,coded</code> every 500ms</p>\n",
      "!url": "http://www.espruino.com/Reference#l_NRF_setAdvertising"
    },
    "getAdvertisingData": {
      "!type": "fn(data: ?, options: ?) -> ?",
      "!doc": "<p>This is just like <code>NRF.setAdvertising</code>, except instead of advertising the data,\nit returns the packet that would be advertised as an array.</p>\n<p>In addition, <code>options</code> can contain:</p>\n<ul>\n<li>(2v26+) <code>flags : bool</code> if <code>flags:false</code>, the Bluetooth appearance flags\nare left out (usually <code>[2,1,6]</code>). It can be very useful to do this\nif you&#39;re using <code>NRF.getAdvertisingData(...)</code> to set a scan response packet:</li>\n</ul>\n<pre><code><span class=\"hljs-selector-tag\">NRF</span><span class=\"hljs-selector-class\">.setScanResponse</span>(NRF.<span class=\"hljs-built_in\">getAdvertisingData</span>({\n  <span class=\"hljs-number\">0</span><span class=\"hljs-attribute\">x1809 </span>: [Math.<span class=\"hljs-built_in\">round</span>(E.<span class=\"hljs-built_in\">getTemperature</span>())] <span class=\"hljs-comment\">// temperature service data in scan response</span>\n}, {\n  <span class=\"hljs-attribute\">flags </span>: false,\n  <span class=\"hljs-attribute\">showName </span>: false\n}));\n</code></pre>\n",
      "!url": "http://www.espruino.com/Reference#l_NRF_getAdvertisingData"
    },
    "setScanResponse": {
      "!type": "fn(data: ?)",
      "!doc": "<p>The raw scan response data should be supplied as an array. For example to return\n&quot;Sample&quot; for the device name:</p>\n<pre><code>NRF.setScanResponse([<span class=\"hljs-number\">0</span>x07,  <span class=\"hljs-regexp\">//</span> Length of Data\n  <span class=\"hljs-number\">0</span>x09,  <span class=\"hljs-regexp\">//</span> Param: Complete Local Name\n  <span class=\"hljs-string\">&#x27;S&#x27;</span>, <span class=\"hljs-string\">&#x27;a&#x27;</span>, <span class=\"hljs-string\">&#x27;m&#x27;</span>, <span class=\"hljs-string\">&#x27;p&#x27;</span>, <span class=\"hljs-string\">&#x27;l&#x27;</span>, <span class=\"hljs-string\">&#x27;e&#x27;</span>]);\n</code></pre>\n<p>Or you can use <code>NRF.getAdvertisingData</code> to correctly format the advertising data\nfor you. For example to advertise the HRM service and temperature in the Scan\nResponse you can do:</p>\n<pre><code><span class=\"hljs-selector-tag\">NRF</span><span class=\"hljs-selector-class\">.setScanResponse</span>(NRF.<span class=\"hljs-built_in\">getAdvertisingData</span>({\n  <span class=\"hljs-number\">0</span><span class=\"hljs-attribute\">x180D</span>: undefined, <span class=\"hljs-comment\">// HRM service</span>\n  <span class=\"hljs-number\">0</span><span class=\"hljs-attribute\">x1809</span>: [Math.<span class=\"hljs-built_in\">round</span>(E.<span class=\"hljs-built_in\">getTemperature</span>())] <span class=\"hljs-comment\">// temperature</span>\n},{ <span class=\"hljs-attribute\">flags</span>:false, <span class=\"hljs-attribute\">showName</span>:false }))\n</code></pre>\n<p><strong>Note:</strong> The deprecated <code>NRF.setServices(..., {advertise:[ ... ]})</code> writes advertised services\ninto the scan response - so you can&#39;t use both <code>NRF.setScanResponse</code> and <code>NRF.setServices(..., {advertise:[...]})</code>\nor one will overwrite the other.</p>\n",
      "!url": "http://www.espruino.com/Reference#l_NRF_setScanResponse"
    },
    "setServices": {
      "!type": "fn(data: ?, options: ?)",
      "!doc": "<p>Change the services and characteristics Espruino advertises.</p>\n<p>If you want to <strong>change</strong> the value of a characteristic, you need to use\n<code>NRF.updateServices()</code> instead</p>\n<p>To expose some information on Characteristic <code>ABCD</code> on service <code>BCDE</code> you could\ndo:</p>\n<pre><code><span class=\"hljs-string\">NRF.setServices({</span>\n  <span class=\"hljs-attr\">0xBCDE :</span> {\n    <span class=\"hljs-attr\">0xABCD :</span> {\n      <span class=\"hljs-attr\">value :</span> <span class=\"hljs-string\">&quot;Hello&quot;</span>,\n      <span class=\"hljs-attr\">readable :</span> <span class=\"hljs-literal\">true</span>\n    }\n  }\n<span class=\"hljs-string\">});</span>\n</code></pre>\n<p>Or to allow the 3 LEDs to be controlled by writing numbers 0 to 7 to a\ncharacteristic, you can do the following. <code>evt.data</code> is an ArrayBuffer.</p>\n<pre><code>NRF<span class=\"hljs-selector-class\">.setServices</span>({\n  <span class=\"hljs-number\">0</span>xBCDE : {\n    <span class=\"hljs-number\">0</span>xABCD : {\n      writable : true,\n      onWrite : <span class=\"hljs-built_in\">function</span>(evt) {\n        digitalWrite(<span class=\"hljs-selector-attr\">[LED3,LED2,LED1]</span>, evt<span class=\"hljs-selector-class\">.data</span><span class=\"hljs-selector-attr\">[0]</span>);\n      }\n    }\n  }\n});\n</code></pre>\n<p>You can supply many different options:</p>\n<pre><code>NRF.setServices({\n  <span class=\"hljs-number\">0</span>xBCDE : {\n    <span class=\"hljs-number\">0</span>xABCD : {\n      value : <span class=\"hljs-string\">&quot;Hello&quot;</span>, <span class=\"hljs-regexp\">//</span> optional\n      maxLen : <span class=\"hljs-number\">5</span>, <span class=\"hljs-regexp\">//</span> optional (otherwise is length of initial value)\n      broadcast : false, <span class=\"hljs-regexp\">//</span> optional, default is false\n      readable : true,   <span class=\"hljs-regexp\">//</span> optional, default is false\n      writable : true,   <span class=\"hljs-regexp\">//</span> optional, default is false\n      notify : true,   <span class=\"hljs-regexp\">//</span> optional, default is false\n      indicate : true,   <span class=\"hljs-regexp\">//</span> optional, default is false\n      description: <span class=\"hljs-string\">&quot;My Characteristic&quot;</span>,  <span class=\"hljs-regexp\">//</span> optional, default is null,\n      security: { <span class=\"hljs-regexp\">//</span> optional - see NRF.setSecurity\n        read: { <span class=\"hljs-regexp\">//</span> optional\n          encrypted: false, <span class=\"hljs-regexp\">//</span> optional, default is false\n          mitm: false, <span class=\"hljs-regexp\">//</span> optional, default is false\n          lesc: false, <span class=\"hljs-regexp\">//</span> optional, default is false\n          signed: false <span class=\"hljs-regexp\">//</span> optional, default is false\n        },\n        write: { <span class=\"hljs-regexp\">//</span> optional\n          encrypted: true, <span class=\"hljs-regexp\">//</span> optional, default is false\n          mitm: false, <span class=\"hljs-regexp\">//</span> optional, default is false\n          lesc: false, <span class=\"hljs-regexp\">//</span> optional, default is false\n          signed: false <span class=\"hljs-regexp\">//</span> optional, default is false\n        }\n      },\n      onWrite : <span class=\"hljs-keyword\">function</span>(evt) { <span class=\"hljs-regexp\">//</span> optional\n        console.log(<span class=\"hljs-string\">&quot;Got &quot;</span>, evt.data); <span class=\"hljs-regexp\">//</span> an ArrayBuffer\n      },\n      onWriteDesc : <span class=\"hljs-keyword\">function</span>(evt) { <span class=\"hljs-regexp\">//</span> optional - called when the <span class=\"hljs-string\">&#x27;cccd&#x27;</span> descriptor is written\n        <span class=\"hljs-regexp\">//</span> <span class=\"hljs-keyword\">for</span> example this is called when notifications are requested by the client:\n        console.log(<span class=\"hljs-string\">&quot;Notifications enabled = &quot;</span>, evt.data[<span class=\"hljs-number\">0</span>]&amp;<span class=\"hljs-number\">1</span>);\n      }\n    }\n    <span class=\"hljs-regexp\">//</span> more characteristics allowed\n  }\n  <span class=\"hljs-regexp\">//</span> more services allowed\n});\n</code></pre>\n<p><strong>Note:</strong> UUIDs can be integers between <code>0</code> and <code>0xFFFF</code>, strings of the form\n<code>&quot;ABCD&quot;</code>, or strings of the form <code>&quot;ABCDABCD-ABCD-ABCD-ABCD-ABCDABCDABCD&quot;</code></p>\n<p><code>options</code> can be of the form:</p>\n<pre><code>NRF.setServices(<span class=\"hljs-literal\">undefined</span>, {\n  <span class=\"hljs-attr\">hid</span> : <span class=\"hljs-keyword\">new</span> Uint8Array(...), <span class=\"hljs-comment\">// optional, default is undefined. Enable BLE HID support</span>\n  uart : <span class=\"hljs-literal\">true</span>, <span class=\"hljs-comment\">// optional, default is true. Enable BLE UART support</span>\n  advertise: [ <span class=\"hljs-string\">&#x27;180D&#x27;</span> ] <span class=\"hljs-comment\">// optional, list of service UUIDs to advertise in the scan response</span>\n                        <span class=\"hljs-comment\">// (deprecated - use `NRF.setScanResponse(NRF.getAdvertisingData({&#x27;180D&#x27;:undefined},{flags:false, showName:false}))`)</span>\n  ancs : <span class=\"hljs-literal\">true</span>, <span class=\"hljs-comment\">// optional, Bangle.js-only, enable Apple ANCS support for notifications (see `NRF.ancs*`)</span>\n  ams : <span class=\"hljs-literal\">true</span> <span class=\"hljs-comment\">// optional, Bangle.js-only, enable Apple AMS support for media control (see `NRF.ams*`)</span>\n  cts : <span class=\"hljs-literal\">true</span> <span class=\"hljs-comment\">// optional, Bangle.js-only, enable Apple Current Time Service support (see `NRF.ctsGetTime`)</span>\n});\n</code></pre>\n<p>To enable BLE HID, you must set <code>hid</code> to an array which is the BLE report\ndescriptor. The easiest way to do this is to use the <code>ble_hid_controls</code> or\n<code>ble_hid_keyboard</code> modules.</p>\n<p><strong>Note:</strong> Just creating a service doesn&#39;t mean that the service will be\nadvertised. It will only be available after a device connects. To advertise,\nspecify the UUIDs you wish to advertise in the <code>advertise</code> field of the second\n<code>options</code> argument. For example this will create and advertise a heart rate\nservice:</p>\n<pre><code><span class=\"hljs-string\">NRF.setServices({</span>\n  <span class=\"hljs-attr\">0x180D:</span> { <span class=\"hljs-string\">//</span> <span class=\"hljs-string\">heart_rate</span>\n    <span class=\"hljs-attr\">0x2A37:</span> { <span class=\"hljs-string\">//</span> <span class=\"hljs-string\">heart_rate_measurement</span>\n      <span class=\"hljs-attr\">notify:</span> <span class=\"hljs-literal\">true</span>,\n      <span class=\"hljs-attr\">value :</span> [<span class=\"hljs-number\">0x06</span>, <span class=\"hljs-string\">heartrate</span>],\n    }\n  }\n<span class=\"hljs-string\">},</span> { <span class=\"hljs-attr\">advertise:</span> [ <span class=\"hljs-string\">&#x27;180D&#x27;</span> ] }<span class=\"hljs-string\">);</span>\n</code></pre>\n<p>You may specify 128 bit UUIDs to advertise, however you may get a <code>DATA_SIZE</code>\nexception because there is insufficient space in the Bluetooth LE advertising\npacket for the 128 bit UART UUID as well as the UUID you specified. In this case\nyou can add <code>uart:false</code> after the <code>advertise</code> element to disable the UART,\nhowever you then be unable to connect to Puck.js&#39;s console via Bluetooth.</p>\n<p>If you absolutely require two or more 128 bit UUIDs then you will have to\nspecify your own raw advertising data packets with <code>NRF.setAdvertising</code></p>\n<p><strong>Note:</strong> The services on Espruino can only be modified when there is no device\nconnected to it as it requires a restart of the Bluetooth stack. <strong>iOS devices\nwill &#39;cache&#39; the list of services</strong> so apps like NRF Connect may incorrectly\ndisplay the old services even after you have modified them. To fix this, disable\nand re-enable Bluetooth on your iOS device, or use an Android device to run NRF\nConnect.</p>\n<p><strong>Note:</strong> Not all combinations of security configuration values are valid, the\nvalid combinations are: encrypted, encrypted + mitm, lesc, signed, signed +\nmitm. See <code>NRF.setSecurity</code> for more information.</p>\n",
      "!url": "http://www.espruino.com/Reference#l_NRF_setServices"
    },
    "updateServices": {
      "!type": "fn(data: ?)",
      "!doc": "<p>Update values for the services and characteristics Espruino advertises. Only\nservices and characteristics previously declared using <code>NRF.setServices</code> are\naffected.</p>\n<p>To update the &#39;0xABCD&#39; characteristic in the &#39;0xBCDE&#39; service:</p>\n<pre><code>NRF<span class=\"hljs-selector-class\">.updateServices</span>({\n  <span class=\"hljs-number\">0</span>xBCDE : {\n    <span class=\"hljs-number\">0</span>xABCD : {\n      value : <span class=\"hljs-string\">&quot;World&quot;</span>\n    }\n  }\n});\n</code></pre>\n<p>You can also use 128 bit UUIDs, for example\n<code>&quot;b7920001-3c1b-4b40-869f-3c0db9be80c6&quot;</code>.</p>\n<p>To define a service and characteristic and then notify connected clients of a\nchange to it when a button is pressed:</p>\n<pre><code><span class=\"hljs-string\">NRF.setServices({</span>\n  <span class=\"hljs-attr\">0xBCDE :</span> {\n    <span class=\"hljs-attr\">0xABCD :</span> {\n      <span class=\"hljs-attr\">value :</span> <span class=\"hljs-string\">&quot;Hello&quot;</span>,\n      <span class=\"hljs-attr\">maxLen :</span> <span class=\"hljs-number\">20</span>,\n      <span class=\"hljs-attr\">notify:</span> <span class=\"hljs-literal\">true</span>\n    }\n  }\n<span class=\"hljs-string\">});</span>\n<span class=\"hljs-string\">setWatch(function()</span> {\n  <span class=\"hljs-string\">NRF.updateServices(</span>{\n    <span class=\"hljs-attr\">0xBCDE :</span> {\n      <span class=\"hljs-attr\">0xABCD :</span> {\n        <span class=\"hljs-attr\">value :</span> <span class=\"hljs-string\">&quot;World!&quot;</span>,\n        <span class=\"hljs-attr\">notify:</span> <span class=\"hljs-literal\">true</span>\n      }\n    }\n  }<span class=\"hljs-string\">);</span>\n}<span class=\"hljs-string\">,</span> <span class=\"hljs-string\">BTN,</span> { <span class=\"hljs-string\">repeat:true</span>, <span class=\"hljs-string\">edge:&quot;rising&quot;</span>, <span class=\"hljs-attr\">debounce:</span> <span class=\"hljs-number\">50</span> }<span class=\"hljs-string\">);</span>\n</code></pre>\n<p>This only works if the characteristic was created with <code>notify: true</code> using\n<code>NRF.setServices</code>, otherwise the characteristic will be updated but no\nnotification will be sent.</p>\n<p>Also note that <code>maxLen</code> was specified. If it wasn&#39;t then the maximum length of\nthe characteristic would have been 5 - the length of <code>&quot;Hello&quot;</code>.</p>\n<p>To indicate (i.e. notify with ACK) connected clients of a change to the &#39;0xABCD&#39;\ncharacteristic in the &#39;0xBCDE&#39; service:</p>\n<pre><code><span class=\"hljs-string\">NRF.updateServices({</span>\n  <span class=\"hljs-attr\">0xBCDE :</span> {\n    <span class=\"hljs-attr\">0xABCD :</span> {\n      <span class=\"hljs-attr\">value :</span> <span class=\"hljs-string\">&quot;World&quot;</span>,\n      <span class=\"hljs-attr\">indicate:</span> <span class=\"hljs-literal\">true</span>\n    }\n  }\n<span class=\"hljs-string\">});</span>\n</code></pre>\n<p>This only works if the characteristic was created with <code>indicate: true</code> using\n<code>NRF.setServices</code>, otherwise the characteristic will be updated but no\nnotification will be sent.</p>\n<p><strong>Note:</strong> See <code>NRF.setServices</code> for more information</p>\n",
      "!url": "http://www.espruino.com/Reference#l_NRF_updateServices"
    },
    "setScan": {
      "!type": "fn(callback: ?, options: ?)",
      "!doc": "<p>Start/stop listening for BLE advertising packets within range. Returns a\n<code>BluetoothDevice</code> for each advertising packet. <strong>By default this is not an active\nscan, so Scan Response advertising data is not included (see below)</strong></p>\n<pre><code><span class=\"hljs-comment\">// Start scanning</span>\npackets=<span class=\"hljs-number\">10</span>;\n<span class=\"hljs-module-access\"><span class=\"hljs-module\"><span class=\"hljs-identifier\">NRF</span>.</span></span>set<span class=\"hljs-constructor\">Scan(<span class=\"hljs-params\">function</span>(<span class=\"hljs-params\">d</span>)</span> {\n  packets--;\n  <span class=\"hljs-keyword\">if</span> (packets&lt;=<span class=\"hljs-number\">0</span>)\n    <span class=\"hljs-module-access\"><span class=\"hljs-module\"><span class=\"hljs-identifier\">NRF</span>.</span></span>set<span class=\"hljs-constructor\">Scan()</span>; <span class=\"hljs-comment\">// stop scanning</span>\n  <span class=\"hljs-keyword\">else</span>\n    console.log(d); <span class=\"hljs-comment\">// print packet info</span>\n});\n</code></pre>\n<p>Each <code>BluetoothDevice</code> will look a bit like:</p>\n<pre><code>BluetoothDevice {\n  <span class=\"hljs-string\">&quot;id&quot;</span>: <span class=\"hljs-string\">&quot;aa:bb:cc:dd:ee:ff&quot;</span>, <span class=\"hljs-comment\">// address</span>\n  <span class=\"hljs-string\">&quot;rssi&quot;</span>: -<span class=\"hljs-number\">89</span>,               <span class=\"hljs-comment\">// signal strength</span>\n  <span class=\"hljs-string\">&quot;services&quot;</span>: <span class=\"hljs-selector-attr\">[ <span class=\"hljs-string\">&quot;128bit-uuid&quot;</span>, ... ]</span>,     <span class=\"hljs-comment\">// zero or more service UUIDs</span>\n  <span class=\"hljs-string\">&quot;data&quot;</span>: new <span class=\"hljs-built_in\">Uint8Array</span>(<span class=\"hljs-selector-attr\">[ ... ]</span>)<span class=\"hljs-selector-class\">.buffer</span>, <span class=\"hljs-comment\">// ArrayBuffer of returned data</span>\n  <span class=\"hljs-string\">&quot;serviceData&quot;</span> : { <span class=\"hljs-string\">&quot;0123&quot;</span> : <span class=\"hljs-selector-attr\">[ 1 ]</span> }, <span class=\"hljs-comment\">// if service data is in &#x27;data&#x27;, it&#x27;s extracted here</span>\n  <span class=\"hljs-string\">&quot;manufacturer&quot;</span> : <span class=\"hljs-number\">0</span>x1234, <span class=\"hljs-comment\">// if manufacturer data is in &#x27;data&#x27;, the 16 bit manufacturer ID is extracted here</span>\n  <span class=\"hljs-string\">&quot;manufacturerData&quot;</span> : new <span class=\"hljs-built_in\">Uint8Array</span>(<span class=\"hljs-selector-attr\">[...]</span>)<span class=\"hljs-selector-class\">.buffer</span>, <span class=\"hljs-comment\">// if manufacturer data is in &#x27;data&#x27;, the data is extracted here as an ArrayBuffer</span>\n  <span class=\"hljs-string\">&quot;name&quot;</span>: <span class=\"hljs-string\">&quot;DeviceName&quot;</span>       <span class=\"hljs-comment\">// the advertised device name</span>\n }\n</code></pre>\n<p>You can also supply a set of filters (as described in <code>NRF.requestDevice</code>) as a\nsecond argument, which will allow you to filter the devices you get a callback\nfor. This helps to cut down on the time spent processing JavaScript code in\nareas with a lot of Bluetooth advertisements. For example to find only devices\nwith the manufacturer data <code>0x0590</code> (Espruino&#39;s ID) you could do:</p>\n<pre><code>NRF.setScan(<span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">d</span>) {\n  <span class=\"hljs-built_in\">console</span>.<span class=\"hljs-built_in\">log</span>(d.manufacturerData);\n}, { <span class=\"hljs-attr\">filters</span>: [{ <span class=\"hljs-attr\">manufacturerData</span>:{<span class=\"hljs-number\">0x0590</span>:{}} }] });\n</code></pre>\n<p>You can also specify <code>active:true</code> in the second argument to perform active\nscanning (this requests scan response packets) from any devices it finds.</p>\n<p><strong>Note:</strong> Using a filter in <code>setScan</code> filters each advertising packet\nindividually. As a result, if you filter based on a service UUID and a device\nadvertises with multiple packets (or a scan response when <code>active:true</code>) only\nthe packets matching the filter are returned. To aggregate multiple packets you\ncan use <code>NRF.findDevices</code>.</p>\n<p><strong>Note:</strong> BLE advertising packets can arrive quickly - faster than you&#39;ll be\nable to print them to the console. It&#39;s best only to print a few, or to use a\nfunction like <code>NRF.findDevices(..)</code> which will collate a list of available\ndevices.</p>\n<p><strong>Note:</strong> Using setScan turns the radio&#39;s receive mode on constantly. This can\ndraw a <em>lot</em> of power (12mA or so), so you should use it sparingly or you can\nrun your battery down quickly.</p>\n",
      "!url": "http://www.espruino.com/Reference#l_NRF_setScan"
    },
    "filterDevices": {
      "!type": "fn(devices: ?, filters: ?) -> ?",
      "!doc": "<p>This function can be used to quickly filter through Bluetooth devices.</p>\n<p>For instance if you wish to scan for multiple different types of device at the\nsame time then you could use <code>NRF.findDevices</code> with all the filters you&#39;re\ninterested in. When scanning is finished you can then use <code>NRF.filterDevices</code> to\npick out just the devices of interest.</p>\n<pre><code><span class=\"hljs-comment\">// the two types of device we&#x27;re interested in</span>\nvar filter1 = <span class=\"hljs-literal\">[{<span class=\"hljs-identifier\">serviceData</span>:{&quot;<span class=\"hljs-identifier\">fe95</span>&quot;:{}}}]</span>;\nvar filter2 = <span class=\"hljs-literal\">[{<span class=\"hljs-identifier\">namePrefix</span>:&quot;P<span class=\"hljs-identifier\">ixl</span>.<span class=\"hljs-identifier\">js</span>&quot;}]</span>;\n<span class=\"hljs-comment\">// the following filter will return both types of device</span>\nvar allFilters = filter1.concat(filter2);\n<span class=\"hljs-comment\">// now scan for both types of device, and filter them out afterwards</span>\n<span class=\"hljs-module-access\"><span class=\"hljs-module\"><span class=\"hljs-identifier\">NRF</span>.</span></span>find<span class=\"hljs-constructor\">Devices(<span class=\"hljs-params\">function</span>(<span class=\"hljs-params\">devices</span>)</span> {\n  var devices1 = <span class=\"hljs-module-access\"><span class=\"hljs-module\"><span class=\"hljs-identifier\">NRF</span>.</span></span>filter<span class=\"hljs-constructor\">Devices(<span class=\"hljs-params\">devices</span>, <span class=\"hljs-params\">filter1</span>)</span>;\n  var devices2 = <span class=\"hljs-module-access\"><span class=\"hljs-module\"><span class=\"hljs-identifier\">NRF</span>.</span></span>filter<span class=\"hljs-constructor\">Devices(<span class=\"hljs-params\">devices</span>, <span class=\"hljs-params\">filter2</span>)</span>;\n  <span class=\"hljs-comment\">// ...</span>\n}, {filters : allFilters});\n</code></pre>\n",
      "!url": "http://www.espruino.com/Reference#l_NRF_filterDevices"
    },
    "findDevices": {
      "!type": "fn(callback: ?, options: ?)",
      "!doc": "<p>Utility function to return a list of BLE devices detected in range. Behind the\nscenes, this uses <code>NRF.setScan(...)</code> and collates the results.</p>\n<pre><code>NRF.findDevices(<span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">devices</span>) {\n  <span class=\"hljs-built_in\">console</span>.<span class=\"hljs-built_in\">log</span>(devices);\n}, <span class=\"hljs-number\">1000</span>);\n</code></pre>\n<p>prints something like:</p>\n<pre><code>[\n  BluetoothDevice {\n    <span class=\"hljs-string\">&quot;id&quot;</span> : <span class=\"hljs-string\">&quot;e7:e0:57:ad:36:a2 random&quot;</span>,\n    <span class=\"hljs-string\">&quot;rssi&quot;</span>: <span class=\"hljs-number\">-45</span>,\n    <span class=\"hljs-string\">&quot;services&quot;</span>: [ <span class=\"hljs-string\">&quot;4567&quot;</span> ],\n    <span class=\"hljs-string\">&quot;serviceData&quot;</span> : { <span class=\"hljs-string\">&quot;0123&quot;</span> : [ <span class=\"hljs-number\">1</span> ] },\n    <span class=\"hljs-string\">&quot;manufacturer&quot;</span> : <span class=\"hljs-number\">1424</span>,\n    <span class=\"hljs-string\">&quot;manufacturerData&quot;</span> : new Uint8Array([ ... ]).buffer,\n    <span class=\"hljs-string\">&quot;data&quot;</span>: new ArrayBuffer([ ... ]).buffer,\n    <span class=\"hljs-string\">&quot;name&quot;</span>: <span class=\"hljs-string\">&quot;Puck.js 36a2&quot;</span>\n   },\n  BluetoothDevice {\n    <span class=\"hljs-string\">&quot;id&quot;</span>: <span class=\"hljs-string\">&quot;c0:52:3f:50:42:c9 random&quot;</span>,\n    <span class=\"hljs-string\">&quot;rssi&quot;</span>: <span class=\"hljs-number\">-65</span>,\n    <span class=\"hljs-string\">&quot;data&quot;</span>: new ArrayBuffer([ ... ]),\n    <span class=\"hljs-string\">&quot;name&quot;</span>: <span class=\"hljs-string\">&quot;Puck.js 8f57&quot;</span>\n   }\n ]\n</code></pre>\n<p>For more information on the structure returned, see <code>NRF.setScan</code>.</p>\n<p>If you want to scan only for specific devices you can replace the timeout with\nan object of the form <code>{filters: ..., timeout : ..., active: bool}</code> using the\nfilters described in <code>NRF.requestDevice</code>. For example to search for devices with\nEspruino&#39;s <code>manufacturerData</code>:</p>\n<pre><code><span class=\"hljs-module-access\"><span class=\"hljs-module\"><span class=\"hljs-identifier\">NRF</span>.</span></span>find<span class=\"hljs-constructor\">Devices(<span class=\"hljs-params\">function</span>(<span class=\"hljs-params\">devices</span>)</span> {<span class=\"hljs-operator\">\n  ...\n</span>}, {timeout : <span class=\"hljs-number\">2000</span>, filters : <span class=\"hljs-literal\">[{ <span class=\"hljs-identifier\">manufacturerData</span>:{<span class=\"hljs-number\">0x0590</span>:{}} }]</span> });\n</code></pre>\n<p>You could then use\n<a href=\"/Reference#l_BluetoothRemoteGATTServer_connect\"><code>BluetoothDevice.gatt.connect(...)</code></a>\non the device returned to make a connection.</p>\n<p>You can also use <a href=\"/Reference#l_NRF_connect\"><code>NRF.connect(...)</code></a> on just the <code>id</code>\nstring returned, which may be useful if you always want to connect to a specific\ndevice.</p>\n<p><strong>Note:</strong> Using findDevices turns the radio&#39;s receive mode on for 2000ms (or\nhowever long you specify). This can draw a <em>lot</em> of power (12mA or so), so you\nshould use it sparingly or you can run your battery down quickly.</p>\n<p><strong>Note:</strong> The &#39;data&#39; field contains the data of <em>the last packet received</em>.\nThere may have been more packets. To get data for each packet individually use\n<code>NRF.setScan</code> instead.</p>\n",
      "!url": "http://www.espruino.com/Reference#l_NRF_findDevices"
    },
    "setRSSIHandler": {
      "!type": "fn(callback: ?)",
      "!doc": "<p>Start/stop listening for RSSI values on the currently active peripheral connection (eg when\nthis device is being connected to by a &#39;central&#39; device)</p>\n<pre><code><span class=\"hljs-comment\">// Start scanning</span>\n<span class=\"hljs-module-access\"><span class=\"hljs-module\"><span class=\"hljs-identifier\">NRF</span>.</span></span>set<span class=\"hljs-constructor\">RSSIHandler(<span class=\"hljs-params\">function</span>(<span class=\"hljs-params\">rssi</span>)</span> {\n  console.log(rssi); <span class=\"hljs-comment\">// prints -85 (or similar)</span>\n});\n<span class=\"hljs-comment\">// Stop Scanning</span>\n<span class=\"hljs-module-access\"><span class=\"hljs-module\"><span class=\"hljs-identifier\">NRF</span>.</span></span>set<span class=\"hljs-constructor\">RSSIHandler()</span>;\n</code></pre>\n<p>RSSI is the &#39;Received Signal Strength Indication&#39; in dBm</p>\n",
      "!url": "http://www.espruino.com/Reference#l_NRF_setRSSIHandler"
    },
    "setTxPower": {
      "!type": "fn(power: number)",
      "!doc": "<p>Set the BLE radio transmit power. The default TX power is 0 dBm (or 4dBm for Bangle.js 2).</p>\n",
      "!url": "http://www.espruino.com/Reference#l_NRF_setTxPower"
    },
    "setLowPowerConnection": {
      "!type": "fn(lowPower: bool)",
      "!doc": "<p><strong>THIS IS DEPRECATED</strong> - please use <code>NRF.setConnectionInterval</code> for peripheral\nand <code>NRF.connect(address, options)</code>/<code>BluetoothRemoteGATTServer.connect(options)</code>\nfor central connections.</p>\n<p>This sets the connection parameters - these affect the transfer speed and power\nusage when the device is connected.</p>\n<ul>\n<li>When not low power, the connection interval is between 7.5 and 20ms</li>\n<li>When low power, the connection interval is between 500 and 1000ms</li>\n</ul>\n<p>When low power connection is enabled, transfers of data over Bluetooth will be\nvery slow, however power usage while connected will be drastically decreased.</p>\n<p>This will only take effect after the connection is disconnected and\nre-established.</p>\n",
      "!url": "http://www.espruino.com/Reference#l_NRF_setLowPowerConnection"
    },
    "nfcURL": {
      "!type": "fn(url: ?)",
      "!doc": "<p>Enables NFC and starts advertising the given URL. For example:</p>\n<pre><code><span class=\"hljs-module-access\"><span class=\"hljs-module\"><span class=\"hljs-identifier\">NRF</span>.</span></span>nfc<span class=\"hljs-constructor\">URL(<span class=\"hljs-string\">&quot;http://espruino.com&quot;</span>)</span>;\n</code></pre>\n",
      "!url": "http://www.espruino.com/Reference#l_NRF_nfcURL"
    },
    "nfcPair": {
      "!type": "fn(key: ?)",
      "!doc": "<p>Enables NFC and with an out of band 16 byte pairing key.</p>\n<p>For example the following will enable out of band pairing on BLE such that the\ndevice will pair when you tap the phone against it:</p>\n<pre><code>var bleKey = <span class=\"hljs-literal\">[<span class=\"hljs-number\">0xAA</span>, <span class=\"hljs-number\">0xBB</span>, <span class=\"hljs-number\">0xCC</span>, <span class=\"hljs-number\">0xDD</span>, <span class=\"hljs-number\">0xEE</span>, <span class=\"hljs-number\">0xFF</span>, <span class=\"hljs-number\">0x99</span>, <span class=\"hljs-number\">0x88</span>, <span class=\"hljs-number\">0x77</span>, <span class=\"hljs-number\">0x66</span>, <span class=\"hljs-number\">0x55</span>, <span class=\"hljs-number\">0x44</span>, <span class=\"hljs-number\">0x33</span>, <span class=\"hljs-number\">0x22</span>, <span class=\"hljs-number\">0x11</span>, <span class=\"hljs-number\">0x00</span>]</span>;\n<span class=\"hljs-module-access\"><span class=\"hljs-module\"><span class=\"hljs-identifier\">NRF</span>.</span></span>on(&#x27;security&#x27;,s=&gt;print(<span class=\"hljs-string\">&quot;security&quot;</span>,<span class=\"hljs-module-access\"><span class=\"hljs-module\"><span class=\"hljs-identifier\">JSON</span>.</span></span>stringify(s)));\n<span class=\"hljs-module-access\"><span class=\"hljs-module\"><span class=\"hljs-identifier\">NRF</span>.</span></span>nfc<span class=\"hljs-constructor\">Pair(<span class=\"hljs-params\">bleKey</span>)</span>;\n<span class=\"hljs-module-access\"><span class=\"hljs-module\"><span class=\"hljs-identifier\">NRF</span>.</span></span>set<span class=\"hljs-constructor\">Security({<span class=\"hljs-params\">oob</span>:<span class=\"hljs-params\">bleKey</span>, <span class=\"hljs-params\">mitm</span>:<span class=\"hljs-params\">true</span>})</span>;\n</code></pre>\n",
      "!url": "http://www.espruino.com/Reference#l_NRF_nfcPair"
    },
    "nfcAndroidApp": {
      "!type": "fn(app: ?)",
      "!doc": "<p>Enables NFC with a record that will launch the given android app.</p>\n<p>For example:</p>\n<pre><code><span class=\"hljs-module-access\"><span class=\"hljs-module\"><span class=\"hljs-identifier\">NRF</span>.</span></span>nfc<span class=\"hljs-constructor\">AndroidApp(<span class=\"hljs-string\">&quot;no.nordicsemi.android.nrftoolbox&quot;</span>)</span>\n</code></pre>\n",
      "!url": "http://www.espruino.com/Reference#l_NRF_nfcAndroidApp"
    },
    "nfcRaw": {
      "!type": "fn(payload: ?)",
      "!doc": "<p>Enables NFC and starts advertising with Raw data. For example:</p>\n<pre><code>NRF.nfcRaw(<span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Uint8Array</span>([<span class=\"hljs-number\">193</span>, <span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">13</span>, <span class=\"hljs-number\">85</span>, <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">101</span>, <span class=\"hljs-number\">115</span>, <span class=\"hljs-number\">112</span>, <span class=\"hljs-number\">114</span>, <span class=\"hljs-number\">117</span>, <span class=\"hljs-number\">105</span>, <span class=\"hljs-number\">110</span>, <span class=\"hljs-number\">111</span>, <span class=\"hljs-number\">46</span>, <span class=\"hljs-number\">99</span>, <span class=\"hljs-number\">111</span>, <span class=\"hljs-number\">109</span>]));\n<span class=\"hljs-regexp\">//</span> same <span class=\"hljs-keyword\">as</span> NRF.nfcURL(<span class=\"hljs-string\">&quot;http://espruino.com&quot;</span>);\n</code></pre>\n",
      "!url": "http://www.espruino.com/Reference#l_NRF_nfcRaw"
    },
    "nfcStart": {
      "!type": "fn(payload: ?) -> ?",
      "!doc": "<p><strong>Advanced NFC Functionality.</strong> If you just want to advertise a URL, use\n<code>NRF.nfcURL</code> instead.</p>\n<p>Enables NFC and starts advertising. <code>NFCrx</code> events will be fired when data is\nreceived.</p>\n<pre><code><span class=\"hljs-module-access\"><span class=\"hljs-module\"><span class=\"hljs-identifier\">NRF</span>.</span></span>nfc<span class=\"hljs-constructor\">Start()</span>;\n</code></pre>\n",
      "!url": "http://www.espruino.com/Reference#l_NRF_nfcStart"
    },
    "nfcStop": {
      "!type": "fn()",
      "!doc": "<p><strong>Advanced NFC Functionality.</strong> If you just want to advertise a URL, use\n<code>NRF.nfcURL</code> instead.</p>\n<p>Disables NFC.</p>\n<pre><code><span class=\"hljs-module-access\"><span class=\"hljs-module\"><span class=\"hljs-identifier\">NRF</span>.</span></span>nfc<span class=\"hljs-constructor\">Stop()</span>;\n</code></pre>\n",
      "!url": "http://www.espruino.com/Reference#l_NRF_nfcStop"
    },
    "nfcSend": {
      "!type": "fn(payload: ?)",
      "!doc": "<p><strong>Advanced NFC Functionality.</strong> If you just want to advertise a URL, use\n<code>NRF.nfcURL</code> instead.</p>\n<p>Acknowledges the last frame and optionally transmits a response. If payload is\nan array, then a array.length byte nfc frame is sent. If payload is a int, then\na 4bit ACK/NACK is sent. <strong>Note:</strong> <code>nfcSend</code> should always be called after\nan <code>NFCrx</code> event.</p>\n<pre><code><span class=\"hljs-module-access\"><span class=\"hljs-module\"><span class=\"hljs-identifier\">NRF</span>.</span></span>nfc<span class=\"hljs-constructor\">Send(<span class=\"hljs-params\">new</span> Uint8Array([0x01, 0x02, <span class=\"hljs-operator\">...</span>])</span>);\n<span class=\"hljs-comment\">// or</span>\n<span class=\"hljs-module-access\"><span class=\"hljs-module\"><span class=\"hljs-identifier\">NRF</span>.</span></span>nfc<span class=\"hljs-constructor\">Send(0x0A)</span>;\n<span class=\"hljs-comment\">// or</span>\n<span class=\"hljs-module-access\"><span class=\"hljs-module\"><span class=\"hljs-identifier\">NRF</span>.</span></span>nfc<span class=\"hljs-constructor\">Send()</span>;\n</code></pre>\n",
      "!url": "http://www.espruino.com/Reference#l_NRF_nfcSend"
    },
    "sendHIDReport": {
      "!type": "fn(data: ?, callback: ?)",
      "!doc": "<p>Send a USB HID report. HID must first be enabled with <code>NRF.setServices({}, {hid: hid_report})</code></p>\n",
      "!url": "http://www.espruino.com/Reference#l_NRF_sendHIDReport"
    },
    "ancsIsActive": {
      "!type": "fn() -> bool",
      "!doc": "<p>Check if Apple Notification Center Service (ANCS) is currently active on the BLE\nconnection</p>\n",
      "!url": "http://www.espruino.com/Reference#l_NRF_ancsIsActive"
    },
    "ancsAction": {
      "!type": "fn(uid: number, positive: bool)",
      "!doc": "<p>Send an ANCS action for a specific Notification UID. Corresponds to\nposaction/negaction in the &#39;ANCS&#39; event that was received</p>\n",
      "!url": "http://www.espruino.com/Reference#l_NRF_ancsAction"
    },
    "ancsGetNotificationInfo": {
      "!type": "fn(uid: number) -> +Promise",
      "!doc": "<p>Get ANCS info for a notification event received via <code>E.ANCS</code>, e.g.:</p>\n<pre><code><span class=\"hljs-module-access\"><span class=\"hljs-module\"><span class=\"hljs-identifier\">E</span>.</span></span>on(&#x27;ANCS&#x27;,<span class=\"hljs-function\"> <span class=\"hljs-params\">event</span> =&gt;</span> {\n  <span class=\"hljs-module-access\"><span class=\"hljs-module\"><span class=\"hljs-identifier\">NRF</span>.</span></span>ancs<span class=\"hljs-constructor\">GetNotificationInfo( <span class=\"hljs-params\">event</span>.<span class=\"hljs-params\">uid</span> )</span>.<span class=\"hljs-keyword\">then</span>(a=&gt;print(<span class=\"hljs-string\">&quot;Notify&quot;</span>,<span class=\"hljs-module-access\"><span class=\"hljs-module\"><span class=\"hljs-identifier\">E</span>.</span></span><span class=\"hljs-keyword\">to</span><span class=\"hljs-constructor\">JS(<span class=\"hljs-params\">a</span>)</span>));\n});\n</code></pre>\n<p>Returns:</p>\n<pre><code>{\n  <span class=\"hljs-string\">&quot;uid&quot;</span> : <span class=\"hljs-built_in\">integer</span>,\n  <span class=\"hljs-string\">&quot;appId&quot;</span>: <span class=\"hljs-built_in\">string</span>,\n  <span class=\"hljs-string\">&quot;title&quot;</span>: <span class=\"hljs-built_in\">string</span>,\n  <span class=\"hljs-string\">&quot;subtitle&quot;</span>: <span class=\"hljs-built_in\">string</span>,\n  <span class=\"hljs-string\">&quot;message&quot;</span>: <span class=\"hljs-built_in\">string</span>,\n  <span class=\"hljs-string\">&quot;messageSize&quot;</span>: <span class=\"hljs-built_in\">string</span>,\n  <span class=\"hljs-string\">&quot;date&quot;</span>: <span class=\"hljs-built_in\">string</span>,\n  <span class=\"hljs-string\">&quot;posAction&quot;</span>: <span class=\"hljs-built_in\">string</span>,\n  <span class=\"hljs-string\">&quot;negAction&quot;</span>: <span class=\"hljs-built_in\">string</span>\n}\n</code></pre>\n",
      "!url": "http://www.espruino.com/Reference#l_NRF_ancsGetNotificationInfo"
    },
    "ancsGetAppInfo": {
      "!type": "fn(id: ?) -> +Promise",
      "!doc": "<p>Get ANCS info for an app (app id is available via <code>NRF.ancsGetNotificationInfo</code>)</p>\n<p>Promise returns:</p>\n<pre><code>{\n  <span class=\"hljs-string\">&quot;uid&quot;</span> : <span class=\"hljs-type\">int</span>,\n  <span class=\"hljs-string\">&quot;appId&quot;</span> : <span class=\"hljs-type\">string</span>,\n  <span class=\"hljs-string\">&quot;title&quot;</span> : <span class=\"hljs-type\">string</span>,\n  <span class=\"hljs-string\">&quot;subtitle&quot;</span> : <span class=\"hljs-type\">string</span>,\n  <span class=\"hljs-string\">&quot;message&quot;</span> : <span class=\"hljs-type\">string</span>,\n  <span class=\"hljs-string\">&quot;messageSize&quot;</span> : <span class=\"hljs-type\">string</span>,\n  <span class=\"hljs-string\">&quot;date&quot;</span> : <span class=\"hljs-type\">string</span>,\n  <span class=\"hljs-string\">&quot;posAction&quot;</span> : <span class=\"hljs-type\">string</span>,\n  <span class=\"hljs-string\">&quot;negAction&quot;</span> : <span class=\"hljs-type\">string</span>,\n  <span class=\"hljs-string\">&quot;name&quot;</span> : <span class=\"hljs-type\">string</span>,\n}\n</code></pre>\n",
      "!url": "http://www.espruino.com/Reference#l_NRF_ancsGetAppInfo"
    },
    "amsIsActive": {
      "!type": "fn() -> bool",
      "!doc": "<p>Check if Apple Media Service (AMS) is currently active on the BLE connection</p>\n",
      "!url": "http://www.espruino.com/Reference#l_NRF_amsIsActive"
    },
    "amsGetPlayerInfo": {
      "!type": "fn(id: ?) -> +Promise",
      "!doc": "<p>Get Apple Media Service (AMS) info for the current media player. &quot;playbackinfo&quot;\nreturns a concatenation of three comma-separated values:</p>\n<ul>\n<li>PlaybackState: a string that represents the integer value of the playback\nstate:<ul>\n<li>PlaybackStatePaused = 0</li>\n<li>PlaybackStatePlaying = 1</li>\n<li>PlaybackStateRewinding = 2</li>\n<li>PlaybackStateFastForwarding = 3</li>\n</ul>\n</li>\n<li>PlaybackRate: a string that represents the floating point value of the\nplayback rate.</li>\n<li>ElapsedTime: a string that represents the floating point value of the elapsed\ntime of the current track, in seconds</li>\n</ul>\n",
      "!url": "http://www.espruino.com/Reference#l_NRF_amsGetPlayerInfo"
    },
    "amsGetTrackInfo": {
      "!type": "fn(id: ?) -> +Promise",
      "!doc": "<p>Get Apple Media Service (AMS) info for the currently-playing track</p>\n",
      "!url": "http://www.espruino.com/Reference#l_NRF_amsGetTrackInfo"
    },
    "amsCommand": {
      "!type": "fn(id: ?)",
      "!doc": "<p>Send an AMS command to an Apple Media Service device to control music playback</p>\n<p>Command is one of play, pause, playpause, next, prev, volup, voldown, repeat,\nshuffle, skipforward, skipback, like, dislike, bookmark</p>\n",
      "!url": "http://www.espruino.com/Reference#l_NRF_amsCommand"
    },
    "ctsIsActive": {
      "!type": "fn() -> bool",
      "!doc": "<p>Check if Apple Current Time Service (CTS) is currently active on the BLE connection</p>\n",
      "!url": "http://www.espruino.com/Reference#l_NRF_ctsIsActive"
    },
    "ctsGetTime": {
      "!type": "fn() -> +Promise",
      "!doc": "<p>Read the time from CTS - creates an <code>NRF.on(&#39;CTS&#39;, ...)</code> event as well</p>\n<pre><code><span class=\"hljs-module-access\"><span class=\"hljs-module\"><span class=\"hljs-identifier\">NRF</span>.</span></span>cts<span class=\"hljs-constructor\">GetTime()</span>; <span class=\"hljs-comment\">// also returns a promise</span>\n</code></pre>\n",
      "!url": "http://www.espruino.com/Reference#l_NRF_ctsGetTime"
    },
    "requestDevice": {
      "!type": "fn(options: ?) -> +Promise",
      "!doc": "<p>Search for available devices matching the given filters. Since we have no UI\nhere, Espruino will pick the FIRST device it finds, or it&#39;ll call <code>catch</code>.</p>\n<p><code>options</code> can have the following fields:</p>\n<ul>\n<li><code>filters</code> - a list of filters that a device must match before it is returned\n(see below)</li>\n<li><code>timeout</code> - the maximum time to scan for in milliseconds (scanning stops when\na match is found. e.g. <code>NRF.requestDevice({ timeout:2000, filters: [ ... ] })</code></li>\n<li><code>active</code> - whether to perform active scanning (requesting &#39;scan response&#39;\npackets from any devices that are found). e.g. <code>NRF.requestDevice({ active:true, filters: [ ... ] })</code></li>\n<li><code>phy</code> - (NRF52833/NRF52840 only) the type of Bluetooth signals to scan for (can\nbe <code>&quot;1mbps/coded/both/2mbps&quot;</code>)<ul>\n<li><code>1mbps</code> (default) - standard Bluetooth LE advertising</li>\n<li><code>coded</code> - long range</li>\n<li><code>both</code> - standard and long range</li>\n<li><code>2mbps</code> - high speed 2mbps (not working)</li>\n</ul>\n</li>\n<li><code>extended</code> - (NRF52833/NRF52840 only) support receiving extended-length advertising\npackets (default=false, or true if phy isn&#39;t <code>&quot;1mbps&quot;</code>)</li>\n<li><code>window</code> - (2v22+) how long we scan for in milliseconds (default 100ms)</li>\n<li><code>interval</code> - (2v22+) how often we scan in milliseconds (default 100ms) - <code>window=interval=100</code>(default) is all the time. When\nscanning on both <code>1mbps</code> and <code>coded</code>, <code>interval</code> needs to be twice <code>window</code>.</li>\n</ul>\n<p><strong>NOTE:</strong> <code>timeout</code> and <code>active</code> are not part of the Web Bluetooth standard.</p>\n<p>The following filter types are implemented:</p>\n<ul>\n<li><code>services</code> - list of services as strings (all of which must match). 128 bit\nservices must be in the form &#39;01230123-0123-0123-0123-012301230123&#39;</li>\n<li><code>name</code> - exact device name</li>\n<li><code>namePrefix</code> - starting characters of device name</li>\n<li><code>id</code> - exact device address (<code>id:&quot;e9:53:86:09:89:99 random&quot;</code>) (this is\nEspruino-specific, and is not part of the Web Bluetooth spec)</li>\n<li><code>serviceData</code> - an object containing <strong>lowercase</strong> service characteristics which must all\nmatch (<code>serviceData:{&quot;1809&quot;:{}}</code>). Matching of actual service data is not\nsupported yet.</li>\n<li><code>manufacturerData</code> - an object containing manufacturer UUIDs which must all\nmatch (<code>manufacturerData:{0x0590:{}}</code>). Matching of actual manufacturer data\nis not supported yet.</li>\n</ul>\n<pre><code><span class=\"hljs-module-access\"><span class=\"hljs-module\"><span class=\"hljs-identifier\">NRF</span>.</span></span>request<span class=\"hljs-constructor\">Device({ <span class=\"hljs-params\">filters</span>: [{ <span class=\"hljs-params\">namePrefix</span>: &#x27;Puck.<span class=\"hljs-params\">js</span>&#x27; }] })</span>.<span class=\"hljs-keyword\">then</span>(<span class=\"hljs-keyword\">function</span>(device) {<span class=\"hljs-operator\"> ... </span>});\n<span class=\"hljs-comment\">// or</span>\n<span class=\"hljs-module-access\"><span class=\"hljs-module\"><span class=\"hljs-identifier\">NRF</span>.</span></span>request<span class=\"hljs-constructor\">Device({ <span class=\"hljs-params\">filters</span>: [{ <span class=\"hljs-params\">services</span>: [&#x27;1823&#x27;] }] })</span>.<span class=\"hljs-keyword\">then</span>(<span class=\"hljs-keyword\">function</span>(device) {<span class=\"hljs-operator\"> ... </span>});\n<span class=\"hljs-comment\">// or</span>\n<span class=\"hljs-module-access\"><span class=\"hljs-module\"><span class=\"hljs-identifier\">NRF</span>.</span></span>request<span class=\"hljs-constructor\">Device({ <span class=\"hljs-params\">filters</span>: [{ <span class=\"hljs-params\">manufacturerData</span>:{0x0590:{}} }] })</span>.<span class=\"hljs-keyword\">then</span>(<span class=\"hljs-keyword\">function</span>(device) {<span class=\"hljs-operator\"> ... </span>});\n</code></pre>\n<p>As a full example, to send data to another Puck.js to turn an LED on:</p>\n<pre><code><span class=\"hljs-keyword\">var</span> gatt;\nNRF.requestDevice({ <span class=\"hljs-attr\">filters</span>: [{ <span class=\"hljs-attr\">namePrefix</span>: <span class=\"hljs-string\">&#x27;Puck.js&#x27;</span> }] }).then(<span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">device</span>) {\n  <span class=\"hljs-keyword\">return</span> device.gatt.connect();\n}).then(<span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">g</span>) {\n  gatt = g;\n  <span class=\"hljs-keyword\">return</span> gatt.getPrimaryService(<span class=\"hljs-string\">&quot;6e400001-b5a3-f393-e0a9-e50e24dcca9e&quot;</span>);\n}).then(<span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">service</span>) {\n  <span class=\"hljs-keyword\">return</span> service.getCharacteristic(<span class=\"hljs-string\">&quot;6e400002-b5a3-f393-e0a9-e50e24dcca9e&quot;</span>);\n}).then(<span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">characteristic</span>) {\n  <span class=\"hljs-keyword\">return</span> characteristic.writeValue(<span class=\"hljs-string\">&quot;LED1.set()\\n&quot;</span>);\n}).then(<span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) {\n  gatt.disconnect();\n  <span class=\"hljs-built_in\">console</span>.<span class=\"hljs-built_in\">log</span>(<span class=\"hljs-string\">&quot;Done!&quot;</span>);\n});\n</code></pre>\n<p>Or slightly more concisely, using ES6 arrow functions:</p>\n<pre><code><span class=\"hljs-keyword\">var</span> gatt;\nNRF.requestDevice({ <span class=\"hljs-attr\">filters</span>: [{ <span class=\"hljs-attr\">namePrefix</span>: <span class=\"hljs-string\">&#x27;Puck.js&#x27;</span> }]}).then(\n  <span class=\"hljs-function\"><span class=\"hljs-params\">device</span> =&gt;</span> device.gatt.connect()).then(\n  <span class=\"hljs-function\"><span class=\"hljs-params\">g</span> =&gt;</span> (gatt=g).getPrimaryService(<span class=\"hljs-string\">&quot;6e400001-b5a3-f393-e0a9-e50e24dcca9e&quot;</span>)).then(\n  <span class=\"hljs-function\"><span class=\"hljs-params\">service</span> =&gt;</span> service.getCharacteristic(<span class=\"hljs-string\">&quot;6e400002-b5a3-f393-e0a9-e50e24dcca9e&quot;</span>)).then(\n  <span class=\"hljs-function\"><span class=\"hljs-params\">characteristic</span> =&gt;</span> characteristic.writeValue(<span class=\"hljs-string\">&quot;LED1.reset()\\n&quot;</span>)).then(\n  <span class=\"hljs-function\"><span class=\"hljs-params\">()</span> =&gt;</span> { gatt.disconnect(); <span class=\"hljs-built_in\">console</span>.<span class=\"hljs-built_in\">log</span>(<span class=\"hljs-string\">&quot;Done!&quot;</span>); } );\n</code></pre>\n<p>Note that you have to keep track of the <code>gatt</code> variable so that you can\ndisconnect the Bluetooth connection when you&#39;re done.</p>\n<p><strong>Note:</strong> Using a filter in <code>NRF.requestDevice</code> filters each advertising packet\nindividually. As soon as a matching advertisement is received,\n<code>NRF.requestDevice</code> resolves the promise and stops scanning. This means that if\nyou filter based on a service UUID and a device advertises with multiple packets\n(or a scan response when <code>active:true</code>) only the packet matching the filter is\nreturned - you may not get the device&#39;s name is that was in a separate packet.\nTo aggregate multiple packets you can use <code>NRF.findDevices</code>.</p>\n",
      "!url": "http://www.espruino.com/Reference#l_NRF_requestDevice"
    },
    "connect": {
      "!type": "fn(mac: ?, options: ?) -> +Promise",
      "!doc": "<p>Connect to a BLE device by MAC address. Returns a promise, the argument of which\nis the <code>BluetoothRemoteGATTServer</code> connection.</p>\n<pre><code><span class=\"hljs-variable\">NRF</span>.<span class=\"hljs-property\">connect</span>(<span class=\"hljs-string\">&quot;aa:bb:cc:dd:ee&quot;</span>).<span class=\"hljs-property\">then</span>(<span class=\"hljs-title function_\">function</span>(<span class=\"hljs-params\">server</span>) {\n  <span class=\"hljs-comment\">// ...</span>\n});\n</code></pre>\n<p>This has the same effect as calling <code>BluetoothDevice.gatt.connect</code> on a\n<code>BluetoothDevice</code> requested using <code>NRF.requestDevice</code>. It just allows you to\nspecify the address directly (without having to scan).</p>\n<p>You can use it as follows - this would connect to another Puck device and turn\nits LED on:</p>\n<pre><code><span class=\"hljs-keyword\">var</span> gatt;\nNRF.connect(<span class=\"hljs-string\">&quot;aa:bb:cc:dd:ee random&quot;</span>).then(<span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">g</span>) {\n  gatt = g;\n  <span class=\"hljs-keyword\">return</span> gatt.getPrimaryService(<span class=\"hljs-string\">&quot;6e400001-b5a3-f393-e0a9-e50e24dcca9e&quot;</span>);\n}).then(<span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">service</span>) {\n  <span class=\"hljs-keyword\">return</span> service.getCharacteristic(<span class=\"hljs-string\">&quot;6e400002-b5a3-f393-e0a9-e50e24dcca9e&quot;</span>);\n}).then(<span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">characteristic</span>) {\n  <span class=\"hljs-keyword\">return</span> characteristic.writeValue(<span class=\"hljs-string\">&quot;LED1.set()\\n&quot;</span>);\n}).then(<span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) {\n  gatt.disconnect();\n  <span class=\"hljs-built_in\">console</span>.<span class=\"hljs-built_in\">log</span>(<span class=\"hljs-string\">&quot;Done!&quot;</span>);\n});\n</code></pre>\n<p><strong>Note:</strong> Espruino Bluetooth devices use a type of BLE address known as &#39;random\nstatic&#39;, which is different to a &#39;public&#39; address. To connect to an Espruino\ndevice you&#39;ll need to use an address string of the form <code>&quot;aa:bb:cc:dd:ee random&quot;</code> rather than just <code>&quot;aa:bb:cc:dd:ee&quot;</code>. If you scan for devices with\n<code>NRF.findDevices</code>/<code>NRF.setScan</code> then addresses are already reported in the\ncorrect format.</p>\n",
      "!url": "http://www.espruino.com/Reference#l_NRF_connect"
    },
    "setWhitelist": {
      "!type": "fn(whitelisting: bool)",
      "!doc": "<p>If set to true, whenever a device bonds it will be added to the whitelist.</p>\n<p>When set to false, the whitelist is cleared and newly bonded devices will not be\nadded to the whitelist.</p>\n<p><strong>Note:</strong> This is remembered between <code>reset()</code>s but isn&#39;t remembered after\npower-on (you&#39;ll have to add it to <code>onInit()</code>.</p>\n",
      "!url": "http://www.espruino.com/Reference#l_NRF_setWhitelist"
    },
    "setConnectionInterval": {
      "!type": "fn(interval: ?)",
      "!doc": "<p>When connected, Bluetooth LE devices communicate at a set interval. Lowering the\ninterval (e.g. more packets/second) means a lower delay when sending data, higher\nbandwidth, but also more power consumption.</p>\n<p>By default, when connected as a peripheral Espruino automatically adjusts the\nconnection interval. When connected it&#39;s as fast as possible (7.5ms) but when\nidle for over a minute it drops to 200ms. On continued activity (&gt;1 BLE\noperation) the interval is raised to 7.5ms again.</p>\n<p>The options for <code>interval</code> are:</p>\n<ul>\n<li><code>undefined</code> / <code>&quot;auto&quot;</code> : (default) automatically adjust connection interval</li>\n<li><code>100</code> : set min and max connection interval to the same number (between 7.5ms\nand 4000ms)</li>\n<li><code>{minInterval:20, maxInterval:100}</code> : set min and max connection interval as a\nrange</li>\n</ul>\n<p>This configuration is not remembered during a <code>save()</code> - you will have to re-set\nit via <code>onInit</code>.</p>\n<p><strong>Note:</strong> If connecting to another device (as Central), you can use an extra\nargument to <code>NRF.connect</code> or <code>BluetoothRemoteGATTServer.connect</code> to specify a\nconnection interval.</p>\n<p><strong>Note:</strong> This overwrites any changes imposed by the deprecated\n<code>NRF.setLowPowerConnection</code></p>\n",
      "!url": "http://www.espruino.com/Reference#l_NRF_setConnectionInterval"
    },
    "setSecurity": {
      "!type": "fn(options: ?)",
      "!doc": "<p>Sets the security options used when connecting/pairing. This applies to both\ncentral <em>and</em> peripheral mode.</p>\n<pre><code>NRF.setSecurity({\n  display : <span class=\"hljs-type\">bool</span>  // <span class=\"hljs-keyword\">default</span> <span class=\"hljs-keyword\">false</span>, can this device display a passkey <span class=\"hljs-keyword\">on</span> a screen/etc?\n                  // - sent via the `BluetoothDevice.passkey` event\n  keyboard : <span class=\"hljs-type\">bool</span> // <span class=\"hljs-keyword\">default</span> <span class=\"hljs-keyword\">false</span>, can this device enter a passkey\n                  // - request sent via the `BluetoothDevice.passkeyRequest` event\n  pair : <span class=\"hljs-type\">bool</span> // <span class=\"hljs-keyword\">default</span> <span class=\"hljs-keyword\">true</span>, allow other devices <span class=\"hljs-keyword\">to</span> pair <span class=\"hljs-keyword\">with</span> this device\n  bond : <span class=\"hljs-type\">bool</span> // <span class=\"hljs-keyword\">default</span> <span class=\"hljs-keyword\">true</span>, <span class=\"hljs-keyword\">Perform</span> bonding\n              // This stores <span class=\"hljs-keyword\">info</span> <span class=\"hljs-keyword\">from</span> pairing <span class=\"hljs-keyword\">in</span> flash <span class=\"hljs-keyword\">and</span> allows reconnecting <span class=\"hljs-keyword\">without</span> <span class=\"hljs-keyword\">having</span> <span class=\"hljs-keyword\">to</span> pair <span class=\"hljs-keyword\">each</span> <span class=\"hljs-type\">time</span>\n  mitm : <span class=\"hljs-type\">bool</span> // <span class=\"hljs-keyword\">default</span> <span class=\"hljs-keyword\">false</span>, Man <span class=\"hljs-keyword\">In</span> The Middle protection\n  lesc : <span class=\"hljs-type\">bool</span> // <span class=\"hljs-keyword\">default</span> <span class=\"hljs-keyword\">false</span>, LE Secure Connections\n  passkey : // <span class=\"hljs-keyword\">default</span> &quot;&quot;, <span class=\"hljs-keyword\">or</span> a <span class=\"hljs-number\">6</span> digit passkey <span class=\"hljs-keyword\">to</span> use (display must be <span class=\"hljs-keyword\">true</span> <span class=\"hljs-keyword\">for</span> this)\n  oob : [<span class=\"hljs-number\">0.</span><span class=\"hljs-number\">.15</span>] // <span class=\"hljs-keyword\">if</span> specified, <span class=\"hljs-keyword\">Out</span> <span class=\"hljs-keyword\">Of</span> Band pairing <span class=\"hljs-keyword\">is</span> enabled <span class=\"hljs-keyword\">and</span>\n                // the <span class=\"hljs-number\">16</span> byte pairing code supplied here <span class=\"hljs-keyword\">is</span> used\n  encryptUart : <span class=\"hljs-type\">bool</span> // <span class=\"hljs-keyword\">default</span> <span class=\"hljs-keyword\">false</span> (unless oob <span class=\"hljs-keyword\">or</span> passkey specified)\n                     // This sets the BLE UART service such that it\n                     // <span class=\"hljs-keyword\">is</span> <span class=\"hljs-keyword\">encrypted</span> <span class=\"hljs-keyword\">and</span> can <span class=\"hljs-keyword\">only</span> be used <span class=\"hljs-keyword\">from</span> a paired <span class=\"hljs-keyword\">connection</span>\n  privacy : // <span class=\"hljs-keyword\">default</span> <span class=\"hljs-keyword\">false</span>, <span class=\"hljs-keyword\">true</span> <span class=\"hljs-keyword\">to</span> <span class=\"hljs-keyword\">enable</span> <span class=\"hljs-keyword\">with</span> (ideally sensible) defaults,\n            // <span class=\"hljs-keyword\">or</span> an <span class=\"hljs-keyword\">object</span> defining BLE privacy / random address <span class=\"hljs-keyword\">options</span> - see below <span class=\"hljs-keyword\">for</span> more <span class=\"hljs-keyword\">info</span>\n            // <span class=\"hljs-keyword\">only</span> available <span class=\"hljs-keyword\">if</span> Espruino was compiled <span class=\"hljs-keyword\">with</span> private address support (<span class=\"hljs-keyword\">like</span> <span class=\"hljs-keyword\">for</span> example <span class=\"hljs-keyword\">on</span> Bangle.js <span class=\"hljs-number\">2</span>)\n});\n</code></pre>\n<p><strong>NOTE:</strong> Some combinations of arguments will cause an error. For example\nsupplying a passkey without <code>display:1</code> is not allowed. If <code>display:1</code> is set\nyou do not require a physical display, the user just needs to know the passkey\nyou supplied.</p>\n<p>For instance, to require pairing and to specify a passkey, use:</p>\n<pre><code><span class=\"hljs-module-access\"><span class=\"hljs-module\"><span class=\"hljs-identifier\">NRF</span>.</span></span>set<span class=\"hljs-constructor\">Security({<span class=\"hljs-params\">passkey</span>:<span class=\"hljs-string\">&quot;123456&quot;</span>, <span class=\"hljs-params\">mitm</span>:1, <span class=\"hljs-params\">display</span>:1})</span>;\n</code></pre>\n<p>Or to require pairing and to display a PIN that the connecting device\nprovides, use:</p>\n<pre><code><span class=\"hljs-module-access\"><span class=\"hljs-module\"><span class=\"hljs-identifier\">NRF</span>.</span></span>set<span class=\"hljs-constructor\">Security({<span class=\"hljs-params\">mitm</span>:1, <span class=\"hljs-params\">display</span>:1})</span>;\n<span class=\"hljs-module-access\"><span class=\"hljs-module\"><span class=\"hljs-identifier\">NRF</span>.</span></span>on(<span class=\"hljs-string\">&quot;passkey&quot;</span>,<span class=\"hljs-function\"> <span class=\"hljs-params\">key</span> =&gt;</span> print(<span class=\"hljs-string\">&quot;Enter PIN: &quot;</span>, key));\n</code></pre>\n<p>However, while most devices will request a passkey for pairing at this point it\nis still possible for a device to connect without requiring one (e.g. using the\n&#39;NRF Connect&#39; app).</p>\n<p>To force a passkey you need to protect each characteristic you define with\n<code>NRF.setSecurity</code>. For instance the following code will <em>require</em> that the\npasskey <code>123456</code> is entered before the characteristic\n<code>9d020002-bf5f-1d1a-b52a-fe52091d5b12</code> can be read.</p>\n<pre><code>NRF.setSecurity({passkey:&quot;123456&quot;, mitm:<span class=\"hljs-number\">1</span>, display:<span class=\"hljs-number\">1</span>});\nNRF.setServices({\n  &quot;9d020001-bf5f-1d1a-b52a-fe52091d5b12&quot; : {\n    &quot;9d020002-bf5f-1d1a-b52a-fe52091d5b12&quot; : {\n      // readable <span class=\"hljs-keyword\">always</span>\n      <span class=\"hljs-keyword\">value</span> : &quot;Not Secret&quot;\n    },\n    &quot;9d020003-bf5f-1d1a-b52a-fe52091d5b12&quot; : {\n      // readable <span class=\"hljs-keyword\">only</span> once bonded\n      <span class=\"hljs-keyword\">value</span> : &quot;Secret&quot;,\n      readable : <span class=\"hljs-keyword\">true</span>,\n      <span class=\"hljs-keyword\">security</span>: {\n        <span class=\"hljs-keyword\">read</span>: {\n          mitm: <span class=\"hljs-keyword\">true</span>,\n          <span class=\"hljs-keyword\">encrypted</span>: <span class=\"hljs-keyword\">true</span>\n        }\n      }\n    },\n    &quot;9d020004-bf5f-1d1a-b52a-fe52091d5b12&quot; : {\n      // readable <span class=\"hljs-keyword\">always</span>\n      // writable <span class=\"hljs-keyword\">only</span> once bonded\n      <span class=\"hljs-keyword\">value</span> : &quot;Readable&quot;,\n      readable : <span class=\"hljs-keyword\">true</span>,\n      writable : <span class=\"hljs-keyword\">true</span>,\n      onWrite : <span class=\"hljs-keyword\">function</span>(evt) {\n        console.log(&quot;Wrote &quot;, evt.data);\n      },\n      <span class=\"hljs-keyword\">security</span>: {\n        <span class=\"hljs-keyword\">write</span>: {\n          mitm: <span class=\"hljs-keyword\">true</span>,\n          <span class=\"hljs-keyword\">encrypted</span>: <span class=\"hljs-keyword\">true</span>\n        }\n      }\n    }\n  }\n});\n</code></pre>\n<p><strong>Note:</strong> If <code>passkey</code> or <code>oob</code> is specified, the Nordic UART service (if\nenabled) will automatically be set to require encryption, but otherwise it is\nopen.</p>\n<p>On Bangle.js 2, the <code>privacy</code> parameter can be used to set this device&#39;s BLE privacy / random address settings.</p>\n<p>The privacy feature provides a way to avoid being tracked over a period of time.\nThis works by replacing the real BLE address with a random private address,\nthat automatically changes at a specified interval.</p>\n<p>If a <code>&quot;random_private_resolvable&quot;</code> address is used, that address is generated with the help\nof an identity resolving key (IRK), that is exchanged during bonding.\nThis allows a bonded device to still identify another device that is using a random private resolvable address.</p>\n<p>Note that, while this can help against being tracked, there are other ways a Bluetooth device can reveal its identity.\nFor example, the name or services it advertises may be unique enough.</p>\n<pre><code>NRF.setSecurity(<span class=\"hljs-punctuation\">{</span>\n<span class=\"hljs-symbol\">  privacy:</span> <span class=\"hljs-punctuation\">{</span>\n    mode : <span class=\"hljs-string\">&quot;off&quot;</span>/<span class=\"hljs-string\">&quot;device_privacy&quot;</span>/<span class=\"hljs-string\">&quot;network_privacy&quot;</span> <span class=\"hljs-comment\">// The privacy mode that should be used.</span>\n    addr_type : <span class=\"hljs-string\">&quot;random_private_resolvable&quot;</span>/<span class=\"hljs-string\">&quot;random_private_non_resolvable&quot;</span> <span class=\"hljs-comment\">// The type of address to use.</span>\n    addr_cycle_s : int <span class=\"hljs-comment\">// How often the address should change, in seconds.</span>\n  <span class=\"hljs-punctuation\">}</span>\n<span class=\"hljs-punctuation\">}</span>)<span class=\"hljs-punctuation\">;</span>\n<span class=\"hljs-comment\">// enabled with (ideally sensible) defaults of:</span>\n<span class=\"hljs-comment\">// mode: device_privacy</span>\n<span class=\"hljs-comment\">// addr_type: random_private_resolvable</span>\n<span class=\"hljs-comment\">// addr_cycle_s: 0 (use default address change interval)</span>\nNRF.setSecurity(<span class=\"hljs-punctuation\">{</span>\n<span class=\"hljs-symbol\">  privacy:</span> <span class=\"hljs-number\">1</span>\n<span class=\"hljs-punctuation\">}</span>)<span class=\"hljs-punctuation\">;</span>\n</code></pre>\n<p><code>mode</code> can be one of:</p>\n<ul>\n<li><code>&quot;off&quot;</code> - Use the real address.</li>\n<li><code>&quot;device_privacy&quot;</code> - Use a private address.</li>\n<li><code>&quot;network_privacy&quot;</code> - Use a private address,\n                  and reject a peer that uses its real address if we know that peer&#39;s IRK.</li>\n</ul>\n<p>If <code>mode</code> is <code>&quot;off&quot;</code>, all other fields are ignored and become optional.</p>\n<p><code>addr_type</code> can be one of:</p>\n<ul>\n<li><code>&quot;random_private_resolvable&quot;</code> - Address that can be resolved by a bonded peer that knows our IRK.</li>\n<li><code>&quot;random_private_non_resolvable&quot;</code> - Address that cannot be resolved.</li>\n</ul>\n<p><code>addr_cycle_s</code> must be an integer. Pass <code>0</code> to use the default address change interval.\nThe default is usually to change the address every 15 minutes (or 900 seconds).</p>\n",
      "!url": "http://www.espruino.com/Reference#l_NRF_setSecurity"
    },
    "getSecurityStatus": {
      "!type": "fn() -> +NRFSecurityStatus",
      "!doc": "<p>Return an object with information about the security state of the current\nperipheral connection:</p>\n<pre><code>{\n  connected       // The <span class=\"hljs-keyword\">connection</span> <span class=\"hljs-keyword\">is</span> active (<span class=\"hljs-keyword\">not</span> disconnected).\n  <span class=\"hljs-keyword\">encrypted</span>       // Communication <span class=\"hljs-keyword\">on</span> this link <span class=\"hljs-keyword\">is</span> <span class=\"hljs-keyword\">encrypted</span>.\n  mitm_protected  // The <span class=\"hljs-keyword\">encrypted</span> communication <span class=\"hljs-keyword\">is</span> <span class=\"hljs-keyword\">also</span> protected against man-<span class=\"hljs-keyword\">in</span>-the-middle attacks.\n  bonded          // The peer <span class=\"hljs-keyword\">is</span> bonded <span class=\"hljs-keyword\">with</span> us\n  advertising     // Are we currently advertising?\n  connected_addr  // <span class=\"hljs-keyword\">If</span> connected=<span class=\"hljs-keyword\">true</span>, the MAC address <span class=\"hljs-keyword\">of</span> the currently connected device\n  privacy         // <span class=\"hljs-keyword\">Current</span> BLE privacy / random address settings.\n                  // <span class=\"hljs-keyword\">Only</span> present <span class=\"hljs-keyword\">if</span> Espruino was compiled <span class=\"hljs-keyword\">with</span> private address support (<span class=\"hljs-keyword\">like</span> <span class=\"hljs-keyword\">for</span> example <span class=\"hljs-keyword\">on</span> Bangle.js <span class=\"hljs-number\">2</span>).\n}\n</code></pre>\n<p>If there is no active connection, <code>{connected:false}</code> will be returned.</p>\n<p>See <code>NRF.setSecurity</code> for information about negotiating a secure connection.</p>\n",
      "!url": "http://www.espruino.com/Reference#l_NRF_getSecurityStatus"
    },
    "startBonding": {
      "!type": "fn(forceRepair: bool) -> ?",
      "!doc": "",
      "!url": "http://www.espruino.com/Reference#l_NRF_startBonding"
    },
    "updateConnection": {
      "!type": "fn(options: ?)",
      "!doc": "<p>(2v28+) Update connection parameters on the current peripheral connection. Options can be:</p>\n<pre><code>{\n  phy : string <span class=\"hljs-regexp\">//</span> <span class=\"hljs-string\">&quot;1mpbs&quot;</span><span class=\"hljs-regexp\">/&quot;2mpbs&quot;/</span><span class=\"hljs-string\">&quot;coded&quot;</span>/<span class=\"hljs-string\">&quot;auto&quot;</span>\n}\n</code></pre>\n",
      "!url": "http://www.espruino.com/Reference#l_NRF_updateConnection"
    }
  },
  "Bluetooth": {
    "!type": "+Serial",
    "!doc": "<p>The Bluetooth Serial port - used when data is sent or received over Bluetooth\nSmart on nRF51/nRF52 chips.</p>\n",
    "!url": "http://www.espruino.com/Reference#l__global_Bluetooth"
  },
  "BluetoothDevice": {
    "!type": "fn()",
    "!doc": "<p>A Web Bluetooth-style device - you can request one using\n<code>NRF.requestDevice(options)</code></p>\n<p>For example:</p>\n<pre><code><span class=\"hljs-keyword\">var</span> gatt;\nNRF.requestDevice({ <span class=\"hljs-attr\">filters</span>: [{ <span class=\"hljs-attr\">name</span>: <span class=\"hljs-string\">&#x27;Puck.js abcd&#x27;</span> }] }).then(<span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">device</span>) {\n  <span class=\"hljs-built_in\">console</span>.<span class=\"hljs-built_in\">log</span>(<span class=\"hljs-string\">&quot;found device&quot;</span>);\n  <span class=\"hljs-keyword\">return</span> device.gatt.connect();\n}).then(<span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">g</span>) {\n  gatt = g;\n  <span class=\"hljs-built_in\">console</span>.<span class=\"hljs-built_in\">log</span>(<span class=\"hljs-string\">&quot;connected&quot;</span>);\n  <span class=\"hljs-keyword\">return</span> gatt.startBonding();\n}).then(<span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) {\n  <span class=\"hljs-built_in\">console</span>.<span class=\"hljs-built_in\">log</span>(<span class=\"hljs-string\">&quot;bonded&quot;</span>, gatt.getSecurityStatus());\n  gatt.disconnect();\n}).catch(<span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">e</span>) {\n  <span class=\"hljs-built_in\">console</span>.<span class=\"hljs-built_in\">log</span>(<span class=\"hljs-string\">&quot;ERROR&quot;</span>,e);\n});\n</code></pre>\n",
    "!url": "http://www.espruino.com/Reference#BluetoothDevice",
    "prototype": {
      "gatt": {
        "!type": "?",
        "!doc": "",
        "!url": "http://www.espruino.com/Reference#l_BluetoothDevice_gatt"
      },
      "rssi": {
        "!type": "bool",
        "!doc": "<p>This is set whenever the RSSI of the connection is changed. <code>BluetoothGATTServer.on(&quot;rssi&quot;, ...)</code> is also emitted.</p>\n<p><strong>This is not part of the Web Bluetooth Specification.</strong> It has been added\nspecifically for Espruino.</p>\n",
        "!url": "http://www.espruino.com/Reference#l_BluetoothDevice_rssi"
      },
      "sendPasskey": {
        "!type": "fn(passkey: ?)",
        "!doc": "<p>To be used as a response when the event <code>BluetoothDevice.sendPasskey</code> has been\nreceived.</p>\n<p><strong>This is not part of the Web Bluetooth Specification.</strong> It has been added\nspecifically for Espruino.</p>\n",
        "!url": "http://www.espruino.com/Reference#l_BluetoothDevice_sendPasskey"
      }
    }
  },
  "BluetoothRemoteGATTServer": {
    "!type": "fn()",
    "!doc": "<p>Web Bluetooth-style GATT server - get this using <code>NRF.connect(address)</code> or\n<code>NRF.requestDevice(options)</code> and <code>response.gatt.connect</code></p>\n<p><a href=\"https://webbluetoothcg.github.io/web-bluetooth/#bluetoothremotegattserver\">https://webbluetoothcg.github.io/web-bluetooth/#bluetoothremotegattserver</a></p>\n",
    "!url": "http://www.espruino.com/Reference#BluetoothRemoteGATTServer",
    "prototype": {
      "updateConnection": {
        "!type": "fn(options: ?)",
        "!doc": "<p>(2v28+) Update connection parameters on this central connection. Options can be:</p>\n<pre><code>{\n  phy : string <span class=\"hljs-regexp\">//</span> <span class=\"hljs-string\">&quot;1mpbs&quot;</span><span class=\"hljs-regexp\">/&quot;2mpbs&quot;/</span><span class=\"hljs-string\">&quot;coded&quot;</span>/<span class=\"hljs-string\">&quot;auto&quot;</span>\n}\n</code></pre>\n<p><strong>This is not part of the Web Bluetooth Specification.</strong> It has been added\nspecifically for Espruino.</p>\n",
        "!url": "http://www.espruino.com/Reference#l_BluetoothRemoteGATTServer_updateConnection"
      },
      "connect": {
        "!type": "fn(options: ?) -> +Promise",
        "!doc": "<p>Connect to a BLE device - returns a promise, the argument of which is the\n<code>BluetoothRemoteGATTServer</code> connection.</p>\n<p>See <a href=\"/Reference#l_NRF_requestDevice\"><code>NRF.requestDevice</code></a> for usage examples.</p>\n<p><code>options</code> is an optional object containing:</p>\n<pre><code>{\n   minInterval <span class=\"hljs-comment\">// min connection interval in milliseconds, 7.5 ms to 4 s</span>\n   maxInterval <span class=\"hljs-comment\">// max connection interval in milliseconds, 7.5 ms to 4 s</span>\n   slaveLatency : <span class=\"hljs-built_in\">int</span> <span class=\"hljs-comment\">// (2v28+) number of connection intervals missed before connection is closed, default 4 (or 2 if pre-2v28)</span>\n   phy : <span class=\"hljs-string\">&quot;1mbps/coded/both/2mbps&quot;</span>\n     <span class=\"hljs-comment\">// (2v26+, NRF52833/NRF52840 only) the type of Bluetooth signals to scan for</span>\n     <span class=\"hljs-comment\">// `1mbps` (default) - standard Bluetooth LE advertising</span>\n     <span class=\"hljs-comment\">// `coded` - long range</span>\n     <span class=\"hljs-comment\">// `both` - standard and long range</span>\n     <span class=\"hljs-comment\">// `2mbps` - high speed 2mbps (not working)</span>\n   extended : <span class=\"hljs-built_in\">bool</span>\n     <span class=\"hljs-comment\">// (2v26+, NRF52833/NRF52840 only) support receiving extended-length advertising (default = false, or true if phy isn&#x27;t `&quot;1mbps&quot;`)</span>\n   <span class=\"hljs-built_in\">window</span> : <span class=\"hljs-built_in\">int</span>\n     <span class=\"hljs-comment\">// (2v26+) how long we scan for in milliseconds (default 100ms)</span>\n   interval : <span class=\"hljs-built_in\">int</span>\n     <span class=\"hljs-comment\">// (2v26+) how often we scan in milliseconds (default 100ms)</span>\n     <span class=\"hljs-comment\">// When scanning on both `1mbps` and `coded`, `interval` needs to be twice `window`.</span>\n}\n</code></pre>\n<p>By default the interval is 20-200ms (or 500-1000ms if\n<code>NRF.setLowPowerConnection(true)</code> was called. During connection Espruino\nnegotiates with the other device to find a common interval that can be used.</p>\n<p>For instance calling:</p>\n<pre><code><span class=\"hljs-module-access\"><span class=\"hljs-module\"><span class=\"hljs-identifier\">NRF</span>.</span></span>request<span class=\"hljs-constructor\">Device({ <span class=\"hljs-params\">filters</span>: [{ <span class=\"hljs-params\">namePrefix</span>: &#x27;Pixl.<span class=\"hljs-params\">js</span>&#x27; }] })</span>.<span class=\"hljs-keyword\">then</span>(<span class=\"hljs-keyword\">function</span>(device) {\n  return device.gatt.connect({minInterval:<span class=\"hljs-number\">7.5</span>, maxInterval:<span class=\"hljs-number\">7.5</span>});\n}).<span class=\"hljs-keyword\">then</span>(<span class=\"hljs-keyword\">function</span>(g) {\n</code></pre>\n<p>will force the connection to use the fastest connection interval possible (as\nlong as the device at the other end supports it).</p>\n<p><strong>Note:</strong> The Web Bluetooth spec states that if a device hasn&#39;t advertised its\nname, when connected to a device the central (in this case Espruino) should\nautomatically retrieve the name from the corresponding characteristic (<code>0x2a00</code>\non service <code>0x1800</code>). Espruino does not automatically do this.</p>\n",
        "!url": "http://www.espruino.com/Reference#l_BluetoothRemoteGATTServer_connect"
      },
      "connected": {
        "!type": "bool",
        "!doc": "",
        "!url": "http://www.espruino.com/Reference#l_BluetoothRemoteGATTServer_connected"
      },
      "handle": {
        "!type": "number",
        "!doc": "",
        "!url": "http://www.espruino.com/Reference#l_BluetoothRemoteGATTServer_handle"
      },
      "disconnect": {
        "!type": "fn() -> +Promise",
        "!doc": "<p>Disconnect from a previously connected BLE device connected with\n<code>BluetoothRemoteGATTServer.connect</code> - this does not disconnect from something\nthat has connected to the Espruino.</p>\n<p><strong>Note:</strong> While <code>.disconnect</code> is standard Web Bluetooth, in the spec it returns\nundefined not a <code>Promise</code> for implementation reasons. In Espruino we return a\n<code>Promise</code> to make it easier to detect when Espruino is free to connect to\nsomething else.</p>\n",
        "!url": "http://www.espruino.com/Reference#l_BluetoothRemoteGATTServer_disconnect"
      },
      "startBonding": {
        "!type": "fn(forceRePair: bool) -> +Promise",
        "!doc": "<p>Start negotiating bonding (secure communications) with the connected device, and\nreturn a Promise that is completed on success or failure.</p>\n<pre><code><span class=\"hljs-keyword\">var</span> gatt;\nNRF.requestDevice({ <span class=\"hljs-attr\">filters</span>: [{ <span class=\"hljs-attr\">name</span>: <span class=\"hljs-string\">&#x27;Puck.js abcd&#x27;</span> }] }).then(<span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">device</span>) {\n  <span class=\"hljs-built_in\">console</span>.<span class=\"hljs-built_in\">log</span>(<span class=\"hljs-string\">&quot;found device&quot;</span>);\n  <span class=\"hljs-keyword\">return</span> device.gatt.connect();\n}).then(<span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">g</span>) {\n  gatt = g;\n  <span class=\"hljs-built_in\">console</span>.<span class=\"hljs-built_in\">log</span>(<span class=\"hljs-string\">&quot;connected&quot;</span>);\n  <span class=\"hljs-keyword\">return</span> gatt.startBonding();\n}).then(<span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) {\n  <span class=\"hljs-built_in\">console</span>.<span class=\"hljs-built_in\">log</span>(<span class=\"hljs-string\">&quot;bonded&quot;</span>, gatt.getSecurityStatus());\n  gatt.disconnect();\n}).catch(<span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">e</span>) {\n  <span class=\"hljs-built_in\">console</span>.<span class=\"hljs-built_in\">log</span>(<span class=\"hljs-string\">&quot;ERROR&quot;</span>,e);\n});\n</code></pre>\n<p><strong>This is not part of the Web Bluetooth Specification.</strong> It has been added\nspecifically for Espruino.</p>\n",
        "!url": "http://www.espruino.com/Reference#l_BluetoothRemoteGATTServer_startBonding"
      },
      "getSecurityStatus": {
        "!type": "fn() -> +NRFSecurityStatus",
        "!doc": "<p>Return an object with information about the security state of the current\nconnection:</p>\n<pre><code>{\n  connected       // The <span class=\"hljs-keyword\">connection</span> <span class=\"hljs-keyword\">is</span> active (<span class=\"hljs-keyword\">not</span> disconnected).\n  <span class=\"hljs-keyword\">encrypted</span>       // Communication <span class=\"hljs-keyword\">on</span> this link <span class=\"hljs-keyword\">is</span> <span class=\"hljs-keyword\">encrypted</span>.\n  mitm_protected  // The <span class=\"hljs-keyword\">encrypted</span> communication <span class=\"hljs-keyword\">is</span> <span class=\"hljs-keyword\">also</span> protected against man-<span class=\"hljs-keyword\">in</span>-the-middle attacks.\n  bonded          // The peer <span class=\"hljs-keyword\">is</span> bonded <span class=\"hljs-keyword\">with</span> us\n}\n</code></pre>\n<p>See <code>BluetoothRemoteGATTServer.startBonding</code> for information about negotiating a\nsecure connection.</p>\n<p><strong>This is not part of the Web Bluetooth Specification.</strong> It has been added\nspecifically for Puck.js.</p>\n",
        "!url": "http://www.espruino.com/Reference#l_BluetoothRemoteGATTServer_getSecurityStatus"
      },
      "getPrimaryService": {
        "!type": "fn(service: ?) -> +Promise",
        "!doc": "<p>See <code>NRF.connect</code> for usage examples.</p>\n",
        "!url": "http://www.espruino.com/Reference#l_BluetoothRemoteGATTServer_getPrimaryService"
      },
      "getPrimaryServices": {
        "!type": "fn() -> +Promise",
        "!doc": "",
        "!url": "http://www.espruino.com/Reference#l_BluetoothRemoteGATTServer_getPrimaryServices"
      },
      "setRSSIHandler": {
        "!type": "fn(callback: ?)",
        "!doc": "<p>Start/stop listening for RSSI values on the active GATT connection</p>\n<pre><code><span class=\"hljs-comment\">// Start listening for RSSI value updates</span>\ngattServer.setRSSIHandler(<span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rssi</span>) {\n  <span class=\"hljs-built_in\">console</span>.<span class=\"hljs-built_in\">log</span>(rssi); <span class=\"hljs-comment\">// prints -85 (or similar)</span>\n});\n<span class=\"hljs-comment\">// Stop listening</span>\ngattServer.setRSSIHandler();\n</code></pre>\n<p>RSSI is the &#39;Received Signal Strength Indication&#39; in dBm</p>\n",
        "!url": "http://www.espruino.com/Reference#l_BluetoothRemoteGATTServer_setRSSIHandler"
      }
    }
  },
  "BluetoothRemoteGATTService": {
    "!type": "fn()",
    "!doc": "<p>Web Bluetooth-style GATT service - get this using\n<code>BluetoothRemoteGATTServer.getPrimaryService(s)</code></p>\n<p><a href=\"https://webbluetoothcg.github.io/web-bluetooth/#bluetoothremotegattservice\">https://webbluetoothcg.github.io/web-bluetooth/#bluetoothremotegattservice</a></p>\n",
    "!url": "http://www.espruino.com/Reference#BluetoothRemoteGATTService",
    "prototype": {
      "device": {
        "!type": "?",
        "!doc": "",
        "!url": "http://www.espruino.com/Reference#l_BluetoothRemoteGATTService_device"
      },
      "getCharacteristic": {
        "!type": "fn(characteristic: ?) -> +Promise",
        "!doc": "<p>See <code>NRF.connect</code> for usage examples.</p>\n",
        "!url": "http://www.espruino.com/Reference#l_BluetoothRemoteGATTService_getCharacteristic"
      },
      "getCharacteristics": {
        "!type": "fn() -> +Promise",
        "!doc": "",
        "!url": "http://www.espruino.com/Reference#l_BluetoothRemoteGATTService_getCharacteristics"
      }
    }
  },
  "BluetoothRemoteGATTCharacteristic": {
    "!type": "fn()",
    "!doc": "<p>Web Bluetooth-style GATT characteristic - get this using\n<code>BluetoothRemoteGATTService.getCharacteristic(s)</code></p>\n<p><a href=\"https://webbluetoothcg.github.io/web-bluetooth/#bluetoothremotegattcharacteristic\">https://webbluetoothcg.github.io/web-bluetooth/#bluetoothremotegattcharacteristic</a></p>\n",
    "!url": "http://www.espruino.com/Reference#BluetoothRemoteGATTCharacteristic",
    "prototype": {
      "service": {
        "!type": "?",
        "!doc": "",
        "!url": "http://www.espruino.com/Reference#l_BluetoothRemoteGATTCharacteristic_service"
      },
      "writeValue": {
        "!type": "fn(data: ?) -> +Promise",
        "!doc": "<p>Write a characteristic&#39;s value</p>\n<pre><code><span class=\"hljs-keyword\">var</span> device;\nNRF.connect(device_address).then(<span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">d</span>) {\n  device = d;\n  <span class=\"hljs-keyword\">return</span> d.getPrimaryService(<span class=\"hljs-string\">&quot;service_uuid&quot;</span>);\n}).then(<span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">s</span>) {\n  <span class=\"hljs-built_in\">console</span>.<span class=\"hljs-built_in\">log</span>(<span class=\"hljs-string\">&quot;Service &quot;</span>,s);\n  <span class=\"hljs-keyword\">return</span> s.getCharacteristic(<span class=\"hljs-string\">&quot;characteristic_uuid&quot;</span>);\n}).then(<span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">c</span>) {\n  <span class=\"hljs-keyword\">return</span> c.writeValue(<span class=\"hljs-string\">&quot;Hello&quot;</span>);\n}).then(<span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">d</span>) {\n  device.disconnect();\n}).catch(<span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) {\n  <span class=\"hljs-built_in\">console</span>.<span class=\"hljs-built_in\">log</span>(<span class=\"hljs-string\">&quot;Something&#x27;s broken.&quot;</span>);\n});\n</code></pre>\n",
        "!url": "http://www.espruino.com/Reference#l_BluetoothRemoteGATTCharacteristic_writeValue"
      },
      "readValue": {
        "!type": "fn() -> +Promise",
        "!doc": "<p>Read a characteristic&#39;s value, return a promise containing a <code>DataView</code></p>\n<pre><code><span class=\"hljs-keyword\">var</span> device;\nNRF.connect(device_address).then(<span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">d</span>) {\n  device = d;\n  <span class=\"hljs-keyword\">return</span> d.getPrimaryService(<span class=\"hljs-string\">&quot;service_uuid&quot;</span>);\n}).then(<span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">s</span>) {\n  <span class=\"hljs-built_in\">console</span>.<span class=\"hljs-built_in\">log</span>(<span class=\"hljs-string\">&quot;Service &quot;</span>,s);\n  <span class=\"hljs-keyword\">return</span> s.getCharacteristic(<span class=\"hljs-string\">&quot;characteristic_uuid&quot;</span>);\n}).then(<span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">c</span>) {\n  <span class=\"hljs-keyword\">return</span> c.readValue();\n}).then(<span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">d</span>) {\n  <span class=\"hljs-built_in\">console</span>.<span class=\"hljs-built_in\">log</span>(<span class=\"hljs-string\">&quot;Got:&quot;</span>, JSON.stringify(d.<span class=\"hljs-built_in\">buffer</span>));\n  device.disconnect();\n}).catch(<span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) {\n  <span class=\"hljs-built_in\">console</span>.<span class=\"hljs-built_in\">log</span>(<span class=\"hljs-string\">&quot;Something&#x27;s broken.&quot;</span>);\n});\n</code></pre>\n",
        "!url": "http://www.espruino.com/Reference#l_BluetoothRemoteGATTCharacteristic_readValue"
      },
      "startNotifications": {
        "!type": "fn() -> +Promise",
        "!doc": "<p>Starts notifications - whenever this characteristic&#39;s value changes, a\n<code>characteristicvaluechanged</code> event is fired and <code>characteristic.value</code> will then\ncontain the new value as a <code>DataView</code>.</p>\n<pre><code><span class=\"hljs-keyword\">var</span> device;\nNRF.connect(device_address).then(<span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">d</span>) {\n  device = d;\n  <span class=\"hljs-keyword\">return</span> d.getPrimaryService(<span class=\"hljs-string\">&quot;service_uuid&quot;</span>);\n}).then(<span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">s</span>) {\n  <span class=\"hljs-built_in\">console</span>.<span class=\"hljs-built_in\">log</span>(<span class=\"hljs-string\">&quot;Service &quot;</span>,s);\n  <span class=\"hljs-keyword\">return</span> s.getCharacteristic(<span class=\"hljs-string\">&quot;characteristic_uuid&quot;</span>);\n}).then(<span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">c</span>) {\n  c.on(<span class=\"hljs-string\">&#x27;characteristicvaluechanged&#x27;</span>, <span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">event</span>) {\n    <span class=\"hljs-built_in\">console</span>.<span class=\"hljs-built_in\">log</span>(<span class=\"hljs-string\">&quot;-&gt; &quot;</span>,event.target.value); <span class=\"hljs-comment\">// this is a DataView</span>\n  });\n  <span class=\"hljs-keyword\">return</span> c.startNotifications();\n}).then(<span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">d</span>) {\n  <span class=\"hljs-built_in\">console</span>.<span class=\"hljs-built_in\">log</span>(<span class=\"hljs-string\">&quot;Waiting for notifications&quot;</span>);\n}).catch(<span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) {\n  <span class=\"hljs-built_in\">console</span>.<span class=\"hljs-built_in\">log</span>(<span class=\"hljs-string\">&quot;Something&#x27;s broken.&quot;</span>);\n});\n</code></pre>\n<p>For example, to listen to the output of another Puck.js&#39;s Nordic Serial port\nservice, you can use:</p>\n<pre><code><span class=\"hljs-keyword\">var</span> gatt;\nNRF.connect(<span class=\"hljs-string\">&quot;pu:ck:js:ad:dr:es random&quot;</span>).then(<span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">g</span>) {\n  gatt = g;\n  <span class=\"hljs-keyword\">return</span> gatt.getPrimaryService(<span class=\"hljs-string\">&quot;6e400001-b5a3-f393-e0a9-e50e24dcca9e&quot;</span>);\n}).then(<span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">service</span>) {\n  <span class=\"hljs-keyword\">return</span> service.getCharacteristic(<span class=\"hljs-string\">&quot;6e400003-b5a3-f393-e0a9-e50e24dcca9e&quot;</span>);\n}).then(<span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">characteristic</span>) {\n  characteristic.on(<span class=\"hljs-string\">&#x27;characteristicvaluechanged&#x27;</span>, <span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">event</span>) {\n    <span class=\"hljs-built_in\">console</span>.<span class=\"hljs-built_in\">log</span>(<span class=\"hljs-string\">&quot;RX: &quot;</span>+JSON.stringify(event.target.value.<span class=\"hljs-built_in\">buffer</span>));\n  });\n  <span class=\"hljs-keyword\">return</span> characteristic.startNotifications();\n}).then(<span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) {\n  <span class=\"hljs-built_in\">console</span>.<span class=\"hljs-built_in\">log</span>(<span class=\"hljs-string\">&quot;Done!&quot;</span>);\n});\n</code></pre>\n",
        "!url": "http://www.espruino.com/Reference#l_BluetoothRemoteGATTCharacteristic_startNotifications"
      },
      "stopNotifications": {
        "!type": "fn() -> +Promise",
        "!doc": "<p>Stop notifications (that were requested with\n<code>BluetoothRemoteGATTCharacteristic.startNotifications</code>)</p>\n",
        "!url": "http://www.espruino.com/Reference#l_BluetoothRemoteGATTCharacteristic_stopNotifications"
      }
    }
  },
  "Puck": {
    "!type": "fn()",
    "!doc": "<p>Class containing <a href=\"http://www.puck-js.com\">Puck.js&#39;s</a> utility functions.</p>\n",
    "!url": "http://www.espruino.com/Reference#Puck",
    "mag": {
      "!type": "fn() -> ?",
      "!doc": "<p>Turn on the magnetometer, take a single reading, and then turn it off again.\nIf the magnetometer is already on (with <code>Puck.magOn()</code>) then the last reading\nis returned.</p>\n<p>An object of the form <code>{x,y,z}</code> is returned containing magnetometer readings.\nDue to residual magnetism in the Puck and magnetometer itself, with no magnetic\nfield the Puck will not return <code>{x:0,y:0,z:0}</code>.</p>\n<p>Instead, it&#39;s up to you to figure out what the &#39;zero value&#39; is for your Puck in\nyour location and to then subtract that from the value returned. If you&#39;re not\ntrying to measure the Earth&#39;s magnetic field then it&#39;s a good idea to just take\na reading at startup and use that.</p>\n<p>With the aerial at the top of the board, the <code>y</code> reading is vertical, <code>x</code> is\nhorizontal, and <code>z</code> is through the board.</p>\n<p>Readings are in increments of 0.1 micro Tesla (uT). The Earth&#39;s magnetic field\nvaries from around 25-60 uT, so the reading will vary by 250 to 600 depending on\nlocation.</p>\n",
      "!url": "http://www.espruino.com/Reference#l_Puck_mag"
    },
    "magTemp": {
      "!type": "fn() -> number",
      "!doc": "<p>Turn on the magnetometer, take a single temperature reading from the MAG3110\nchip, and then turn it off again.</p>\n<p>(If the magnetometer is already on, this just returns the last reading obtained)</p>\n<p><code>E.getTemperature()</code> uses the microcontroller&#39;s temperature sensor, but this\nuses the magnetometer&#39;s.</p>\n<p>The reading obtained is an integer (so no decimal places), but the sensitivity\nis factory trimmed. to 1&deg;C, however the temperature offset isn&#39;t - so\nabsolute readings may still need calibrating.</p>\n",
      "!url": "http://www.espruino.com/Reference#l_Puck_magTemp"
    },
    "magOn": {
      "!type": "fn(samplerate: number)",
      "!doc": "<p>Turn the magnetometer on and start periodic sampling. Samples will then cause a\n&#39;mag&#39; event on &#39;Puck&#39;:</p>\n<pre><code>Puck.magOn();\nPuck.on(<span class=\"hljs-string\">&#x27;mag&#x27;</span>, <span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">xyz</span>) {\n  <span class=\"hljs-built_in\">console</span>.<span class=\"hljs-built_in\">log</span>(xyz);\n  <span class=\"hljs-comment\">// {x:..., y:..., z:...}</span>\n});\n<span class=\"hljs-comment\">// Turn events off with Puck.magOff();</span>\n</code></pre>\n<p>This call will be ignored if the sampling is already on.</p>\n<p>If given an argument, the sample rate is set (if not, it&#39;s at 0.63 Hz). The\nsample rate must be one of the following (resulting in the given power\nconsumption):</p>\n<ul>\n<li>80 Hz - 900uA</li>\n<li>40 Hz - 550uA</li>\n<li>20 Hz - 275uA</li>\n<li>10 Hz - 137uA</li>\n<li>5 Hz - 69uA</li>\n<li>2.5 Hz - 34uA</li>\n<li>1.25 Hz - 17uA</li>\n<li>0.63 Hz - 8uA</li>\n<li>0.31 Hz - 8uA</li>\n<li>0.16 Hz - 8uA</li>\n<li>0.08 Hz - 8uA</li>\n</ul>\n<p>When the battery level drops too low while sampling is turned on, the\nmagnetometer may stop sampling without warning, even while other Puck functions\ncontinue uninterrupted.</p>\n<p>Check out <a href=\"http://www.espruino.com/Puck.js#on-board-peripherals\">the Puck.js page on the\nmagnetometer</a> for more\ninformation.</p>\n",
      "!url": "http://www.espruino.com/Reference#l_Puck_magOn"
    },
    "magOff": {
      "!type": "fn()",
      "!doc": "<p>Turn the magnetometer off</p>\n",
      "!url": "http://www.espruino.com/Reference#l_Puck_magOff"
    },
    "magWr": {
      "!type": "fn(reg: number, data: number)",
      "!doc": "<p>Writes a register on the LIS3MDL / MAX3110 Magnetometer. Can be used for\nconfiguring advanced functions.</p>\n<p>Check out <a href=\"http://www.espruino.com/Puck.js#on-board-peripherals\">the Puck.js page on the\nmagnetometer</a> for more\ninformation and links to modules that use this function.</p>\n",
      "!url": "http://www.espruino.com/Reference#l_Puck_magWr"
    },
    "magRd": {
      "!type": "fn(reg: number) -> number",
      "!doc": "<p>Reads a register from the LIS3MDL / MAX3110 Magnetometer. Can be used for\nconfiguring advanced functions.</p>\n<p>Check out <a href=\"http://www.espruino.com/Puck.js#on-board-peripherals\">the Puck.js page on the\nmagnetometer</a> for more\ninformation and links to modules that use this function.</p>\n",
      "!url": "http://www.espruino.com/Reference#l_Puck_magRd"
    },
    "getTemperature": {
      "!type": "fn() -> number",
      "!doc": "<p>On Puck.js v2.0 this will use the on-board PCT2075TP temperature sensor, but on\nPuck.js the less accurate on-chip Temperature sensor is used.</p>\n",
      "!url": "http://www.espruino.com/Reference#l_Puck_getTemperature"
    },
    "accelOn": {
      "!type": "fn(samplerate: number)",
      "!doc": "<p>Accepted values are:</p>\n<ul>\n<li>1.6 Hz (no Gyro) - 40uA (2v05 and later firmware)</li>\n<li>12.5 Hz (with Gyro)- 350uA</li>\n<li>26 Hz (with Gyro) - 450 uA</li>\n<li>52 Hz (with Gyro) - 600 uA</li>\n<li>104 Hz (with Gyro) - 900 uA</li>\n<li>208 Hz (with Gyro) - 1500 uA</li>\n<li>416 Hz (with Gyro) (not recommended)</li>\n<li>833 Hz (with Gyro) (not recommended)</li>\n<li>1660 Hz (with Gyro) (not recommended)</li>\n</ul>\n<p>Once <code>Puck.accelOn()</code> is called, the <code>Puck.accel</code> event will be called each time\ndata is received. <code>Puck.accelOff()</code> can be called to turn the accelerometer off.</p>\n<p>For instance to light the red LED whenever Puck.js is face up:</p>\n<pre><code><span class=\"hljs-module-access\"><span class=\"hljs-module\"><span class=\"hljs-identifier\">Puck</span>.</span></span>on(&#x27;accel&#x27;, <span class=\"hljs-keyword\">function</span>(a) {\n digital<span class=\"hljs-constructor\">Write(LED1, <span class=\"hljs-params\">a</span>.<span class=\"hljs-params\">acc</span>.<span class=\"hljs-params\">z</span> &gt; 0)</span>;\n});\n<span class=\"hljs-module-access\"><span class=\"hljs-module\"><span class=\"hljs-identifier\">Puck</span>.</span></span>accel<span class=\"hljs-constructor\">On()</span>;\n</code></pre>\n<p>Check out <a href=\"http://www.espruino.com/Puck.js#on-board-peripherals\">the Puck.js page on the\naccelerometer</a> for more\ninformation.</p>\n<p><strong>Note:</strong> Puck.js cannot currently read every sample from the\naccelerometer at sample rates above 208Hz.</p>\n",
      "!url": "http://www.espruino.com/Reference#l_Puck_accelOn"
    },
    "accelOff": {
      "!type": "fn()",
      "!doc": "<p>Turn the accelerometer off after it has been turned on by <code>Puck.accelOn()</code>.</p>\n<p>Check out <a href=\"http://www.espruino.com/Puck.js#on-board-peripherals\">the Puck.js page on the\naccelerometer</a> for more\ninformation.</p>\n",
      "!url": "http://www.espruino.com/Reference#l_Puck_accelOff"
    },
    "accel": {
      "!type": "fn() -> ?",
      "!doc": "<p>Turn on the accelerometer, take a single reading, and then turn it off again.</p>\n<p>The values reported are the raw values from the chip. In normal configuration:</p>\n<ul>\n<li>accelerometer: full-scale (32768) is 4g, so you need to divide by 8192 to get\ncorrectly scaled values</li>\n<li>gyro: full-scale (32768) is 245 dps, so you need to divide by 134 to get\ncorrectly scaled values</li>\n</ul>\n<p>If taking more than one reading, we&#39;d suggest you use <code>Puck.accelOn()</code> and the\n<code>Puck.accel</code> event.</p>\n",
      "!url": "http://www.espruino.com/Reference#l_Puck_accel"
    },
    "accelWr": {
      "!type": "fn(reg: number, data: number)",
      "!doc": "<p>Writes a register on the LSM6DS3TR-C Accelerometer. Can be used for configuring\nadvanced functions.</p>\n<p>Check out <a href=\"http://www.espruino.com/Puck.js#on-board-peripherals\">the Puck.js page on the\naccelerometer</a> for more\ninformation and links to modules that use this function.</p>\n",
      "!url": "http://www.espruino.com/Reference#l_Puck_accelWr"
    },
    "accelRd": {
      "!type": "fn(reg: number) -> number",
      "!doc": "<p>Reads a register from the LSM6DS3TR-C Accelerometer. Can be used for configuring\nadvanced functions.</p>\n<p>Check out <a href=\"http://www.espruino.com/Puck.js#on-board-peripherals\">the Puck.js page on the\naccelerometer</a> for more\ninformation and links to modules that use this function.</p>\n",
      "!url": "http://www.espruino.com/Reference#l_Puck_accelRd"
    },
    "IR": {
      "!type": "fn(data: ?, cathode: +Pin, anode: +Pin)",
      "!doc": "<p>Transmit the given set of IR pulses - data should be an array of pulse times in\nmilliseconds (as <code>[on, off, on, off, on, etc]</code>).</p>\n<p>For example <code>Puck.IR(pulseTimes)</code> - see <a href=\"http://www.espruino.com/Puck.js+Infrared\">http://www.espruino.com/Puck.js+Infrared</a>\nfor a full example.</p>\n<p>You can also attach an external LED to Puck.js, in which case you can just\nexecute <code>Puck.IR(pulseTimes, led_cathode, led_anode)</code></p>\n<p>It is also possible to just supply a single pin for IR transmission with\n<code>Puck.IR(pulseTimes, led_anode)</code> (on 2v05 and above).</p>\n",
      "!url": "http://www.espruino.com/Reference#l_Puck_IR"
    },
    "capSense": {
      "!type": "fn(tx: +Pin, rx: +Pin) -> number",
      "!doc": "<p>Capacitive sense - the higher the capacitance, the higher the number returned.</p>\n<p>If called without arguments, a value depending on the capacitance of what is\nattached to pin D11 will be returned. If you attach a length of wire to D11,\nyou&#39;ll be able to see a higher value returned when your hand is near the wire\nthan when it is away.</p>\n<p>You can also supply pins to use yourself, however if you do this then the TX pin\nmust be connected to RX pin and sense plate via a roughly 1MOhm resistor.</p>\n<p>When not supplying pins, Puck.js uses an internal resistor between D12(tx) and\nD11(rx).</p>\n",
      "!url": "http://www.espruino.com/Reference#l_Puck_capSense"
    },
    "light": {
      "!type": "fn() -> number",
      "!doc": "<p>Return a light value based on the light the red LED is seeing.</p>\n<p><strong>Note:</strong> If called more than 5 times per second, the received light value may\nnot be accurate.</p>\n",
      "!url": "http://www.espruino.com/Reference#l_Puck_light"
    },
    "getBatteryPercentage": {
      "!type": "fn() -> number",
      "!doc": "<p><strong>DEPRECATED</strong> - Please use <code>E.getBattery()</code> instead.</p>\n<p>Return an approximate battery percentage remaining based on a normal CR2032\nbattery (2.8 - 2.2v).</p>\n",
      "!url": "http://www.espruino.com/Reference#l_Puck_getBatteryPercentage"
    },
    "selfTest": {
      "!type": "fn() -> bool",
      "!doc": "<p>Run a self-test, and return true for a pass. This checks for shorts between\npins, so your Puck shouldn&#39;t have anything connected to it.</p>\n<p><strong>Note:</strong> This self-test auto starts if you hold the button on your Puck down\nwhile inserting the battery, leave it pressed for 3 seconds (while the green LED\nis lit) and release it soon after all LEDs turn on. 5 red blinks is a fail, 5\ngreen is a pass.</p>\n<p>If the self test fails, it&#39;ll set the Puck.js Bluetooth advertising name to\n<code>Puck.js !ERR</code> where ERR is a 3 letter error code.</p>\n",
      "!url": "http://www.espruino.com/Reference#l_Puck_selfTest"
    }
  },
  "CC3000": {
    "!type": "fn()",
    "!doc": "",
    "!url": "http://www.espruino.com/Reference#CC3000",
    "connect": {
      "!type": "fn(spi: ?, cs: +Pin, en: +Pin, irq: +Pin) -> +WLAN",
      "!doc": "<p>Initialise the CC3000 and return a WLAN object</p>\n",
      "!url": "http://www.espruino.com/Reference#l_CC3000_connect"
    }
  },
  "WLAN": {
    "!type": "fn()",
    "!doc": "<p>An instantiation of a WiFi network adaptor</p>\n",
    "!url": "http://www.espruino.com/Reference#WLAN",
    "prototype": {
      "connect": {
        "!type": "fn(ap: ?, key: ?, callback: ?) -> bool",
        "!doc": "<p>Connect to a wireless network</p>\n",
        "!url": "http://www.espruino.com/Reference#l_WLAN_connect"
      },
      "disconnect": {
        "!type": "fn()",
        "!doc": "<p>Completely uninitialise and power down the CC3000. After this you&#39;ll have to use\n<code>require(&quot;CC3000&quot;).connect()</code> again.</p>\n",
        "!url": "http://www.espruino.com/Reference#l_WLAN_disconnect"
      },
      "reconnect": {
        "!type": "fn()",
        "!doc": "<p>Completely uninitialise and power down the CC3000, then reconnect to the old\naccess point.</p>\n",
        "!url": "http://www.espruino.com/Reference#l_WLAN_reconnect"
      },
      "getIP": {
        "!type": "fn() -> ?",
        "!doc": "<p>Get the current IP address</p>\n",
        "!url": "http://www.espruino.com/Reference#l_WLAN_getIP"
      },
      "setIP": {
        "!type": "fn(options: ?) -> bool",
        "!doc": "<p>Set the current IP address for get an IP from DHCP (if no options object is\nspecified).</p>\n<p><strong>Note:</strong> Changes are written to non-volatile memory, but will only take effect\nafter calling <code>wlan.reconnect()</code></p>\n",
        "!url": "http://www.espruino.com/Reference#l_WLAN_setIP"
      }
    }
  },
  "TelnetServer": {
    "!type": "fn()",
    "!doc": "<p>This library implements a telnet console for the Espruino interpreter. It\nrequires a network connection, e.g. Wifi, and **currently only functions on the\nESP8266 and on Linux **. It uses port 23 on the ESP8266 and port 2323 on Linux.</p>\n<p><strong>Note:</strong> To enable on Linux, run <code>./espruino --telnet</code></p>\n",
    "!url": "http://www.espruino.com/Reference#TelnetServer",
    "setOptions": {
      "!type": "fn(options: ?)",
      "!doc": "",
      "!url": "http://www.espruino.com/Reference#l_TelnetServer_setOptions"
    }
  },
  "ESP8266": {
    "!type": "fn()",
    "!doc": "<p>Class containing utility functions for the\n<a href=\"http://www.espruino.com/EspruinoESP8266\">ESP8266</a></p>\n",
    "!url": "http://www.espruino.com/Reference#ESP8266",
    "ping": {
      "!type": "fn(ipAddr: ?, pingCallback: ?)",
      "!doc": "<p><strong>DEPRECATED</strong> - please use <code>Wifi.ping</code> instead.</p>\n<p>Perform a network ping request. The parameter can be either a String or a\nnumeric IP address.</p>\n",
      "!url": "http://www.espruino.com/Reference#l_ESP8266_ping"
    },
    "reboot": {
      "!type": "fn()",
      "!doc": "<p>Perform a hardware reset/reboot of the esp8266.</p>\n",
      "!url": "http://www.espruino.com/Reference#l_ESP8266_reboot"
    },
    "getResetInfo": {
      "!type": "fn() -> ?",
      "!doc": "<p>At boot time the esp8266&#39;s firmware captures the cause of the reset/reboot. This\nfunction returns this information in an object with the following fields:</p>\n<ul>\n<li><code>reason</code>: &quot;power on&quot;, &quot;wdt reset&quot;, &quot;exception&quot;, &quot;soft wdt&quot;, &quot;restart&quot;, &quot;deep\nsleep&quot;, or &quot;reset pin&quot;</li>\n<li><code>exccause</code>: exception cause</li>\n<li><code>epc1</code>, <code>epc2</code>, <code>epc3</code>: instruction pointers</li>\n<li><code>excvaddr</code>: address being accessed</li>\n<li><code>depc</code>: (?)</li>\n</ul>\n",
      "!url": "http://www.espruino.com/Reference#l_ESP8266_getResetInfo"
    },
    "logDebug": {
      "!type": "fn(enable: bool)",
      "!doc": "<p>Enable or disable the logging of debug information. A value of <code>true</code> enables\ndebug logging while a value of <code>false</code> disables debug logging. Debug output is\nsent to UART1 (gpio2).</p>\n",
      "!url": "http://www.espruino.com/Reference#l_ESP8266_logDebug"
    },
    "setLog": {
      "!type": "fn(mode: number)",
      "!doc": "<p>Set the debug logging mode. It can be disabled (which frees ~1.2KB of heap),\nenabled in-memory only, or in-memory and output to a UART.</p>\n",
      "!url": "http://www.espruino.com/Reference#l_ESP8266_setLog"
    },
    "printLog": {
      "!type": "fn()",
      "!doc": "<p>Prints the contents of the debug log to the console.</p>\n",
      "!url": "http://www.espruino.com/Reference#l_ESP8266_printLog"
    },
    "readLog": {
      "!type": "fn()",
      "!doc": "<p>Returns one line from the log or up to 128 characters.</p>\n",
      "!url": "http://www.espruino.com/Reference#l_ESP8266_readLog"
    },
    "dumpSocketInfo": {
      "!type": "fn()",
      "!doc": "<p>Dumps info about all sockets to the log. This is for troubleshooting the socket\nimplementation.</p>\n",
      "!url": "http://www.espruino.com/Reference#l_ESP8266_dumpSocketInfo"
    },
    "setCPUFreq": {
      "!type": "fn(freq: ?)",
      "!doc": "<p><strong>Note:</strong> This is deprecated. Use <code>E.setClock(80/160)</code> <strong>Note:</strong> Set the\noperating frequency of the ESP8266 processor. The default is 160Mhz.</p>\n<p><strong>Warning</strong>: changing the cpu frequency affects the timing of some I/O\noperations, notably of software SPI and I2C, so things may be a bit slower at\n80Mhz.</p>\n",
      "!url": "http://www.espruino.com/Reference#l_ESP8266_setCPUFreq"
    },
    "getState": {
      "!type": "fn() -> ?",
      "!doc": "<p>Returns an object that contains details about the state of the ESP8266 with the\nfollowing fields:</p>\n<ul>\n<li><code>sdkVersion</code> - Version of the SDK.</li>\n<li><code>cpuFrequency</code> - CPU operating frequency in Mhz.</li>\n<li><code>freeHeap</code> - Amount of free heap in bytes.</li>\n<li><code>maxCon</code> - Maximum number of concurrent connections.</li>\n<li><code>flashMap</code> - Configured flash size&amp;map: &#39;512KB:256/256&#39; .. <code>&#39;4MB:512/512&#39;</code></li>\n<li><code>flashKB</code> - Configured flash size in KB as integer</li>\n<li><code>flashChip</code> - Type of flash chip as string with manufacturer &amp; chip, ex: <code>&#39;0xEF 0x4016&#39;</code></li>\n</ul>\n",
      "!url": "http://www.espruino.com/Reference#l_ESP8266_getState"
    },
    "getFreeFlash": {
      "!type": "fn() -> ?",
      "!doc": "<p><strong>Note:</strong> This is deprecated. Use <code>require(&quot;Flash&quot;).getFree()</code></p>\n",
      "!url": "http://www.espruino.com/Reference#l_ESP8266_getFreeFlash"
    },
    "crc32": {
      "!type": "fn(arrayOfData: ?) -> ?",
      "!doc": "",
      "!url": "http://www.espruino.com/Reference#l_ESP8266_crc32"
    },
    "neopixelWrite": {
      "!type": "fn(pin: +Pin, arrayOfData: ?)",
      "!doc": "<p><strong>This function is deprecated.</strong> Please use <code>require(&quot;neopixel&quot;).write(pin, data)</code> instead</p>\n",
      "!url": "http://www.espruino.com/Reference#l_ESP8266_neopixelWrite"
    },
    "deepSleep": {
      "!type": "fn(micros: ?, option: ?)",
      "!doc": "<p>Put the ESP8266 into &#39;deep sleep&#39; for the given number of microseconds, reducing\npower consumption drastically.</p>\n<p>meaning of option values:</p>\n<p>0 - the 108th Byte of init parameter decides whether RF calibration will be\nperformed or not.</p>\n<p>1 - run RF calibration after waking up. Power consumption is high.</p>\n<p>2 - no RF calibration after waking up. Power consumption is low.</p>\n<p>4 - no RF after waking up. Power consumption is the lowest.</p>\n<p><strong>Note:</strong> unlike normal Espruino boards&#39; &#39;deep sleep&#39; mode, ESP8266 deep sleep\nactually turns off the processor. After the given number of microseconds have\nelapsed, the ESP8266 will restart as if power had been turned off and then back\non. <em>All contents of RAM will be lost</em>. Connect GPIO 16 to RST to enable wakeup.</p>\n<p><strong>Special:</strong> 0 microseconds cause sleep forever until external wakeup RST pull\ndown occurs.</p>\n",
      "!url": "http://www.espruino.com/Reference#l_ESP8266_deepSleep"
    }
  },
  "http": {
    "!type": "fn()",
    "!doc": "<p>This library allows you to create http servers and make http requests</p>\n<p>In order to use this, you will need an extra module to get network connectivity\nsuch as the <a href=\"/CC3000\">TI CC3000</a> or <a href=\"/WIZnet\">WIZnet W5500</a>.</p>\n<p>This is designed to be a cut-down version of the <a href=\"http://nodejs.org/api/http.html\">node.js\nlibrary</a>. Please see the <a href=\"/Internet\">Internet</a>\npage for more information on how to use it.</p>\n",
    "!url": "http://www.espruino.com/Reference#http",
    "createServer": {
      "!type": "fn(callback: ?) -> +httpSrv",
      "!doc": "<p>Create an HTTP Server</p>\n<p>When a request to the server is made, the callback is called. In the callback\nyou can use the methods on the response (<code>httpSRs</code>) to send data. You can also\nadd <code>request.on(&#39;data&#39;,function() { ... })</code> to listen for POSTed data</p>\n",
      "!url": "http://www.espruino.com/Reference#l_http_createServer"
    },
    "request": {
      "!type": "fn(options: ?, callback: ?) -> +httpCRq",
      "!doc": "<p>Create an HTTP Request - <code>end()</code> must be called on it to complete the operation.\n<code>options</code> is of the form:</p>\n<pre><code><span class=\"hljs-keyword\">var</span> options = {\n    <span class=\"hljs-attr\">host</span>: <span class=\"hljs-string\">&#x27;example.com&#x27;</span>, <span class=\"hljs-comment\">// host name</span>\n    port: <span class=\"hljs-number\">80</span>,            <span class=\"hljs-comment\">// (optional) port, defaults to 80</span>\n    path: <span class=\"hljs-string\">&#x27;/&#x27;</span>,           <span class=\"hljs-comment\">// path sent to server</span>\n    method: <span class=\"hljs-string\">&#x27;GET&#x27;</span>,       <span class=\"hljs-comment\">// HTTP command sent to server (must be uppercase &#x27;GET&#x27;, &#x27;POST&#x27;, etc)</span>\n    protocol: <span class=\"hljs-string\">&#x27;http:&#x27;</span>,   <span class=\"hljs-comment\">// optional protocol - https: or http:</span>\n    headers: { <span class=\"hljs-attr\">key</span> : value, <span class=\"hljs-attr\">key</span> : value } <span class=\"hljs-comment\">// (optional) HTTP headers</span>\n  };\n<span class=\"hljs-keyword\">var</span> req = require(<span class=\"hljs-string\">&quot;http&quot;</span>).request(options, <span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">res</span>) {\n  res.on(<span class=\"hljs-string\">&#x27;data&#x27;</span>, <span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">data</span>) {\n    <span class=\"hljs-built_in\">console</span>.<span class=\"hljs-built_in\">log</span>(<span class=\"hljs-string\">&quot;HTTP&gt; &quot;</span>+data);\n  });\n  res.on(<span class=\"hljs-string\">&#x27;close&#x27;</span>, <span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">data</span>) {\n    <span class=\"hljs-built_in\">console</span>.<span class=\"hljs-built_in\">log</span>(<span class=\"hljs-string\">&quot;Connection closed&quot;</span>);\n  });\n});\n<span class=\"hljs-comment\">// You can req.write(...) here if your request requires data to be sent.</span>\nreq.end(); <span class=\"hljs-comment\">// called to finish the HTTP request and get the response</span>\n</code></pre>\n<p>You can easily pre-populate <code>options</code> from a URL using <code>var options = url.parse(&quot;http://www.example.com/foo.html&quot;)</code></p>\n<p>There&#39;s an example of using <a href=\"/Internet#http-post\"><code>http.request</code> for HTTP POST\nhere</a></p>\n<p><strong>Note:</strong> if TLS/HTTPS is enabled, options can have <code>ca</code>, <code>key</code> and <code>cert</code>\nfields. See <code>tls.connect</code> for more information about these and how to use them.</p>\n",
      "!url": "http://www.espruino.com/Reference#l_http_request"
    },
    "get": {
      "!type": "fn(options: ?, callback: ?) -> +httpCRq",
      "!doc": "<p>Request a webpage over HTTP - a convenience function for <code>http.request()</code> that\nmakes sure the HTTP command is &#39;GET&#39;, and that calls <code>end</code> automatically.</p>\n<pre><code>require(<span class=\"hljs-string\">&quot;http&quot;</span>).get(<span class=\"hljs-string\">&quot;http://pur3.co.uk/hello.txt&quot;</span>, <span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">res</span>) {\n  res.on(<span class=\"hljs-string\">&#x27;data&#x27;</span>, <span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">data</span>) {\n    <span class=\"hljs-built_in\">console</span>.<span class=\"hljs-built_in\">log</span>(<span class=\"hljs-string\">&quot;HTTP&gt; &quot;</span>+data);\n  });\n  res.on(<span class=\"hljs-string\">&#x27;close&#x27;</span>, <span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">data</span>) {\n    <span class=\"hljs-built_in\">console</span>.<span class=\"hljs-built_in\">log</span>(<span class=\"hljs-string\">&quot;Connection closed&quot;</span>);\n  });\n});\n</code></pre>\n<p>See <code>http.request()</code> and <a href=\"/Internet\">the Internet page</a> for more usage examples.</p>\n",
      "!url": "http://www.espruino.com/Reference#l_http_get"
    }
  },
  "httpSrv": {
    "!type": "fn()",
    "!doc": "<p>The HTTP server created by <code>require(&#39;http&#39;).createServer</code></p>\n",
    "!url": "http://www.espruino.com/Reference#httpSrv",
    "prototype": {
      "listen": {
        "!type": "fn(port: number) -> ?",
        "!doc": "<p>Start listening for new HTTP connections on the given port</p>\n",
        "!url": "http://www.espruino.com/Reference#l_httpSrv_listen"
      },
      "close": {
        "!type": "fn()",
        "!doc": "<p>Stop listening for new HTTP connections</p>\n",
        "!url": "http://www.espruino.com/Reference#l_httpSrv_close"
      }
    }
  },
  "httpSRq": {
    "!type": "fn()",
    "!doc": "<p>The HTTP server request</p>\n",
    "!url": "http://www.espruino.com/Reference#httpSRq",
    "prototype": {
      "headers": {
        "!type": "?",
        "!doc": "<p>The headers to sent to the server with this HTTP request.</p>\n",
        "!url": "http://www.espruino.com/Reference#l_httpSRq_headers"
      },
      "method": {
        "!type": "?",
        "!doc": "<p>The HTTP method used with this request. Often <code>&quot;GET&quot;</code>.</p>\n",
        "!url": "http://www.espruino.com/Reference#l_httpSRq_method"
      },
      "url": {
        "!type": "?",
        "!doc": "<p>The URL requested in this HTTP request, for instance:</p>\n<ul>\n<li><code>&quot;/&quot;</code> - the main page</li>\n<li><code>&quot;/favicon.ico&quot;</code> - the web page&#39;s icon</li>\n</ul>\n",
        "!url": "http://www.espruino.com/Reference#l_httpSRq_url"
      },
      "available": {
        "!type": "fn() -> number",
        "!doc": "<p>Return how many bytes are available to read. If there is already a listener for\ndata, this will always return 0.</p>\n",
        "!url": "http://www.espruino.com/Reference#l_httpSRq_available"
      },
      "read": {
        "!type": "fn(chars: number) -> ?",
        "!doc": "<p>Return a string containing characters that have been received</p>\n",
        "!url": "http://www.espruino.com/Reference#l_httpSRq_read"
      },
      "pipe": {
        "!type": "fn(destination: ?, options: ?)",
        "!doc": "<p>Pipe this to a stream (an object with a &#39;write&#39; method)</p>\n",
        "!url": "http://www.espruino.com/Reference#l_httpSRq_pipe"
      }
    }
  },
  "httpSRs": {
    "!type": "fn()",
    "!doc": "<p>The HTTP server response</p>\n",
    "!url": "http://www.espruino.com/Reference#httpSRs",
    "prototype": {
      "headers": {
        "!type": "?",
        "!doc": "<p>The headers to send back along with the HTTP response.</p>\n<p>The default contents are:</p>\n<pre><code><span class=\"hljs-punctuation\">{</span>\n  <span class=\"hljs-attr\">&quot;Connection&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-string\">&quot;close&quot;</span>\n <span class=\"hljs-punctuation\">}</span>\n</code></pre>\n",
        "!url": "http://www.espruino.com/Reference#l_httpSRs_headers"
      },
      "write": {
        "!type": "fn(data: ?) -> bool",
        "!doc": "<p>This function writes the <code>data</code> argument as a string. Data that is passed in\n(including arrays) will be converted to a string with the normal JavaScript\n<code>toString</code> method. For more information about sending binary data see\n<code>Socket.write</code></p>\n",
        "!url": "http://www.espruino.com/Reference#l_httpSRs_write"
      },
      "end": {
        "!type": "fn(data: ?)",
        "!doc": "<p>See <code>Socket.write</code> for more information about the data argument</p>\n",
        "!url": "http://www.espruino.com/Reference#l_httpSRs_end"
      },
      "writeHead": {
        "!type": "fn(statusCode: number, headers: ?)",
        "!doc": "<p>Send the given status code and headers. If not explicitly called this will be\ndone automatically the first time data is written to the response.</p>\n<p>This cannot be called twice, or after data has already been sent in the\nresponse.</p>\n",
        "!url": "http://www.espruino.com/Reference#l_httpSRs_writeHead"
      },
      "setHeader": {
        "!type": "fn(name: ?, value: ?)",
        "!doc": "<p>Set a value to send in the header of this HTTP response. This updates the\n<code>httpSRs.headers</code> property.</p>\n<p>Any headers supplied to <code>writeHead</code> will overwrite any headers with the same\nname.</p>\n",
        "!url": "http://www.espruino.com/Reference#l_httpSRs_setHeader"
      }
    }
  },
  "httpCRq": {
    "!type": "fn()",
    "!doc": "<p>The HTTP client request, returned by <code>http.request()</code> and <code>http.get()</code>.</p>\n",
    "!url": "http://www.espruino.com/Reference#httpCRq",
    "prototype": {
      "write": {
        "!type": "fn(data: ?) -> bool",
        "!doc": "<p>This function writes the <code>data</code> argument as a string. Data that is passed in\n(including arrays) will be converted to a string with the normal JavaScript\n<code>toString</code> method. For more information about sending binary data see\n<code>Socket.write</code></p>\n",
        "!url": "http://www.espruino.com/Reference#l_httpCRq_write"
      },
      "end": {
        "!type": "fn(data: ?)",
        "!doc": "<p>Finish this HTTP request - optional data to append as an argument</p>\n<p>See <code>Socket.write</code> for more information about the data argument</p>\n",
        "!url": "http://www.espruino.com/Reference#l_httpCRq_end"
      }
    }
  },
  "httpCRs": {
    "!type": "fn()",
    "!doc": "<p>The HTTP client response, passed to the callback of <code>http.request()</code> an\n<code>http.get()</code>.</p>\n",
    "!url": "http://www.espruino.com/Reference#httpCRs",
    "prototype": {
      "headers": {
        "!type": "?",
        "!doc": "<p>The headers received along with the HTTP response</p>\n",
        "!url": "http://www.espruino.com/Reference#l_httpCRs_headers"
      },
      "statusCode": {
        "!type": "?",
        "!doc": "<p>The HTTP response&#39;s status code - usually <code>&quot;200&quot;</code> if all went well</p>\n",
        "!url": "http://www.espruino.com/Reference#l_httpCRs_statusCode"
      },
      "statusMessage": {
        "!type": "?",
        "!doc": "<p>The HTTP response&#39;s status message - Usually <code>&quot;OK&quot;</code> if all went well</p>\n",
        "!url": "http://www.espruino.com/Reference#l_httpCRs_statusMessage"
      },
      "httpVersion": {
        "!type": "?",
        "!doc": "<p>The HTTP version reported back by the server - usually <code>&quot;1.1&quot;</code></p>\n",
        "!url": "http://www.espruino.com/Reference#l_httpCRs_httpVersion"
      },
      "available": {
        "!type": "fn() -> number",
        "!doc": "<p>Return how many bytes are available to read. If there is a &#39;data&#39; event handler,\nthis will always return 0.</p>\n",
        "!url": "http://www.espruino.com/Reference#l_httpCRs_available"
      },
      "read": {
        "!type": "fn(chars: number) -> ?",
        "!doc": "<p>Return a string containing characters that have been received</p>\n",
        "!url": "http://www.espruino.com/Reference#l_httpCRs_read"
      },
      "pipe": {
        "!type": "fn(destination: ?, options: ?)",
        "!doc": "<p>Pipe this to a stream (an object with a &#39;write&#39; method)</p>\n",
        "!url": "http://www.espruino.com/Reference#l_httpCRs_pipe"
      }
    }
  },
  "Wifi": {
    "!type": "fn()",
    "!doc": "<p>The Wifi library is designed to control the Wifi interface. It supports\nfunctionality such as connecting to wifi networks, getting network information,\nstarting an access point, etc.</p>\n<p>It is available on these devices:</p>\n<ul>\n<li><a href=\"http://www.espruino.com/WiFi#using-wifi\">Espruino WiFi</a></li>\n<li><a href=\"http://www.espruino.com/EspruinoESP8266\">ESP8266</a></li>\n<li><a href=\"http://www.espruino.com/ESP32\">ESP32</a></li>\n</ul>\n<p><strong>Certain features may or may not be implemented on your device</strong> however we\nhave documented what is available and what isn&#39;t.</p>\n<p>If you&#39;re not using one of the devices above, a separate WiFi library is\nprovided. For instance:</p>\n<ul>\n<li>An <a href=\"http://www.espruino.com/ESP8266#software\">ESP8266 connected to an Espruino\nboard</a></li>\n<li>An <a href=\"http://www.espruino.com/CC3000\">CC3000 WiFi Module</a></li>\n</ul>\n<p><a href=\"http://www.espruino.com/Internet#related-pages\">Other ways of connecting to the\nnet</a> such as GSM, Ethernet and\nLTE have their own libraries.</p>\n<p>You can use the WiFi library as follows:</p>\n<pre><code><span class=\"hljs-keyword\">var</span> wifi = require(<span class=\"hljs-string\">&quot;Wifi&quot;</span>);\nwifi.connect(<span class=\"hljs-string\">&quot;my-ssid&quot;</span>, {<span class=\"hljs-attr\">password</span>:<span class=\"hljs-string\">&quot;my-pwd&quot;</span>}, <span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">ap</span>){ <span class=\"hljs-built_in\">console</span>.<span class=\"hljs-built_in\">log</span>(<span class=\"hljs-string\">&quot;connected:&quot;</span>, ap); });\n</code></pre>\n<p>On ESP32/ESP8266 if you want the connection to happen automatically at boot, add\n<code>wifi.save();</code>. On other platforms, place <code>wifi.connect</code> in a function called\n<code>onInit</code>.</p>\n",
    "!url": "http://www.espruino.com/Reference#Wifi",
    "disconnect": {
      "!type": "fn(callback: ?)",
      "!doc": "<p>Disconnect the wifi station from an access point and disable the station mode.\nIt is OK to call <code>disconnect</code> to turn off station mode even if no connection\nexists (for example, connection attempts may be failing). Station mode can be\nre-enabled by calling <code>connect</code> or <code>scan</code>.</p>\n",
      "!url": "http://www.espruino.com/Reference#l_Wifi_disconnect"
    },
    "stopAP": {
      "!type": "fn(callback: ?)",
      "!doc": "<p>Stop being an access point and disable the AP operation mode. AP mode can be\nre-enabled by calling <code>startAP</code>.</p>\n",
      "!url": "http://www.espruino.com/Reference#l_Wifi_stopAP"
    },
    "connect": {
      "!type": "fn(ssid: ?, options: ?, callback: ?)",
      "!doc": "<p>Connect to an access point as a station. If there is an existing connection to\nan AP it is first disconnected if the SSID or password are different from those\npassed as parameters. Put differently, if the passed SSID and password are\nidentical to the currently connected AP then nothing is changed. When the\nconnection attempt completes the callback function is invoked with one <code>err</code>\nparameter, which is NULL if there is no error and a string message if there is\nan error. If DHCP is enabled the callback occurs once an IP address has been\nobtained, if a static IP is set the callback occurs once the AP&#39;s network has\nbeen joined. The callback is also invoked if a connection already exists and\ndoes not need to be changed.</p>\n<p>The options properties may contain:</p>\n<ul>\n<li><code>password</code> - Password string to be used to access the network.</li>\n<li><code>dnsServers</code> (array of String) - An array of up to two DNS servers in dotted\ndecimal format string.</li>\n<li><code>channel</code> - Wifi channel of the access point (integer, typ 0..14, 0 means any\nchannel), only on ESP8266.</li>\n<li><code>bssid</code> - Mac address of the access point (string, type &quot;00:00:00:00:00:00&quot;),\nonly on ESP8266.</li>\n</ul>\n<p>Notes:</p>\n<ul>\n<li>the options should include the ability to set a static IP and associated\nnetmask and gateway, this is a future enhancement.</li>\n<li>the only error reported in the callback is &quot;Bad password&quot;, all other errors\n(such as access point not found or DHCP timeout) just cause connection\nretries. If the reporting of such temporary errors is desired, the caller must\nuse its own timeout and the <code>getDetails().status</code> field.</li>\n<li>the <code>connect</code> call automatically enabled station mode, it can be disabled\nagain by calling <code>disconnect</code>.</li>\n</ul>\n",
      "!url": "http://www.espruino.com/Reference#l_Wifi_connect"
    },
    "scan": {
      "!type": "fn(callback: ?)",
      "!doc": "<p>Perform a scan for access points. This will enable the station mode if it is not\ncurrently enabled. Once the scan is complete the callback function is called\nwith an array of APs found, each AP is an object with:</p>\n<ul>\n<li><code>ssid</code>: SSID string.</li>\n<li><code>mac</code>: access point MAC address in 00:00:00:00:00:00 format.</li>\n<li><code>authMode</code>: <code>open</code>, <code>wep</code>, <code>wpa</code>, <code>wpa2</code>, or <code>wpa_wpa2</code>.</li>\n<li><code>channel</code>: wifi channel 1..13.</li>\n<li><code>hidden</code>: true if the SSID is hidden (ESP32/ESP8266 only)</li>\n<li><code>rssi</code>: signal strength in dB in the range -110..0.</li>\n</ul>\n<p>Notes:</p>\n<ul>\n<li>in order to perform the scan the station mode is turned on and remains on, use\nWifi.disconnect() to turn it off again, if desired.</li>\n<li>only one scan can be in progress at a time.</li>\n</ul>\n",
      "!url": "http://www.espruino.com/Reference#l_Wifi_scan"
    },
    "startAP": {
      "!type": "fn(ssid: ?, options: ?, callback: ?)",
      "!doc": "<p>Create a WiFi access point allowing stations to connect. If the password is NULL\nor an empty string the access point is open, otherwise it is encrypted. The\ncallback function is invoked once the access point is set-up and receives one\n<code>err</code> argument, which is NULL on success and contains an error message string\notherwise.</p>\n<p>The <code>options</code> object can contain the following properties.</p>\n<ul>\n<li><code>authMode</code> - The authentication mode to use. Can be one of &quot;open&quot;, &quot;wpa2&quot;,\n&quot;wpa&quot;, &quot;wpa_wpa2&quot;. The default is open (but open access points are not\nrecommended).</li>\n<li><code>password</code> - The password for connecting stations if authMode is not open.</li>\n<li><code>channel</code> - The channel to be used for the access point in the range 1..13. If\nthe device is also connected to an access point as a station then that access\npoint determines the channel.</li>\n<li><code>hidden</code> - The flag if visible or not (0:visible, 1:hidden), default is\nvisible.</li>\n</ul>\n<p>Notes:</p>\n<ul>\n<li>the options should include the ability to set the AP IP and associated\nnetmask, this is a future enhancement.</li>\n<li>the <code>startAP</code> call automatically enables AP mode. It can be disabled again by\ncalling <code>stopAP</code>.</li>\n</ul>\n",
      "!url": "http://www.espruino.com/Reference#l_Wifi_startAP"
    },
    "getStatus": {
      "!type": "fn(callback: ?) -> ?",
      "!doc": "<p>Retrieve the current overall WiFi configuration. This call provides general\ninformation that pertains to both station and access point modes. The getDetails\nand getAPDetails calls provide more in-depth information about the station and\naccess point configurations, respectively. The status object has the following\nproperties:</p>\n<ul>\n<li><code>station</code> - Status of the wifi station: <code>off</code>, <code>connecting</code>, ...</li>\n<li><code>ap</code> - Status of the wifi access point: <code>disabled</code>, <code>enabled</code>.</li>\n<li><code>mode</code> - The current operation mode: <code>off</code>, <code>sta</code>, <code>ap</code>, <code>sta+ap</code>.</li>\n<li><code>phy</code> - Modulation standard configured: <code>11b</code>, <code>11g</code>, <code>11n</code> (the esp8266 docs\nare not very clear, but it is assumed that 11n means b/g/n). This setting\nlimits the modulations that the radio will use, it does not indicate the\ncurrent modulation used with a specific access point.</li>\n<li><code>powersave</code> - Power saving mode: <code>none</code> (radio is on all the time), <code>ps-poll</code>\n(radio is off between beacons as determined by the access point&#39;s DTIM\nsetting). Note that in &#39;ap&#39; and &#39;sta+ap&#39; modes the radio is always on, i.e.,\nno power saving is possible.</li>\n<li><code>savedMode</code> - The saved operation mode which will be applied at boot time:\n<code>off</code>, <code>sta</code>, <code>ap</code>, <code>sta+ap</code>.</li>\n</ul>\n",
      "!url": "http://www.espruino.com/Reference#l_Wifi_getStatus"
    },
    "setConfig": {
      "!type": "fn(settings: ?)",
      "!doc": "<p>Sets a number of global wifi configuration settings. All parameters are optional\nand which are passed determines which settings are updated. The settings\navailable are:</p>\n<ul>\n<li><code>phy</code> - Modulation standard to allow: <code>11b</code>, <code>11g</code>, <code>11n</code> (the esp8266 docs\nare not very clear, but it is assumed that 11n means b/g/n).</li>\n<li><code>powersave</code> - Power saving mode: <code>none</code> (radio is on all the time), <code>ps-poll</code>\n(radio is off between beacons as determined by the access point&#39;s DTIM\nsetting). Note that in &#39;ap&#39; and &#39;sta+ap&#39; modes the radio is always on, i.e.,\nno power saving is possible.</li>\n</ul>\n<p>Note: esp8266 SDK programmers may be missing an &quot;opmode&quot; option to set the\nsta/ap/sta+ap operation mode. Please use connect/scan/disconnect/startAP/stopAP,\nwhich all set the esp8266 opmode indirectly.</p>\n",
      "!url": "http://www.espruino.com/Reference#l_Wifi_setConfig"
    },
    "getDetails": {
      "!type": "fn(callback: ?) -> ?",
      "!doc": "<p>Retrieve the wifi station configuration and status details. The details object\nhas the following properties:</p>\n<ul>\n<li><code>status</code> - Details about the wifi station connection, one of <code>off</code>,\n<code>connecting</code>, <code>wrong_password</code>, <code>no_ap_found</code>, <code>connect_fail</code>, or <code>connected</code>.\nThe off, bad_password and connected states are stable, the other states are\ntransient. The connecting state will either result in connected or one of the\nerror states (bad_password, no_ap_found, connect_fail) and the no_ap_found and\nconnect_fail states will result in a reconnection attempt after some interval.</li>\n<li><code>rssi</code> - signal strength of the connected access point in dB, typically in the\nrange -110 to 0, with anything greater than -30 being an excessively strong\nsignal.</li>\n<li><code>ssid</code> - SSID of the access point.</li>\n<li><code>password</code> - the password used to connect to the access point.</li>\n<li><code>authMode</code> - the authentication used: <code>open</code>, <code>wpa</code>, <code>wpa2</code>, <code>wpa_wpa2</code> (not\ncurrently supported).</li>\n<li><code>savedSsid</code> - the SSID to connect to automatically at boot time, null if none.</li>\n</ul>\n",
      "!url": "http://www.espruino.com/Reference#l_Wifi_getDetails"
    },
    "getAPDetails": {
      "!type": "fn(callback: ?) -> ?",
      "!doc": "<p>Retrieve the current access point configuration and status. The details object\nhas the following properties:</p>\n<ul>\n<li><code>status</code> - Current access point status: <code>enabled</code> or <code>disabled</code></li>\n<li><code>stations</code> - an array of the stations connected to the access point. This\narray may be empty. Each entry in the array is an object describing the\nstation which, at a minimum contains <code>ip</code> being the IP address of the station.</li>\n<li><code>ssid</code> - SSID to broadcast.</li>\n<li><code>password</code> - Password for authentication.</li>\n<li><code>authMode</code> - the authentication required of stations: <code>open</code>, <code>wpa</code>, <code>wpa2</code>,\n<code>wpa_wpa2</code>.</li>\n<li><code>hidden</code> - True if the SSID is hidden, false otherwise.</li>\n<li><code>maxConn</code> - Max number of station connections supported.</li>\n<li><code>savedSsid</code> - the SSID to broadcast automatically at boot time, null if the\naccess point is to be disabled at boot.</li>\n</ul>\n",
      "!url": "http://www.espruino.com/Reference#l_Wifi_getAPDetails"
    },
    "save": {
      "!type": "fn(what: ?)",
      "!doc": "<p>On boards where this is not available, just issue the <code>connect</code> commands you\nneed to run at startup from an <code>onInit</code> function.</p>\n<p>Save the current wifi configuration (station and access point) to flash and\nautomatically apply this configuration at boot time, unless <code>what==&quot;clear&quot;</code>, in\nwhich case the saved configuration is cleared such that wifi remains disabled at\nboot. The saved configuration includes:</p>\n<ul>\n<li>mode (off/sta/ap/sta+ap)</li>\n<li>SSIDs &amp; passwords</li>\n<li>phy (11b/g/n)</li>\n<li>powersave setting</li>\n<li>DHCP hostname</li>\n</ul>\n",
      "!url": "http://www.espruino.com/Reference#l_Wifi_save"
    },
    "restore": {
      "!type": "fn()",
      "!doc": "<p>Restores the saved Wifi configuration from flash. See <code>Wifi.save()</code>.</p>\n",
      "!url": "http://www.espruino.com/Reference#l_Wifi_restore"
    },
    "getIP": {
      "!type": "fn(callback: ?) -> ?",
      "!doc": "<p>Return the station IP information in an object as follows:</p>\n<ul>\n<li>ip - IP address as string (e.g. &quot;192.168.1.5&quot;)</li>\n<li>netmask - The interface netmask as string (ESP8266/ESP32 only)</li>\n<li>gw - The network gateway as string (ESP8266/ESP32 only)</li>\n<li>mac - The MAC address as string of the form 00:00:00:00:00:00</li>\n</ul>\n<p>Note that the <code>ip</code>, <code>netmask</code>, and <code>gw</code> fields are omitted if no connection is established:</p>\n",
      "!url": "http://www.espruino.com/Reference#l_Wifi_getIP"
    },
    "getAPIP": {
      "!type": "fn(callback: ?) -> ?",
      "!doc": "<p>Return the access point IP information in an object which contains:</p>\n<ul>\n<li>ip - IP address as string (typ &quot;192.168.4.1&quot;)</li>\n<li>netmask - The interface netmask as string</li>\n<li>gw - The network gateway as string</li>\n<li>mac - The MAC address as string of the form 00:00:00:00:00:00</li>\n</ul>\n",
      "!url": "http://www.espruino.com/Reference#l_Wifi_getAPIP"
    },
    "getHostByName": {
      "!type": "fn(hostname: ?, callback: ?)",
      "!doc": "<p>Lookup the hostname and invoke a callback with the IP address as integer\nargument. If the lookup fails, the callback is invoked with a null argument.\n<strong>Note:</strong> only a single hostname lookup can be made at a time, concurrent\nlookups are not supported.</p>\n",
      "!url": "http://www.espruino.com/Reference#l_Wifi_getHostByName"
    },
    "getHostname": {
      "!type": "fn(callback: ?) -> ?",
      "!doc": "<p>Returns the hostname announced to the DHCP server and broadcast via mDNS when\nconnecting to an access point.</p>\n",
      "!url": "http://www.espruino.com/Reference#l_Wifi_getHostname"
    },
    "setHostname": {
      "!type": "fn(hostname: ?, callback: ?)",
      "!doc": "<p>Set the hostname. Depending on implementation, the hostname is sent with every\nDHCP request and is broadcast via mDNS. The DHCP hostname may be visible in the\naccess point and may be forwarded into DNS as hostname.local. If a DHCP lease\ncurrently exists changing the hostname will cause a disconnect and reconnect in\norder to transmit the change to the DHCP server. The mDNS announcement also\nincludes an announcement for the &quot;espruino&quot; service.</p>\n",
      "!url": "http://www.espruino.com/Reference#l_Wifi_setHostname"
    },
    "setSNTP": {
      "!type": "fn(server: ?, tz_offset: ?)",
      "!doc": "<p>Starts the SNTP (Simple Network Time Protocol) service to keep the clock\nsynchronized with the specified server. Note that the time zone is really just\nan offset to UTC and doesn&#39;t handle daylight savings time. The interval\ndetermines how often the time server is queried and Espruino&#39;s time is\nsynchronized. The initial synchronization occurs asynchronously after setSNTP\nreturns.</p>\n",
      "!url": "http://www.espruino.com/Reference#l_Wifi_setSNTP"
    },
    "setIP": {
      "!type": "fn(settings: ?, callback: ?)",
      "!doc": "<p>The <code>settings</code> object must contain the following properties.</p>\n<ul>\n<li><code>ip</code> IP address as string (e.g. &quot;192.168.5.100&quot;)</li>\n<li><code>gw</code> The network gateway as string (e.g. &quot;192.168.5.1&quot;)</li>\n<li><code>netmask</code> The interface netmask as string (e.g. &quot;255.255.255.0&quot;)</li>\n</ul>\n",
      "!url": "http://www.espruino.com/Reference#l_Wifi_setIP"
    },
    "setAPIP": {
      "!type": "fn(settings: ?, callback: ?)",
      "!doc": "<p>The <code>settings</code> object must contain the following properties.</p>\n<ul>\n<li><code>ip</code> IP address as string (e.g. &quot;192.168.5.100&quot;)</li>\n<li><code>gw</code> The network gateway as string (e.g. &quot;192.168.5.1&quot;)</li>\n<li><code>netmask</code> The interface netmask as string (e.g. &quot;255.255.255.0&quot;)</li>\n</ul>\n",
      "!url": "http://www.espruino.com/Reference#l_Wifi_setAPIP"
    },
    "ping": {
      "!type": "fn(hostname: ?, callback: ?)",
      "!doc": "<p>Issues a ping to the given host, and calls a callback with the time when the\nping is received.</p>\n",
      "!url": "http://www.espruino.com/Reference#l_Wifi_ping"
    },
    "turbo": {
      "!type": "fn(enable: ?, callback: ?)",
      "!doc": "<p>Switch to using a higher communication speed with the WiFi module.</p>\n<ul>\n<li><code>true</code> = 921600 baud</li>\n<li><code>false</code> = 115200</li>\n<li><code>1843200</code> (or any number) = use a specific baud rate. * e.g.\n<code>wifi.turbo(true,callback)</code> or <code>wifi.turbo(1843200,callback)</code></li>\n</ul>\n",
      "!url": "http://www.espruino.com/Reference#l_Wifi_turbo"
    }
  },
  "NetworkJS": {
    "!type": "fn()",
    "!doc": "<p>Library that initialises a network device that calls into JavaScript</p>\n",
    "!url": "http://www.espruino.com/Reference#NetworkJS",
    "create": {
      "!type": "fn(obj: ?) -> ?",
      "!doc": "<p>Initialise the network using the callbacks given and return the first argument.\nFor instance:</p>\n<pre><code><span class=\"hljs-title function_\">require</span>(<span class=\"hljs-string\">&quot;NetworkJS&quot;</span>).<span class=\"hljs-property\">create</span>({\n  <span class=\"hljs-variable\">create</span> : <span class=\"hljs-title function_\">function</span>(<span class=\"hljs-params\">host</span>, <span class=\"hljs-params\">port</span>, <span class=\"hljs-params\">socketType</span>, <span class=\"hljs-params\">options</span>) {\n    <span class=\"hljs-comment\">// Create a socket and return its index, host is a string, port is an integer.</span>\n    <span class=\"hljs-comment\">// If host isn&#x27;t defined, create a server socket</span>\n    <span class=\"hljs-variable\">console</span>.<span class=\"hljs-property\">log</span>(<span class=\"hljs-string\">&quot;Create&quot;</span>,<span class=\"hljs-variable\">host</span>,<span class=\"hljs-variable\">port</span>);\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">1</span>;\n  },\n  <span class=\"hljs-variable\">close</span> : <span class=\"hljs-title function_\">function</span>(<span class=\"hljs-params\">sckt</span>) {\n    <span class=\"hljs-comment\">// Close the socket. returns nothing</span>\n  },\n  <span class=\"hljs-variable\">accept</span> : <span class=\"hljs-title function_\">function</span>(<span class=\"hljs-params\">sckt</span>) {\n    <span class=\"hljs-comment\">// Accept the connection on the server socket. Returns socket number or -1 if no connection</span>\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">-1</span>;\n  },\n  <span class=\"hljs-variable\">recv</span> : <span class=\"hljs-title function_\">function</span>(<span class=\"hljs-params\">sckt</span>, <span class=\"hljs-params\">maxLen</span>, <span class=\"hljs-params\">socketType</span>) {\n    <span class=\"hljs-comment\">// Receive data. Returns a string (even if empty).</span>\n    <span class=\"hljs-comment\">// If non-string returned, socket is then closed</span>\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">null</span>;<span class=\"hljs-comment\">//or &quot;&quot;;</span>\n  },\n  <span class=\"hljs-variable\">send</span> : <span class=\"hljs-title function_\">function</span>(<span class=\"hljs-params\">sckt</span>, <span class=\"hljs-params\">data</span>, <span class=\"hljs-params\">socketType</span>) {\n    <span class=\"hljs-comment\">// Send data (as string). Returns the number of bytes sent - 0 is ok.</span>\n    <span class=\"hljs-comment\">// Less than 0</span>\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-variable\">data</span>.<span class=\"hljs-property\">length</span>;\n  }\n});\n</code></pre>\n<p><code>socketType</code> is an integer - 2 for UDP, or see SocketType in\n<a href=\"https://github.com/espruino/Espruino/blob/master/libs/network/network.h\">https://github.com/espruino/Espruino/blob/master/libs/network/network.h</a> for more\ninformation.</p>\n",
      "!url": "http://www.espruino.com/Reference#l_NetworkJS_create"
    }
  },
  "WIZnet": {
    "!type": "fn()",
    "!doc": "<p>Library for communication with the WIZnet Ethernet module</p>\n",
    "!url": "http://www.espruino.com/Reference#WIZnet",
    "connect": {
      "!type": "fn(spi: ?, cs: +Pin) -> +Ethernet",
      "!doc": "<p>Initialise the WIZnet module and return an Ethernet object</p>\n",
      "!url": "http://www.espruino.com/Reference#l_WIZnet_connect"
    }
  },
  "Ethernet": {
    "!type": "fn()",
    "!doc": "<p>An instantiation of an Ethernet network adaptor</p>\n",
    "!url": "http://www.espruino.com/Reference#Ethernet",
    "prototype": {
      "getIP": {
        "!type": "fn(options: ?) -> ?",
        "!doc": "<p>Get the current IP address, subnet, gateway and mac address.</p>\n",
        "!url": "http://www.espruino.com/Reference#l_Ethernet_getIP"
      },
      "setIP": {
        "!type": "fn(options: ?, callback: ?) -> bool",
        "!doc": "<p>Set the current IP address or get an IP from DHCP (if no options object is\nspecified)</p>\n<p>If &#39;mac&#39; is specified as an option, it must be a string of the form\n<code>&quot;00:01:02:03:04:05&quot;</code> The default mac is 00:08:DC:01:02:03.</p>\n",
        "!url": "http://www.espruino.com/Reference#l_Ethernet_setIP"
      },
      "setHostname": {
        "!type": "fn(hostname: ?, callback: ?) -> bool",
        "!doc": "<p>Set hostname used during the DHCP request. Minimum 8 and maximum 12 characters,\nbest set before calling <code>eth.setIP()</code>. Default is WIZnet010203, 010203 is the\ndefault nic as part of the mac.</p>\n",
        "!url": "http://www.espruino.com/Reference#l_Ethernet_setHostname"
      },
      "getHostname": {
        "!type": "fn(callback: ?) -> ?",
        "!doc": "<p>Returns the hostname</p>\n",
        "!url": "http://www.espruino.com/Reference#l_Ethernet_getHostname"
      },
      "getStatus": {
        "!type": "fn(options: ?) -> ?",
        "!doc": "<p>Get the current status of the ethernet device</p>\n",
        "!url": "http://www.espruino.com/Reference#l_Ethernet_getStatus"
      }
    }
  },
  "url": {
    "!type": "fn()",
    "!doc": "<p>This class helps to convert URLs into Objects of information ready for\nhttp.request/get</p>\n",
    "!url": "http://www.espruino.com/Reference#url",
    "parse": {
      "!type": "fn(urlStr: ?, parseQuery: bool) -> ?",
      "!doc": "<p>A utility function to split a URL into parts</p>\n<p>This is useful in web servers for instance when handling a request.</p>\n<p>For instance <code>url.parse(&quot;/a?b=c&amp;d=e&quot;,true)</code> returns\n<code>{&quot;method&quot;:&quot;GET&quot;,&quot;host&quot;:&quot;&quot;,&quot;path&quot;:&quot;/a?b=c&amp;d=e&quot;,&quot;pathname&quot;:&quot;/a&quot;,&quot;search&quot;:&quot;?b=c&amp;d=e&quot;,&quot;port&quot;:80,&quot;query&quot;:{&quot;b&quot;:&quot;c&quot;,&quot;d&quot;:&quot;e&quot;}}</code></p>\n",
      "!url": "http://www.espruino.com/Reference#l_url_parse"
    }
  },
  "net": {
    "!type": "fn()",
    "!doc": "<p>This library allows you to create TCPIP servers and clients</p>\n<p>In order to use this, you will need an extra module to get network connectivity.</p>\n<p>This is designed to be a cut-down version of the <a href=\"http://nodejs.org/api/net.html\">node.js\nlibrary</a>. Please see the <a href=\"/Internet\">Internet</a>\npage for more information on how to use it.</p>\n",
    "!url": "http://www.espruino.com/Reference#net",
    "createServer": {
      "!type": "fn(callback: ?) -> +Server",
      "!doc": "<p>Create a Server</p>\n<p>When a request to the server is made, the callback is called. In the callback\nyou can use the methods on the connection to send data. You can also add\n<code>connection.on(&#39;data&#39;,function() { ... })</code> to listen for received data</p>\n",
      "!url": "http://www.espruino.com/Reference#l_net_createServer"
    },
    "connect": {
      "!type": "fn(options: ?, callback: ?) -> +Socket",
      "!doc": "<p>Create a TCP socket connection</p>\n",
      "!url": "http://www.espruino.com/Reference#l_net_connect"
    }
  },
  "Server": {
    "!type": "fn()",
    "!doc": "<p>The socket server created by <code>require(&#39;net&#39;).createServer</code></p>\n",
    "!url": "http://www.espruino.com/Reference#Server",
    "prototype": {
      "listen": {
        "!type": "fn(port: number) -> ?",
        "!doc": "<p>Start listening for new connections on the given port</p>\n",
        "!url": "http://www.espruino.com/Reference#l_Server_listen"
      },
      "close": {
        "!type": "fn()",
        "!doc": "<p>Stop listening for new connections</p>\n",
        "!url": "http://www.espruino.com/Reference#l_Server_close"
      }
    }
  },
  "Socket": {
    "!type": "fn()",
    "!doc": "<p>An actual socket connection - allowing transmit/receive of TCP data</p>\n",
    "!url": "http://www.espruino.com/Reference#Socket",
    "prototype": {
      "available": {
        "!type": "fn() -> number",
        "!doc": "<p>Return how many bytes are available to read. If there is already a listener for\ndata, this will always return 0.</p>\n",
        "!url": "http://www.espruino.com/Reference#l_Socket_available"
      },
      "read": {
        "!type": "fn(chars: number) -> ?",
        "!doc": "<p>Return a string containing characters that have been received</p>\n",
        "!url": "http://www.espruino.com/Reference#l_Socket_read"
      },
      "pipe": {
        "!type": "fn(destination: ?, options: ?)",
        "!doc": "<p>Pipe this to a stream (an object with a &#39;write&#39; method)</p>\n",
        "!url": "http://www.espruino.com/Reference#l_Socket_pipe"
      },
      "write": {
        "!type": "fn(data: ?) -> bool",
        "!doc": "<p>This function writes the <code>data</code> argument as a string. Data that is passed in\n(including arrays) will be converted to a string with the normal JavaScript\n<code>toString</code> method.</p>\n<p>If you wish to send binary data then you need to convert that data directly to a\nString. This can be done with <code>String.fromCharCode</code>, however it&#39;s often easier\nand faster to use the Espruino-specific <code>E.toString</code>, which will read its\narguments as an array of bytes and convert that to a String:</p>\n<pre><code><span class=\"hljs-attribute\">socket</span>.write(E.toString([<span class=\"hljs-number\">0</span>,<span class=\"hljs-number\">1</span>,<span class=\"hljs-number\">2</span>,<span class=\"hljs-number\">3</span>,<span class=\"hljs-number\">4</span>,<span class=\"hljs-number\">5</span>]));\n</code></pre>\n<p>If you need to send something other than bytes, you can use &#39;Typed Arrays&#39;, or\neven <code>DataView</code>:</p>\n<pre><code>var d = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-constructor\">DataView(<span class=\"hljs-params\">new</span> ArrayBuffer(8)</span>); <span class=\"hljs-comment\">// 8 byte array buffer</span>\nd.set<span class=\"hljs-constructor\">Float32(0, 765.3532564)</span>; <span class=\"hljs-comment\">// write float at bytes 0-3</span>\nd.set<span class=\"hljs-constructor\">Int8(4, 42)</span>; <span class=\"hljs-comment\">// write int8 at byte 4</span>\nsocket.write(<span class=\"hljs-module-access\"><span class=\"hljs-module\"><span class=\"hljs-identifier\">E</span>.</span></span><span class=\"hljs-keyword\">to</span><span class=\"hljs-constructor\">String(<span class=\"hljs-params\">d</span>.<span class=\"hljs-params\">buffer</span>)</span>)\n</code></pre>\n",
        "!url": "http://www.espruino.com/Reference#l_Socket_write"
      },
      "end": {
        "!type": "fn(data: ?)",
        "!doc": "<p>Close this socket - optional data to append as an argument.</p>\n<p>See <code>Socket.write</code> for more information about the data argument</p>\n",
        "!url": "http://www.espruino.com/Reference#l_Socket_end"
      }
    }
  },
  "dgram": {
    "!type": "fn()",
    "!doc": "<p>This library allows you to create UDP/DATAGRAM servers and clients</p>\n<p>In order to use this, you will need an extra module to get network connectivity.</p>\n<p>This is designed to be a cut-down version of the <a href=\"http://nodejs.org/api/dgram.html\">node.js\nlibrary</a>. Please see the <a href=\"/Internet\">Internet</a>\npage for more information on how to use it.</p>\n",
    "!url": "http://www.espruino.com/Reference#dgram",
    "createSocket": {
      "!type": "fn(type: ?, callback: ?) -> +dgramSocket",
      "!doc": "<p>Create a UDP socket</p>\n",
      "!url": "http://www.espruino.com/Reference#l_dgram_createSocket"
    }
  },
  "dgramSocket": {
    "!type": "fn()",
    "!doc": "<p>An actual socket connection - allowing transmit/receive of TCP data</p>\n",
    "!url": "http://www.espruino.com/Reference#dgramSocket",
    "prototype": {
      "send": {
        "!type": "fn(buffer: ?, offset: ?, length: ?, args: ?)",
        "!doc": "",
        "!url": "http://www.espruino.com/Reference#l_dgramSocket_send"
      },
      "bind": {
        "!type": "fn(port: number, callback: ?) -> ?",
        "!doc": "",
        "!url": "http://www.espruino.com/Reference#l_dgramSocket_bind"
      },
      "close": {
        "!type": "fn()",
        "!doc": "<p>Close the socket</p>\n",
        "!url": "http://www.espruino.com/Reference#l_dgramSocket_close"
      },
      "addMembership": {
        "!type": "fn(group: ?, ip: ?)",
        "!doc": "",
        "!url": "http://www.espruino.com/Reference#l_dgramSocket_addMembership"
      }
    }
  },
  "tls": {
    "!type": "fn()",
    "!doc": "<p>This library allows you to create TCPIP servers and clients using TLS encryption</p>\n<p>In order to use this, you will need an extra module to get network connectivity.</p>\n<p>This is designed to be a cut-down version of the <a href=\"http://nodejs.org/api/tls.html\">node.js\nlibrary</a>. Please see the <a href=\"/Internet\">Internet</a>\npage for more information on how to use it.</p>\n",
    "!url": "http://www.espruino.com/Reference#tls",
    "connect": {
      "!type": "fn(options: ?, callback: ?) -> +Socket",
      "!doc": "<p>Create a socket connection using TLS</p>\n<p>Options can have <code>ca</code>, <code>key</code> and <code>cert</code> fields, which should be the decoded\ncontent of the certificate.</p>\n<pre><code>var <span class=\"hljs-keyword\">options</span> = url.parse(<span class=\"hljs-string\">&quot;localhost:1234&quot;</span>);\n<span class=\"hljs-keyword\">options</span>.<span class=\"hljs-keyword\">key</span> = atob(<span class=\"hljs-string\">&quot;MIIJKQ ... OZs08C&quot;</span>);\n<span class=\"hljs-keyword\">options</span>.cert = atob(<span class=\"hljs-string\">&quot;MIIFi ... Uf93rN+&quot;</span>);\n<span class=\"hljs-keyword\">options</span>.ca = atob(<span class=\"hljs-string\">&quot;MIIFgDCC ... GosQML4sc=&quot;</span>);\nrequire(<span class=\"hljs-string\">&quot;tls&quot;</span>).connect(<span class=\"hljs-keyword\">options</span>, ... );\n</code></pre>\n<p>If you have the certificates as <code>.pem</code> files, you need to load these files, take\nthe information between the lines beginning with <code>----</code>, remove the newlines\nfrom it so you have raw base64, and then feed it into <code>atob</code> as above.</p>\n<p>You can also:</p>\n<ul>\n<li>Just specify the filename (&lt;=100 characters) and it will be loaded and parsed\nif you have an SD card connected. For instance <code>options.key = &quot;key.pem&quot;;</code></li>\n<li>Specify a function, which will be called to retrieve the data. For instance\n<code>options.key = function() { eeprom.load_my_info(); };</code></li>\n</ul>\n<p>For more information about generating and using certificates, see:</p>\n<p><a href=\"https://engineering.circle.com/https-authorized-certs-with-node-js/\">https://engineering.circle.com/https-authorized-certs-with-node-js/</a></p>\n<p>(You&#39;ll need to use 2048 bit certificates as opposed to 4096 bit shown above)</p>\n",
      "!url": "http://www.espruino.com/Reference#l_tls_connect"
    }
  },
  "heatshrink": {
    "!type": "fn()",
    "!doc": "<p>Simple library for compression/decompression using\n<a href=\"https://github.com/atomicobject/heatshrink\">heatshrink</a>, an\n<a href=\"https://en.wikipedia.org/wiki/Lempel%E2%80%93Ziv%E2%80%93Storer%E2%80%93Szymanski\">LZSS</a>\ncompression tool.</p>\n<p>Espruino uses heatshrink internally to compress RAM down to fit in Flash memory\nwhen <code>save()</code> is used. This just exposes that functionality.</p>\n<p>Functions here take and return buffers of data. There is no support for\nstreaming, so both the compressed and decompressed data must be able to fit in\nmemory at the same time.</p>\n<pre><code>var c = require(<span class=\"hljs-string\">&quot;heatshrink&quot;</span>).compress(<span class=\"hljs-string\">&quot;Hello World&quot;</span>);\n<span class=\"hljs-regexp\">//</span> =new Uint8Array([....]).buffer\nvar d = require(<span class=\"hljs-string\">&quot;heatshrink&quot;</span>).decompress(c);\n<span class=\"hljs-regexp\">//</span> =new Uint8Array([<span class=\"hljs-number\">72</span>, <span class=\"hljs-number\">101</span>, ...]).buffer\nE.toString(d)\n<span class=\"hljs-regexp\">//</span> =<span class=\"hljs-string\">&quot;Hello World&quot;</span>\n</code></pre>\n<p>If you&#39;d like a way to perform compression/decompression on desktop, check out <a href=\"https://github.com/espruino/EspruinoWebTools#heatshrinkjs\">https://github.com/espruino/EspruinoWebTools#heatshrinkjs</a></p>\n",
    "!url": "http://www.espruino.com/Reference#heatshrink",
    "compress": {
      "!type": "fn(data: ?) -> +ArrayBuffer",
      "!doc": "<p>Compress the data supplied as input, and return heatshrink encoded data as an <code>ArrayBuffer</code>.</p>\n<p>No type information is stored, and the <code>data</code> argument is treated as an array of bytes\n(whether it is a <code>String</code>/<code>Uint8Array</code> or even <code>Uint16Array</code>), so the result of\ndecompressing any compressed data will always be an <code>ArrayBuffer</code>.</p>\n<p>If you&#39;d like a way to perform compression/decompression on desktop, check out <a href=\"https://github.com/espruino/EspruinoWebTools#heatshrinkjs\">https://github.com/espruino/EspruinoWebTools#heatshrinkjs</a></p>\n",
      "!url": "http://www.espruino.com/Reference#l_heatshrink_compress"
    },
    "decompress": {
      "!type": "fn(data: ?) -> +ArrayBuffer",
      "!doc": "<p>Decompress the heatshrink-encoded data supplied as input, and return it as an <code>ArrayBuffer</code>.</p>\n<p>To get the result as a String, wrap <code>require(&quot;heatshrink&quot;).decompress</code> in <code>E.toString</code>: <code>E.toString(require(&quot;heatshrink&quot;).decompress(...))</code></p>\n<p>If you&#39;d like a way to perform compression/decompression on desktop, check out <a href=\"https://github.com/espruino/EspruinoWebTools#heatshrinkjs\">https://github.com/espruino/EspruinoWebTools#heatshrinkjs</a></p>\n",
      "!url": "http://www.espruino.com/Reference#l_heatshrink_decompress"
    }
  },
  "ESP32": {
    "!type": "fn()",
    "!doc": "<p>Class containing utility functions for the\n<a href=\"http://www.espruino.com/ESP32\">ESP32</a></p>\n",
    "!url": "http://www.espruino.com/Reference#ESP32",
    "setAtten": {
      "!type": "fn(pin: +Pin, atten: number)",
      "!doc": "",
      "!url": "http://www.espruino.com/Reference#l_ESP32_setAtten"
    },
    "reboot": {
      "!type": "fn()",
      "!doc": "<p>Perform a hardware reset/reboot of the ESP32.</p>\n",
      "!url": "http://www.espruino.com/Reference#l_ESP32_reboot"
    },
    "deepSleep": {
      "!type": "fn(us: number)",
      "!doc": "<p>Put device in deepsleep state for &quot;us&quot; microseconds.</p>\n",
      "!url": "http://www.espruino.com/Reference#l_ESP32_deepSleep"
    },
    "deepSleepExt0": {
      "!type": "fn(pin: +Pin, level: number)",
      "!doc": "<p>Put device in deepsleep state until interrupted by pin &quot;pin&quot;.\nEligible pin numbers are restricted to those <a href=\"https://docs.espressif.com/projects/esp-idf/en/latest/esp32/api-reference/peripherals/gpio.html#gpio-summary\">GPIOs designated\nas RTC GPIOs</a>.</p>\n",
      "!url": "http://www.espruino.com/Reference#l_ESP32_deepSleepExt0"
    },
    "deepSleepExt1": {
      "!type": "fn(pinVar: ?, mode: number)",
      "!doc": "<p>Put device in deepsleep state until interrupted by pins in the &quot;pinVar&quot; array.\nThe trigger &quot;mode&quot; determines the pin state which will wake up the device.\nValid modes are:</p>\n<ul>\n<li><code>0: ESP_EXT1_WAKEUP_ALL_LOW</code> - all nominated pins must be set LOW to trigger wakeup</li>\n<li><code>1: ESP_EXT1_WAKEUP_ANY_HIGH</code> - any of nominated pins set HIGH will trigger wakeup</li>\n</ul>\n<p>Eligible pin numbers are restricted to those <a href=\"https://docs.espressif.com/projects/esp-idf/en/latest/esp32/api-reference/peripherals/gpio.html#gpio-summary\">GPIOs designated\nas RTC GPIOs</a>.</p>\n",
      "!url": "http://www.espruino.com/Reference#l_ESP32_deepSleepExt1"
    },
    "getWakeupCause": {
      "!type": "fn() -> number",
      "!doc": "<p>Returns a variable identifying the cause of wakeup from deep sleep.\nPossible causes include:</p>\n<ul>\n<li><code>0: ESP_SLEEP_WAKEUP_UNDEFINED</code> - reset was not caused by exit from deep sleep</li>\n<li><code>2: ESP_SLEEP_WAKEUP_EXT0</code> - Wakeup caused by external signal using RTC_IO</li>\n<li><code>3: ESP_SLEEP_WAKEUP_EXT1</code> - Wakeup caused by external signal using RTC_CNTL</li>\n<li><code>4: ESP_SLEEP_WAKEUP_TIMER</code> - Wakeup caused by timer</li>\n<li><code>5: ESP_SLEEP_WAKEUP_TOUCHPAD</code> - Wakeup caused by touchpad</li>\n<li><code>6: ESP_SLEEP_WAKEUP_ULP</code> - Wakeup caused by ULP program</li>\n</ul>\n",
      "!url": "http://www.espruino.com/Reference#l_ESP32_getWakeupCause"
    },
    "getState": {
      "!type": "fn() -> ?",
      "!doc": "<p>Returns an object that contains details about the state of the ESP32 with the\nfollowing fields:</p>\n<ul>\n<li><code>sdkVersion</code> - Version of the SDK.</li>\n<li><code>freeHeap</code> - Amount of free heap in bytes.</li>\n<li><code>BLE</code> - Status of BLE, enabled if true.</li>\n<li><code>Wifi</code> - Status of Wifi, enabled if true.</li>\n<li><code>minHeap</code> - Minimum heap, calculated by heap_caps_get_minimum_free_size</li>\n</ul>\n",
      "!url": "http://www.espruino.com/Reference#l_ESP32_getState"
    },
    "setBLE_Debug": {
      "!type": "fn(level: number)",
      "!doc": "",
      "!url": "http://www.espruino.com/Reference#l_ESP32_setBLE_Debug"
    },
    "enableBLE": {
      "!type": "fn(enable: bool)",
      "!doc": "<p>Switches Bluetooth off/on, removes saved code from Flash, resets the board, and\non restart creates jsVars depending on available heap (actual additional 1800)</p>\n",
      "!url": "http://www.espruino.com/Reference#l_ESP32_enableBLE"
    },
    "enableWifi": {
      "!type": "fn(enable: bool)",
      "!doc": "<p>Switches Wifi off/on, removes saved code from Flash, resets the board, and on\nrestart creates jsVars depending on available heap (actual additional 3900)</p>\n",
      "!url": "http://www.espruino.com/Reference#l_ESP32_enableWifi"
    },
    "setOTAValid": {
      "!type": "fn(isValid: bool)",
      "!doc": "<p>This function is useful for ESP32 <a href=\"https://docs.espressif.com/projects/esp-idf/en/latest/esp32/api-reference/system/ota.html\">OTA Updates</a></p>\n<p>Normally Espruino is uploaded to the <code>factory</code> partition so this isn&#39;t so useful,\nbut it is possible to upload Espruino to the <code>ota_0</code> partition (or ota_1 if a different table has been added).</p>\n<p>If this is the case, you can use this function to mark the currently running version of Espruino as good or bad.</p>\n<ul>\n<li>If set as valid, Espruino will continue running, and the fact that everything is ok is written to flash</li>\n<li>If set as invalid (false) Espruino will mark itself as not working properly and will reboot. The ESP32 bootloader\n will then start and will load any other partition it can find that is marked as ok.</li>\n</ul>\n",
      "!url": "http://www.espruino.com/Reference#l_ESP32_setOTAValid"
    }
  },
  "Nucleo": {
    "!type": "fn()",
    "!doc": "<p>This is the built-in class for the Arduino-style pin namings on ST Nucleo boards</p>\n",
    "!url": "http://www.espruino.com/Reference#Nucleo",
    "A0": {
      "!type": "+Pin",
      "!doc": "",
      "!url": "http://www.espruino.com/Reference#l_Nucleo_A0"
    },
    "A1": {
      "!type": "+Pin",
      "!doc": "",
      "!url": "http://www.espruino.com/Reference#l_Nucleo_A1"
    },
    "A2": {
      "!type": "+Pin",
      "!doc": "",
      "!url": "http://www.espruino.com/Reference#l_Nucleo_A2"
    },
    "A3": {
      "!type": "+Pin",
      "!doc": "",
      "!url": "http://www.espruino.com/Reference#l_Nucleo_A3"
    },
    "A4": {
      "!type": "+Pin",
      "!doc": "",
      "!url": "http://www.espruino.com/Reference#l_Nucleo_A4"
    },
    "A5": {
      "!type": "+Pin",
      "!doc": "",
      "!url": "http://www.espruino.com/Reference#l_Nucleo_A5"
    },
    "D0": {
      "!type": "+Pin",
      "!doc": "",
      "!url": "http://www.espruino.com/Reference#l_Nucleo_D0"
    },
    "D1": {
      "!type": "+Pin",
      "!doc": "",
      "!url": "http://www.espruino.com/Reference#l_Nucleo_D1"
    },
    "D2": {
      "!type": "+Pin",
      "!doc": "",
      "!url": "http://www.espruino.com/Reference#l_Nucleo_D2"
    },
    "D3": {
      "!type": "+Pin",
      "!doc": "",
      "!url": "http://www.espruino.com/Reference#l_Nucleo_D3"
    },
    "D4": {
      "!type": "+Pin",
      "!doc": "",
      "!url": "http://www.espruino.com/Reference#l_Nucleo_D4"
    },
    "D5": {
      "!type": "+Pin",
      "!doc": "",
      "!url": "http://www.espruino.com/Reference#l_Nucleo_D5"
    },
    "D6": {
      "!type": "+Pin",
      "!doc": "",
      "!url": "http://www.espruino.com/Reference#l_Nucleo_D6"
    },
    "D7": {
      "!type": "+Pin",
      "!doc": "",
      "!url": "http://www.espruino.com/Reference#l_Nucleo_D7"
    },
    "D8": {
      "!type": "+Pin",
      "!doc": "",
      "!url": "http://www.espruino.com/Reference#l_Nucleo_D8"
    },
    "D9": {
      "!type": "+Pin",
      "!doc": "",
      "!url": "http://www.espruino.com/Reference#l_Nucleo_D9"
    },
    "D10": {
      "!type": "+Pin",
      "!doc": "",
      "!url": "http://www.espruino.com/Reference#l_Nucleo_D10"
    },
    "D11": {
      "!type": "+Pin",
      "!doc": "",
      "!url": "http://www.espruino.com/Reference#l_Nucleo_D11"
    },
    "D12": {
      "!type": "+Pin",
      "!doc": "",
      "!url": "http://www.espruino.com/Reference#l_Nucleo_D12"
    },
    "D13": {
      "!type": "+Pin",
      "!doc": "",
      "!url": "http://www.espruino.com/Reference#l_Nucleo_D13"
    },
    "D14": {
      "!type": "+Pin",
      "!doc": "",
      "!url": "http://www.espruino.com/Reference#l_Nucleo_D14"
    },
    "D15": {
      "!type": "+Pin",
      "!doc": "",
      "!url": "http://www.espruino.com/Reference#l_Nucleo_D15"
    }
  },
  "NodeMCU": {
    "!type": "fn()",
    "!doc": "<p>This is a built-in class to allow you to use the ESP8266 NodeMCU boards&#39; pin\nnamings to access pins. It is only available on ESP8266-based boards.</p>\n",
    "!url": "http://www.espruino.com/Reference#NodeMCU",
    "A0": {
      "!type": "+Pin",
      "!doc": "",
      "!url": "http://www.espruino.com/Reference#l_NodeMCU_A0"
    },
    "D0": {
      "!type": "+Pin",
      "!doc": "",
      "!url": "http://www.espruino.com/Reference#l_NodeMCU_D0"
    },
    "D1": {
      "!type": "+Pin",
      "!doc": "",
      "!url": "http://www.espruino.com/Reference#l_NodeMCU_D1"
    },
    "D2": {
      "!type": "+Pin",
      "!doc": "",
      "!url": "http://www.espruino.com/Reference#l_NodeMCU_D2"
    },
    "D3": {
      "!type": "+Pin",
      "!doc": "",
      "!url": "http://www.espruino.com/Reference#l_NodeMCU_D3"
    },
    "D4": {
      "!type": "+Pin",
      "!doc": "",
      "!url": "http://www.espruino.com/Reference#l_NodeMCU_D4"
    },
    "D5": {
      "!type": "+Pin",
      "!doc": "",
      "!url": "http://www.espruino.com/Reference#l_NodeMCU_D5"
    },
    "D6": {
      "!type": "+Pin",
      "!doc": "",
      "!url": "http://www.espruino.com/Reference#l_NodeMCU_D6"
    },
    "D7": {
      "!type": "+Pin",
      "!doc": "",
      "!url": "http://www.espruino.com/Reference#l_NodeMCU_D7"
    },
    "D8": {
      "!type": "+Pin",
      "!doc": "",
      "!url": "http://www.espruino.com/Reference#l_NodeMCU_D8"
    },
    "D9": {
      "!type": "+Pin",
      "!doc": "",
      "!url": "http://www.espruino.com/Reference#l_NodeMCU_D9"
    },
    "D10": {
      "!type": "+Pin",
      "!doc": "",
      "!url": "http://www.espruino.com/Reference#l_NodeMCU_D10"
    }
  },
  "Serial": {
    "!type": "fn() -> ?",
    "!doc": "<p>Create a software Serial port. This has limited functionality (only low baud\nrates), but it can work on any pins.</p>\n<p>Use <code>Serial.setup</code> to configure this port.</p>\n",
    "!url": "http://www.espruino.com/Reference#l_Serial_Serial",
    "find": {
      "!type": "fn(pin: +Pin) -> ?",
      "!doc": "<p>Try and find a USART (Serial) hardware device that will work on this pin (e.g.\n<code>Serial1</code>)</p>\n<p>May return undefined if no device can be found.</p>\n",
      "!url": "http://www.espruino.com/Reference#l_Serial_find"
    },
    "prototype": {
      "setConsole": {
        "!type": "fn(force: bool)",
        "!doc": "<p>Set this Serial port as the port for the JavaScript console (REPL).</p>\n<p>Unless <code>force</code> is set to true, changes in the connection state of the board (for\ninstance plugging in USB) will cause the console to change.</p>\n<p>See <code>E.setConsole</code> for a more flexible version of this function.</p>\n",
        "!url": "http://www.espruino.com/Reference#l_Serial_setConsole"
      },
      "setup": {
        "!type": "fn(baudrate: ?, options: ?)",
        "!doc": "<p>Setup this Serial port with the given baud rate and options.</p>\n<p>e.g.</p>\n<pre><code>Serial1.<span class=\"hljs-title function_ invoke__\">setup</span>(<span class=\"hljs-number\">9600</span>,{<span class=\"hljs-attr\">rx</span>:a_pin, <span class=\"hljs-attr\">tx</span>:a_pin});\n</code></pre>\n<p>The second argument can contain:</p>\n<pre><code>{\n  rx:pin,                           // Receive pin (data <span class=\"hljs-keyword\">in</span> <span class=\"hljs-keyword\">to</span> Espruino)\n  tx:pin,                           // Transmit pin (data <span class=\"hljs-keyword\">out</span> <span class=\"hljs-keyword\">of</span> Espruino)\n  ck:pin,                           // (<span class=\"hljs-keyword\">default</span> <span class=\"hljs-keyword\">none</span>) Clock Pin\n  cts:pin,                          // (<span class=\"hljs-keyword\">default</span> <span class=\"hljs-keyword\">none</span>) Clear <span class=\"hljs-keyword\">to</span> Send Pin\n  bytesize:<span class=\"hljs-number\">8</span>,                       // (<span class=\"hljs-keyword\">default</span> <span class=\"hljs-number\">8</span>)How many data bits - <span class=\"hljs-number\">7</span> <span class=\"hljs-keyword\">or</span> <span class=\"hljs-number\">8</span>\n  parity:<span class=\"hljs-keyword\">null</span>/<span class=\"hljs-string\">&#x27;none&#x27;</span>/<span class=\"hljs-string\">&#x27;o&#x27;</span>/<span class=\"hljs-string\">&#x27;odd&#x27;</span>/<span class=\"hljs-string\">&#x27;e&#x27;</span>/<span class=\"hljs-string\">&#x27;even&#x27;</span>,\n                                    // (<span class=\"hljs-keyword\">default</span> <span class=\"hljs-keyword\">none</span>) Parity <span class=\"hljs-type\">bit</span>\n  stopbits:<span class=\"hljs-number\">1</span>,                       // (<span class=\"hljs-keyword\">default</span> <span class=\"hljs-number\">1</span>) Number <span class=\"hljs-keyword\">of</span> stop bits <span class=\"hljs-keyword\">to</span> use\n  flow:<span class=\"hljs-keyword\">null</span>/undefined/<span class=\"hljs-string\">&#x27;none&#x27;</span>/<span class=\"hljs-string\">&#x27;xon&#x27;</span>, // (<span class=\"hljs-keyword\">default</span> <span class=\"hljs-keyword\">none</span>) software flow control\n  <span class=\"hljs-type\">path</span>:<span class=\"hljs-keyword\">null</span>/undefined/string        // Linux <span class=\"hljs-keyword\">Only</span> - the <span class=\"hljs-type\">path</span> <span class=\"hljs-keyword\">to</span> the <span class=\"hljs-type\">Serial</span> device <span class=\"hljs-keyword\">to</span> use\n  errors:<span class=\"hljs-keyword\">false</span>                      // (<span class=\"hljs-keyword\">default</span> <span class=\"hljs-keyword\">false</span>) whether <span class=\"hljs-keyword\">to</span> forward framing/parity errors\n}\n</code></pre>\n<p>You can find out which pins to use by looking at <a href=\"#boards\">your board&#39;s reference\npage</a> and searching for pins with the <code>UART</code>/<code>USART</code> markers.</p>\n<p>If not specified in options, the default pins are used for rx and tx (usually\nthe lowest numbered pins on the lowest port that supports this peripheral). <code>ck</code>\nand <code>cts</code> are not used unless specified.</p>\n<p>Note that even after changing the RX and TX pins, if you have called setup\nbefore then the previous RX and TX pins will still be connected to the Serial\nport as well - until you set them to something else using <code>digitalWrite</code> or\n<code>pinMode</code>.</p>\n<p>Flow control can be xOn/xOff (<code>flow:&#39;xon&#39;</code>) or hardware flow control (receive\nonly) if <code>cts</code> is specified. If <code>cts</code> is set to a pin, the pin&#39;s value will be 0\nwhen Espruino is ready for data and 1 when it isn&#39;t.</p>\n<p>By default, framing or parity errors don&#39;t create <code>framing</code> or <code>parity</code> events\non the <code>Serial</code> object because storing these errors uses up additional storage\nin the queue. If you&#39;re intending to receive a lot of malformed data then the\nqueue might overflow <code>E.getErrorFlags()</code> would return <code>FIFO_FULL</code>. However if\nyou need to respond to <code>framing</code> or <code>parity</code> errors then you&#39;ll need to use\n<code>errors:true</code> when initialising serial.</p>\n<p>On Linux builds there is no default Serial device, so you must specify a path to\na device - for instance: <code>Serial1.setup(9600,{path:&quot;/dev/ttyACM0&quot;})</code></p>\n<p>You can also set up &#39;software serial&#39; using code like:</p>\n<pre><code><span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Serial</span>();\ns.<span class=\"hljs-title function_ invoke__\">setup</span>(<span class=\"hljs-number\">9600</span>,{<span class=\"hljs-attr\">rx</span>:a_pin, <span class=\"hljs-attr\">tx</span>:a_pin});\n</code></pre>\n<p>However software serial doesn&#39;t use <code>ck</code>, <code>cts</code>, <code>parity</code>, <code>flow</code> or <code>errors</code>\nparts of the initialisation object.</p>\n",
        "!url": "http://www.espruino.com/Reference#l_Serial_setup"
      },
      "unsetup": {
        "!type": "fn()",
        "!doc": "<p>If the serial (or software serial) device was set up, uninitialise it.</p>\n",
        "!url": "http://www.espruino.com/Reference#l_Serial_unsetup"
      },
      "print": {
        "!type": "fn(string: ?)",
        "!doc": "<p>Print a string to the serial port - without a line feed</p>\n<p> <strong>Note:</strong> This function replaces any occurrences of <code>\\n</code> in the string with\n <code>\\r\\n</code>. To avoid this, use <code>Serial.write</code>.</p>\n",
        "!url": "http://www.espruino.com/Reference#l_Serial_print"
      },
      "println": {
        "!type": "fn(string: ?)",
        "!doc": "<p>Print a line to the serial port with a newline (<code>\\r\\n</code>) at the end of it.</p>\n<p> <strong>Note:</strong> This function converts data to a string first, e.g.\n <code>Serial.print([1,2,3])</code> is equivalent to <code>Serial.print(&quot;1,2,3&quot;)</code>. If you&#39;d like\n to write raw bytes, use <code>Serial.write</code>.</p>\n",
        "!url": "http://www.espruino.com/Reference#l_Serial_println"
      },
      "write": {
        "!type": "fn(data: ?)",
        "!doc": "<p>Write a character or array of data to the serial port</p>\n<p>This method writes unmodified data, e.g. <code>Serial.write([1,2,3])</code> is equivalent to\n<code>Serial.write(&quot;\\1\\2\\3&quot;)</code>. If you&#39;d like data converted to a string first, use\n<code>Serial.print</code>.</p>\n",
        "!url": "http://www.espruino.com/Reference#l_Serial_write"
      },
      "inject": {
        "!type": "fn(data: ?)",
        "!doc": "<p>Add data to this device as if it came directly from the input - it will be\nreturned via <code>serial.on(&#39;data&#39;, ...)</code>;</p>\n<pre><code>Serial1.on(<span class=\"hljs-string\">&#x27;data&#x27;</span>, <span class=\"hljs-keyword\">function</span>(d) { print(<span class=\"hljs-string\">&quot;Got&quot;</span>,d); });\nSerial1.inject(<span class=\"hljs-string\">&#x27;Hello World&#x27;</span>);\n<span class=\"hljs-regexp\">//</span> prints <span class=\"hljs-string\">&quot;Got Hel&quot;</span>,<span class=\"hljs-string\">&quot;Got lo World&quot;</span> (characters can be split over multiple callbacks)\n</code></pre>\n<p>This is most useful if you wish to send characters to Espruino&#39;s REPL (console)\nwhile it is on another device.</p>\n",
        "!url": "http://www.espruino.com/Reference#l_Serial_inject"
      },
      "available": {
        "!type": "fn() -> number",
        "!doc": "<p>Return how many bytes are available to read. If there is already a listener for\ndata, this will always return 0.</p>\n",
        "!url": "http://www.espruino.com/Reference#l_Serial_available"
      },
      "read": {
        "!type": "fn(chars: number) -> ?",
        "!doc": "<p>Return a string containing characters that have been received</p>\n",
        "!url": "http://www.espruino.com/Reference#l_Serial_read"
      },
      "pipe": {
        "!type": "fn(destination: ?, options: ?)",
        "!doc": "<p>Pipe this USART to a stream (an object with a &#39;write&#39; method)</p>\n",
        "!url": "http://www.espruino.com/Reference#l_Serial_pipe"
      },
      "flush": {
        "!type": "fn()",
        "!doc": "<p>Flush this serial stream (pause execution until all data has been sent)</p>\n",
        "!url": "http://www.espruino.com/Reference#l_Serial_flush"
      },
      "isConnected": {
        "!type": "fn() -> bool",
        "!doc": "<p>(Added 2v25) Is the given Serial device connected?</p>\n<ul>\n<li>USB/Bluetooth/Telnet/etc: Is this connected?</li>\n<li>Serial1/etc: Has the device been initialised?</li>\n<li>LoopbackA/LoopbackB/Terminal: always return true</li>\n</ul>\n",
        "!url": "http://www.espruino.com/Reference#l_Serial_isConnected"
      }
    }
  },
  "USB": {
    "!type": "+Serial",
    "!doc": "<p>The USB Serial port</p>\n",
    "!url": "http://www.espruino.com/Reference#l__global_USB"
  },
  "Serial1": {
    "!type": "+Serial",
    "!doc": "<p>The first Serial (USART) port</p>\n",
    "!url": "http://www.espruino.com/Reference#l__global_Serial1"
  },
  "Serial2": {
    "!type": "+Serial",
    "!doc": "<p>The second Serial (USART) port</p>\n",
    "!url": "http://www.espruino.com/Reference#l__global_Serial2"
  },
  "Serial3": {
    "!type": "+Serial",
    "!doc": "<p>The third Serial (USART) port</p>\n",
    "!url": "http://www.espruino.com/Reference#l__global_Serial3"
  },
  "Serial4": {
    "!type": "+Serial",
    "!doc": "<p>The fourth Serial (USART) port</p>\n",
    "!url": "http://www.espruino.com/Reference#l__global_Serial4"
  },
  "Serial5": {
    "!type": "+Serial",
    "!doc": "<p>The fifth Serial (USART) port</p>\n",
    "!url": "http://www.espruino.com/Reference#l__global_Serial5"
  },
  "Serial6": {
    "!type": "+Serial",
    "!doc": "<p>The sixth Serial (USART) port</p>\n",
    "!url": "http://www.espruino.com/Reference#l__global_Serial6"
  },
  "LoopbackA": {
    "!type": "+Serial",
    "!doc": "<p>A loopback serial device. Data sent to <code>LoopbackA</code> comes out of <code>LoopbackB</code> and\nvice versa</p>\n",
    "!url": "http://www.espruino.com/Reference#l__global_LoopbackA"
  },
  "LoopbackB": {
    "!type": "+Serial",
    "!doc": "<p>A loopback serial device. Data sent to <code>LoopbackA</code> comes out of <code>LoopbackB</code> and\nvice versa</p>\n",
    "!url": "http://www.espruino.com/Reference#l__global_LoopbackB"
  },
  "Telnet": {
    "!doc": "<p>A telnet serial device that maps to the built-in telnet console server (devices\nthat have built-in wifi only).</p>\n",
    "!url": "http://www.espruino.com/Reference#l__global_Telnet"
  },
  "ArrayBuffer": {
    "!type": "fn(byteLength: number) -> ?",
    "!doc": "<p>Create an Array Buffer object</p>\n",
    "!url": "http://www.espruino.com/Reference#l_ArrayBuffer_ArrayBuffer",
    "prototype": {
      "byteLength": {
        "!type": "number",
        "!doc": "<p>The length, in bytes, of the <code>ArrayBuffer</code></p>\n",
        "!url": "http://www.espruino.com/Reference#l_ArrayBuffer_byteLength"
      }
    }
  },
  "ArrayBufferView": {
    "!type": "fn()",
    "!doc": "<p>This is the built-in JavaScript class that is the prototype for:</p>\n<ul>\n<li><a href=\"/Reference#Uint8Array\">Uint8Array</a></li>\n<li><a href=\"/Reference#UintClamped8Array\">UintClamped8Array</a></li>\n<li><a href=\"/Reference#Int8Array\">Int8Array</a></li>\n<li><a href=\"/Reference#Uint16Array\">Uint16Array</a></li>\n<li><a href=\"/Reference#Int16Array\">Int16Array</a></li>\n<li><a href=\"/Reference#Uint24Array\">Uint24Array</a> (Espruino-specific - not standard JS)</li>\n<li><a href=\"/Reference#Uint32Array\">Uint32Array</a></li>\n<li><a href=\"/Reference#Int32Array\">Int32Array</a></li>\n<li><a href=\"/Reference#Float32Array\">Float32Array</a></li>\n<li><a href=\"/Reference#Float64Array\">Float64Array</a></li>\n</ul>\n<p>If you want to access arrays of differing types of data you may also find\n<code>DataView</code> useful.</p>\n",
    "!url": "http://www.espruino.com/Reference#ArrayBufferView",
    "prototype": {
      "buffer": {
        "!type": "?",
        "!doc": "<p>The buffer this view references</p>\n",
        "!url": "http://www.espruino.com/Reference#l_ArrayBufferView_buffer"
      },
      "byteLength": {
        "!type": "number",
        "!doc": "<p>The length, in bytes, of the <code>ArrayBufferView</code></p>\n",
        "!url": "http://www.espruino.com/Reference#l_ArrayBufferView_byteLength"
      },
      "byteOffset": {
        "!type": "number",
        "!doc": "<p>The offset, in bytes, to the first byte of the view within the backing\n<code>ArrayBuffer</code></p>\n",
        "!url": "http://www.espruino.com/Reference#l_ArrayBufferView_byteOffset"
      },
      "set": {
        "!type": "fn(arr: ?, offset: number)",
        "!doc": "<p>Copy the contents of <code>array</code> into this one, mapping <code>this[x+offset]=array[x];</code></p>\n",
        "!url": "http://www.espruino.com/Reference#l_ArrayBufferView_set"
      },
      "map": {
        "!type": "fn(function: ?, thisArg: ?) -> +ArrayBufferView",
        "!doc": "<p>Return an array which is made from the following: <code>A.map(function) = [function(A[0]), function(A[1]), ...]</code></p>\n<p> <strong>Note:</strong> This returns an <code>ArrayBuffer</code> of the same type it was called on. To\n get an <code>Array</code>, use <code>Array.map</code>, e.g. <code>[].map.call(myArray, x=&gt;x+1)</code></p>\n",
        "!url": "http://www.espruino.com/Reference#l_ArrayBufferView_map"
      },
      "subarray": {
        "!type": "fn(begin: number, end: ?) -> +ArrayBufferView",
        "!doc": "<p>Returns a smaller part of this array which references the same data (it doesn&#39;t\ncopy it).</p>\n",
        "!url": "http://www.espruino.com/Reference#l_ArrayBufferView_subarray"
      },
      "indexOf": {
        "!type": "fn(value: ?, startIndex: number) -> ?",
        "!doc": "<p>Return the index of the value in the array, or <code>-1</code></p>\n",
        "!url": "http://www.espruino.com/Reference#l_ArrayBufferView_indexOf"
      },
      "includes": {
        "!type": "fn(value: ?, startIndex: number) -> bool",
        "!doc": "<p>Return <code>true</code> if the array includes the value, <code>false</code> otherwise</p>\n",
        "!url": "http://www.espruino.com/Reference#l_ArrayBufferView_includes"
      },
      "join": {
        "!type": "fn(separator: ?) -> ?",
        "!doc": "<p>Join all elements of this array together into one string, using &#39;separator&#39;\nbetween them. e.g. <code>[1,2,3].join(&#39; &#39;)==&#39;1 2 3&#39;</code></p>\n",
        "!url": "http://www.espruino.com/Reference#l_ArrayBufferView_join"
      },
      "sort": {
        "!type": "fn(var: ?) -> +ArrayBufferView",
        "!doc": "<p>Do an in-place quicksort of the array</p>\n",
        "!url": "http://www.espruino.com/Reference#l_ArrayBufferView_sort"
      },
      "forEach": {
        "!type": "fn(function: ?, thisArg: ?)",
        "!doc": "<p>Executes a provided function once per array element.</p>\n",
        "!url": "http://www.espruino.com/Reference#l_ArrayBufferView_forEach"
      },
      "reduce": {
        "!type": "fn(callback: ?, initialValue: ?) -> ?",
        "!doc": "<p>Execute <code>previousValue=initialValue</code> and then <code>previousValue = callback(previousValue, currentValue, index, array)</code> for each element in the\narray, and finally return previousValue.</p>\n",
        "!url": "http://www.espruino.com/Reference#l_ArrayBufferView_reduce"
      },
      "fill": {
        "!type": "fn(value: ?, start: number, end: ?) -> +ArrayBufferView",
        "!doc": "<p>Fill this array with the given value, for every index <code>&gt;= start</code> and <code>&lt; end</code></p>\n",
        "!url": "http://www.espruino.com/Reference#l_ArrayBufferView_fill"
      },
      "filter": {
        "!type": "fn(function: ?, thisArg: ?) -> ?",
        "!doc": "<p>Return an array which contains only those elements for which the callback\nfunction returns &#39;true&#39;</p>\n",
        "!url": "http://www.espruino.com/Reference#l_ArrayBufferView_filter"
      },
      "find": {
        "!type": "fn(function: ?) -> ?",
        "!doc": "<p>Return the array element where <code>function</code> returns <code>true</code>, or <code>undefined</code> if it\ndoesn&#39;t returns <code>true</code> for any element.</p>\n",
        "!url": "http://www.espruino.com/Reference#l_ArrayBufferView_find"
      },
      "findIndex": {
        "!type": "fn(function: ?) -> ?",
        "!doc": "<p>Return the array element&#39;s index where <code>function</code> returns <code>true</code>, or <code>-1</code> if it\ndoesn&#39;t returns <code>true</code> for any element.</p>\n",
        "!url": "http://www.espruino.com/Reference#l_ArrayBufferView_findIndex"
      },
      "reverse": {
        "!type": "fn() -> +ArrayBufferView",
        "!doc": "<p>Reverse the contents of this <code>ArrayBufferView</code> in-place</p>\n",
        "!url": "http://www.espruino.com/Reference#l_ArrayBufferView_reverse"
      },
      "slice": {
        "!type": "fn(start: number, end: ?) -> +Array",
        "!doc": "<p>Return a copy of a portion of this array (in a new array).</p>\n<p> <strong>Note:</strong> This currently returns a normal <code>Array</code>, not an <code>ArrayBuffer</code></p>\n",
        "!url": "http://www.espruino.com/Reference#l_ArrayBufferView_slice"
      }
    }
  },
  "Uint8Array": {
    "!type": "fn(arr: ?, byteOffset: number, length: number) -> +ArrayBufferView",
    "!doc": "<p>Create a typed array based on the given input. Either an existing Array Buffer,\nan Integer as a Length, or a simple array. If an <code>ArrayBufferView</code> (e.g.\n<code>Uint8Array</code> rather than <code>ArrayBuffer</code>) is given, it will be completely copied\nrather than referenced.</p>\n",
    "!url": "http://www.espruino.com/Reference#l_Uint8Array_Uint8Array",
    "prototype": {
      "!proto": "ArrayBufferView.prototype"
    }
  },
  "Uint8ClampedArray": {
    "!type": "fn(arr: ?, byteOffset: number, length: number) -> +ArrayBufferView",
    "!doc": "<p>Create a typed array based on the given input. Either an existing Array Buffer,\nan Integer as a Length, or a simple array. If an <code>ArrayBufferView</code> (e.g.\n<code>Uint8Array</code> rather than <code>ArrayBuffer</code>) is given, it will be completely copied\nrather than referenced.</p>\n<p>Clamped arrays clamp their values to the allowed range, rather than &#39;wrapping&#39;.\ne.g. after <code>a[0]=12345;</code>, <code>a[0]==255</code>.</p>\n",
    "!url": "http://www.espruino.com/Reference#l_Uint8ClampedArray_Uint8ClampedArray",
    "prototype": {
      "!proto": "ArrayBufferView.prototype"
    }
  },
  "Int8Array": {
    "!type": "fn(arr: ?, byteOffset: number, length: number) -> +ArrayBufferView",
    "!doc": "<p>Create a typed array based on the given input. Either an existing Array Buffer,\nan Integer as a Length, or a simple array. If an <code>ArrayBufferView</code> (e.g.\n<code>Uint8Array</code> rather than <code>ArrayBuffer</code>) is given, it will be completely copied\nrather than referenced.</p>\n",
    "!url": "http://www.espruino.com/Reference#l_Int8Array_Int8Array",
    "prototype": {
      "!proto": "ArrayBufferView.prototype"
    }
  },
  "Uint16Array": {
    "!type": "fn(arr: ?, byteOffset: number, length: number) -> +ArrayBufferView",
    "!doc": "<p>Create a typed array based on the given input. Either an existing Array Buffer,\nan Integer as a Length, or a simple array. If an <code>ArrayBufferView</code> (e.g.\n<code>Uint8Array</code> rather than <code>ArrayBuffer</code>) is given, it will be completely copied\nrather than referenced.</p>\n",
    "!url": "http://www.espruino.com/Reference#l_Uint16Array_Uint16Array",
    "prototype": {
      "!proto": "ArrayBufferView.prototype"
    }
  },
  "Int16Array": {
    "!type": "fn(arr: ?, byteOffset: number, length: number) -> +ArrayBufferView",
    "!doc": "<p>Create a typed array based on the given input. Either an existing Array Buffer,\nan Integer as a Length, or a simple array. If an <code>ArrayBufferView</code> (e.g.\n<code>Uint8Array</code> rather than <code>ArrayBuffer</code>) is given, it will be completely copied\nrather than referenced.</p>\n",
    "!url": "http://www.espruino.com/Reference#l_Int16Array_Int16Array",
    "prototype": {
      "!proto": "ArrayBufferView.prototype"
    }
  },
  "Uint24Array": {
    "!type": "fn(arr: ?, byteOffset: number, length: number) -> +ArrayBufferView",
    "!doc": "<p>Create a typed array based on the given input. Either an existing Array Buffer,\nan Integer as a Length, or a simple array. If an <code>ArrayBufferView</code> (e.g.\n<code>Uint8Array</code> rather than <code>ArrayBuffer</code>) is given, it will be completely copied\nrather than referenced.</p>\n",
    "!url": "http://www.espruino.com/Reference#l_Uint24Array_Uint24Array",
    "prototype": {
      "!proto": "ArrayBufferView.prototype"
    }
  },
  "Uint32Array": {
    "!type": "fn(arr: ?, byteOffset: number, length: number) -> +ArrayBufferView",
    "!doc": "<p>Create a typed array based on the given input. Either an existing Array Buffer,\nan Integer as a Length, or a simple array. If an <code>ArrayBufferView</code> (e.g.\n<code>Uint8Array</code> rather than <code>ArrayBuffer</code>) is given, it will be completely copied\nrather than referenced.</p>\n",
    "!url": "http://www.espruino.com/Reference#l_Uint32Array_Uint32Array",
    "prototype": {
      "!proto": "ArrayBufferView.prototype"
    }
  },
  "Int32Array": {
    "!type": "fn(arr: ?, byteOffset: number, length: number) -> +ArrayBufferView",
    "!doc": "<p>Create a typed array based on the given input. Either an existing Array Buffer,\nan Integer as a Length, or a simple array. If an <code>ArrayBufferView</code> (e.g.\n<code>Uint8Array</code> rather than <code>ArrayBuffer</code>) is given, it will be completely copied\nrather than referenced.</p>\n",
    "!url": "http://www.espruino.com/Reference#l_Int32Array_Int32Array",
    "prototype": {
      "!proto": "ArrayBufferView.prototype"
    }
  },
  "Float32Array": {
    "!type": "fn(arr: ?, byteOffset: number, length: number) -> +ArrayBufferView",
    "!doc": "<p>Create a typed array based on the given input. Either an existing Array Buffer,\nan Integer as a Length, or a simple array. If an <code>ArrayBufferView</code> (e.g.\n<code>Uint8Array</code> rather than <code>ArrayBuffer</code>) is given, it will be completely copied\nrather than referenced.</p>\n",
    "!url": "http://www.espruino.com/Reference#l_Float32Array_Float32Array",
    "prototype": {
      "!proto": "ArrayBufferView.prototype"
    }
  },
  "Float64Array": {
    "!type": "fn(arr: ?, byteOffset: number, length: number) -> +ArrayBufferView",
    "!doc": "<p>Create a typed array based on the given input. Either an existing Array Buffer,\nan Integer as a Length, or a simple array. If an <code>ArrayBufferView</code> (e.g.\n<code>Uint8Array</code> rather than <code>ArrayBuffer</code>) is given, it will be completely copied\nrather than referenced.</p>\n",
    "!url": "http://www.espruino.com/Reference#l_Float64Array_Float64Array",
    "prototype": {
      "!proto": "ArrayBufferView.prototype"
    }
  },
  "String": {
    "!type": "fn(str: ?) -> ?",
    "!doc": "<p>Create a new String</p>\n",
    "!url": "http://www.espruino.com/Reference#l_String_String",
    "prototype": {
      "!stdProto": "String",
      "length": {
        "!type": "?",
        "!doc": "<p>Find the length of the string</p>\n",
        "!url": "http://www.espruino.com/Reference#l_String_length"
      },
      "charAt": {
        "!type": "fn(pos: number) -> ?",
        "!doc": "<p>Return a single character at the given position in the String.</p>\n",
        "!url": "http://www.espruino.com/Reference#l_String_charAt"
      },
      "charCodeAt": {
        "!type": "fn(pos: number) -> ?",
        "!doc": "<p>Return the integer value of a single character at the given position in the\nString.</p>\n",
        "!url": "http://www.espruino.com/Reference#l_String_charCodeAt"
      },
      "indexOf": {
        "!type": "fn(substring: ?, fromIndex: ?) -> number",
        "!doc": "<p>Return the index of substring in this string, or -1 if not found</p>\n",
        "!url": "http://www.espruino.com/Reference#l_String_indexOf"
      },
      "lastIndexOf": {
        "!type": "fn(substring: ?, fromIndex: ?) -> number",
        "!doc": "<p>Return the last index of substring in this string, or -1 if not found</p>\n",
        "!url": "http://www.espruino.com/Reference#l_String_lastIndexOf"
      },
      "match": {
        "!type": "fn(substr: ?) -> ?",
        "!doc": "<p>Matches an occurrence <code>subStr</code> in the string.</p>\n<p>Returns <code>null</code> if no match, or:</p>\n<pre><code><span class=\"hljs-string\">&quot;abcdef&quot;</span>.<span class=\"hljs-keyword\">match</span>(<span class=\"hljs-string\">&quot;b&quot;</span>) == [\n  <span class=\"hljs-string\">&quot;b&quot;</span>,         // array <span class=\"hljs-built_in\">index</span> <span class=\"hljs-number\">0</span> - the matched <span class=\"hljs-built_in\">string</span>\n  <span class=\"hljs-built_in\">index</span>: <span class=\"hljs-number\">1</span>,    // the start <span class=\"hljs-built_in\">index</span> of the <span class=\"hljs-keyword\">match</span>\n  <span class=\"hljs-built_in\">input</span>: <span class=\"hljs-string\">&quot;b&quot;</span>   // the <span class=\"hljs-built_in\">input</span> <span class=\"hljs-built_in\">string</span>\n ]\n<span class=\"hljs-string\">&quot;abcdefabcdef&quot;</span>.<span class=\"hljs-keyword\">match</span>(/bcd/) == [\n  <span class=\"hljs-string\">&quot;bcd&quot;</span>, <span class=\"hljs-built_in\">index</span>: <span class=\"hljs-number\">1</span>,\n  <span class=\"hljs-built_in\">input</span>: <span class=\"hljs-string\">&quot;abcdefabcdef&quot;</span>\n ]\n</code></pre>\n<p>&#39;Global&#39; RegExp matches just return an array of matches (with no indices):</p>\n<pre><code><span class=\"hljs-string\">&quot;abcdefabcdef&quot;</span>.match(<span class=\"hljs-regexp\">/bcd/g</span>) = [\n  <span class=\"hljs-string\">&quot;bcd&quot;</span>,\n  <span class=\"hljs-string\">&quot;bcd&quot;</span>\n ]\n</code></pre>\n",
        "!url": "http://www.espruino.com/Reference#l_String_match"
      },
      "replace": {
        "!type": "fn(subStr: ?, newSubStr: ?) -> ?",
        "!doc": "<p>Search and replace ONE occurrence of <code>subStr</code> with <code>newSubStr</code> and return the\nresult. This doesn&#39;t alter the original string.</p>\n",
        "!url": "http://www.espruino.com/Reference#l_String_replace"
      },
      "replaceAll": {
        "!type": "fn(subStr: ?, newSubStr: ?) -> ?",
        "!doc": "<p>Search and replace ALL occurrences of <code>subStr</code> with <code>newSubStr</code> and return the\nresult. This doesn&#39;t alter the original string.</p>\n",
        "!url": "http://www.espruino.com/Reference#l_String_replaceAll"
      },
      "substring": {
        "!type": "fn(start: number, end: ?) -> ?",
        "!doc": "",
        "!url": "http://www.espruino.com/Reference#l_String_substring"
      },
      "substr": {
        "!type": "fn(start: number, len: ?) -> ?",
        "!doc": "",
        "!url": "http://www.espruino.com/Reference#l_String_substr"
      },
      "slice": {
        "!type": "fn(start: number, end: ?) -> ?",
        "!doc": "",
        "!url": "http://www.espruino.com/Reference#l_String_slice"
      },
      "split": {
        "!type": "fn(separator: ?) -> ?",
        "!doc": "<p>Return an array made by splitting this string up by the separator. e.g.\n<code>&#39;1,2,3&#39;.split(&#39;,&#39;)==[&#39;1&#39;, &#39;2&#39;, &#39;3&#39;]</code></p>\n<p>Regular Expressions can also be used to split strings, e.g. <code>&#39;1a2b3 4&#39;.split(/[^0-9]/)==[&#39;1&#39;, &#39;2&#39;, &#39;3&#39;, &#39;4&#39;]</code>.</p>\n",
        "!url": "http://www.espruino.com/Reference#l_String_split"
      },
      "toLowerCase": {
        "!type": "fn() -> ?",
        "!doc": "",
        "!url": "http://www.espruino.com/Reference#l_String_toLowerCase"
      },
      "toUpperCase": {
        "!type": "fn() -> ?",
        "!doc": "",
        "!url": "http://www.espruino.com/Reference#l_String_toUpperCase"
      },
      "removeAccents": {
        "!type": "fn() -> ?",
        "!doc": "<p>This is not a standard JavaScript function, but is provided to allow use of fonts\nthat only support ASCII (char codes 0..127, like the 4x6 font) with character input\nthat might be in the ISO8859-1 range.</p>\n",
        "!url": "http://www.espruino.com/Reference#l_String_removeAccents"
      },
      "trim": {
        "!type": "fn() -> +String",
        "!doc": "<p>Return a new string with any whitespace (tabs, space, form feed, newline,\ncarriage return, etc) removed from the beginning and end.</p>\n",
        "!url": "http://www.espruino.com/Reference#l_String_trim"
      },
      "concat": {
        "!type": "fn(args: ?) -> ?",
        "!doc": "<p>Append all arguments to this <code>String</code> and return the result. Does not modify the\noriginal <code>String</code>.</p>\n",
        "!url": "http://www.espruino.com/Reference#l_String_concat"
      },
      "startsWith": {
        "!type": "fn(searchString: ?, position: number) -> bool",
        "!doc": "",
        "!url": "http://www.espruino.com/Reference#l_String_startsWith"
      },
      "endsWith": {
        "!type": "fn(searchString: ?, length: ?) -> bool",
        "!doc": "",
        "!url": "http://www.espruino.com/Reference#l_String_endsWith"
      },
      "includes": {
        "!type": "fn(substring: ?, fromIndex: ?) -> bool",
        "!doc": "",
        "!url": "http://www.espruino.com/Reference#l_String_includes"
      },
      "repeat": {
        "!type": "fn(count: number) -> +String",
        "!doc": "<p>Repeat this string the given number of times.</p>\n",
        "!url": "http://www.espruino.com/Reference#l_String_repeat"
      },
      "padStart": {
        "!type": "fn(targetLength: number, padString: ?) -> +String",
        "!doc": "<p>Pad this string at the beginning to the required number of characters</p>\n<pre><code><span class=\"hljs-string\">&quot;Hello&quot;</span>.pad<span class=\"hljs-constructor\">Start(10)</span><span class=\"hljs-operator\"> == </span><span class=\"hljs-string\">&quot;     Hello&quot;</span>\n<span class=\"hljs-string\">&quot;123&quot;</span>.pad<span class=\"hljs-constructor\">Start(10,<span class=\"hljs-string\">&quot;.-&quot;</span>)</span><span class=\"hljs-operator\"> == </span><span class=\"hljs-string\">&quot;.-.-.-.123&quot;</span>\n</code></pre>\n",
        "!url": "http://www.espruino.com/Reference#l_String_padStart"
      },
      "padEnd": {
        "!type": "fn(targetLength: number, padString: ?) -> +String",
        "!doc": "<p>Pad this string at the end to the required number of characters</p>\n<pre><code><span class=\"hljs-string\">&quot;Hello&quot;</span>.pad<span class=\"hljs-constructor\">End(10)</span><span class=\"hljs-operator\"> == </span><span class=\"hljs-string\">&quot;Hello     &quot;</span>\n<span class=\"hljs-string\">&quot;123&quot;</span>.pad<span class=\"hljs-constructor\">End(10,<span class=\"hljs-string\">&quot;.-&quot;</span>)</span><span class=\"hljs-operator\"> == </span><span class=\"hljs-string\">&quot;123.-.-.-.&quot;</span>\n</code></pre>\n",
        "!url": "http://www.espruino.com/Reference#l_String_padEnd"
      }
    },
    "fromCharCode": {
      "!type": "fn(code: ?) -> ?",
      "!doc": "<p>Return the character(s) represented by the given character code(s).</p>\n",
      "!url": "http://www.espruino.com/Reference#l_String_fromCharCode"
    }
  },
  "Promise": {
    "!type": "fn(executor: ?) -> ?",
    "!doc": "<p>Create a new Promise. The executor function is executed immediately (before the\nconstructor even returns) and</p>\n",
    "!url": "http://www.espruino.com/Reference#l_Promise_Promise",
    "all": {
      "!type": "fn(promises: ?) -> ?",
      "!doc": "<p>Return a new promise that is resolved when all promises in the supplied array\nare resolved.</p>\n",
      "!url": "http://www.espruino.com/Reference#l_Promise_all"
    },
    "resolve": {
      "!type": "fn(promises: ?) -> ?",
      "!doc": "<p>Return a new promise that is already resolved (at idle it&#39;ll call <code>.then</code>)</p>\n",
      "!url": "http://www.espruino.com/Reference#l_Promise_resolve"
    },
    "reject": {
      "!type": "fn(promises: ?) -> ?",
      "!doc": "<p>Return a new promise that is already rejected (at idle it&#39;ll call <code>.catch</code>)</p>\n",
      "!url": "http://www.espruino.com/Reference#l_Promise_reject"
    },
    "prototype": {
      "then": {
        "!type": "fn(onFulfilled: ?, onRejected: ?) -> ?",
        "!doc": "",
        "!url": "http://www.espruino.com/Reference#l_Promise_then"
      },
      "catch": {
        "!type": "fn(onRejected: ?) -> ?",
        "!doc": "",
        "!url": "http://www.espruino.com/Reference#l_Promise_catch"
      }
    }
  },
  "Waveform": {
    "!type": "fn(samples: ?, options: ?) -> ?",
    "!doc": "<p>Create a waveform class. This allows high speed input and output of waveforms.\nIt has an internal variable called <code>buffer</code> (as well as <code>buffer2</code> when\ndouble-buffered - see <code>options</code> below) which contains the data to input/output.</p>\n<p>Options can contain:</p>\n<pre><code>{\n  doubleBuffer : <span class=\"hljs-type\">bool</span>   // whether <span class=\"hljs-keyword\">to</span> allocate two <span class=\"hljs-keyword\">buffers</span> <span class=\"hljs-keyword\">or</span> <span class=\"hljs-keyword\">not</span> (<span class=\"hljs-keyword\">default</span> <span class=\"hljs-keyword\">false</span>)\n  bits         : <span class=\"hljs-number\">8</span>/<span class=\"hljs-number\">16</span>   // the amount <span class=\"hljs-keyword\">of</span> bits <span class=\"hljs-keyword\">to</span> use (<span class=\"hljs-keyword\">default</span> <span class=\"hljs-number\">8</span>).\n}\n</code></pre>\n<p>When double-buffered, a &#39;buffer&#39; event will be emitted each time a buffer is\nfinished with (the argument is that buffer). When the recording stops, a\n&#39;finish&#39; event will be emitted (with the first argument as the buffer).</p>\n<pre><code><span class=\"hljs-comment\">// Output a sine wave</span>\nvar w = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-constructor\">Waveform(1000)</span>;\n<span class=\"hljs-keyword\">for</span> (var i=<span class=\"hljs-number\">0</span>;i&lt;<span class=\"hljs-number\">1000</span>;i++) w.buffer<span class=\"hljs-literal\">[<span class=\"hljs-identifier\">i</span>]</span>=<span class=\"hljs-number\">128</span>+<span class=\"hljs-number\">120</span>*<span class=\"hljs-module-access\"><span class=\"hljs-module\"><span class=\"hljs-identifier\">Math</span>.</span></span>sin(i/<span class=\"hljs-number\">2</span>);\nanalog<span class=\"hljs-constructor\">Write(H0, 0.5, {<span class=\"hljs-params\">freq</span>:80000})</span>; <span class=\"hljs-comment\">// set up H0 to output an analog value by PWM</span>\nw.on(<span class=\"hljs-string\">&quot;finish&quot;</span>,<span class=\"hljs-function\"> <span class=\"hljs-params\">()</span> =&gt;</span> print(<span class=\"hljs-string\">&quot;Done!&quot;</span>))\nw.start<span class=\"hljs-constructor\">Output(H0,8000)</span>; <span class=\"hljs-comment\">// start playback</span>\n</code></pre>\n<pre><code><span class=\"hljs-regexp\">//</span> On <span class=\"hljs-number\">2</span>v25, <span class=\"hljs-keyword\">from</span> Storage\nvar f = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">&quot;Storage&quot;</span>).read(<span class=\"hljs-string\">&quot;sound.pcm&quot;</span>);\nvar w = <span class=\"hljs-keyword\">new</span> Waveform(E.toArrayBuffer(f));\nw.<span class=\"hljs-literal\">on</span>(<span class=\"hljs-string\">&quot;finish&quot;</span>, <span class=\"hljs-function\"><span class=\"hljs-params\">()</span> =&gt;</span> <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">&quot;Done!&quot;</span>))\nw.startOutput(H0,<span class=\"hljs-number\">8000</span>); <span class=\"hljs-regexp\">//</span> start playback\n</code></pre>\n<p>See <a href=\"https://www.espruino.com/Waveform\">https://www.espruino.com/Waveform</a> for more examples.</p>\n",
    "!url": "http://www.espruino.com/Reference#l_Waveform_Waveform",
    "prototype": {
      "startOutput": {
        "!type": "fn(output: +Pin, freq: number, options: ?)",
        "!doc": "<p>Will start outputting the waveform on the given pin - the pin must have\npreviously been initialised with analogWrite. If not repeating, it&#39;ll emit a\n<code>finish</code> event when it is done.</p>\n<pre><code>{\n  time : <span class=\"hljs-built_in\">float</span>,        <span class=\"hljs-comment\">// the that the waveform with start output at, e.g. `getTime()+1` (otherwise it is immediate)</span>\n  repeat : <span class=\"hljs-built_in\">bool</span>,       <span class=\"hljs-comment\">// whether to repeat the given sample</span>\n  npin : Pin,          <span class=\"hljs-comment\">// If specified, the waveform is output across two pins (see below)</span>\n}\n</code></pre>\n<p>Using <code>npin</code> allows you to split the Waveform output between two pins and hence avoid\nany DC bias (or need to capacitor), for instance you could attach a speaker to <code>H0</code> and\n<code>H1</code> on Jolt.js. When the value in the waveform was at 50% both outputs would be 0,\nbelow 50% the signal would be on <code>npin</code> with <code>pin</code> as 0, and above 50% it would be on <code>pin</code> with <code>npin</code> as 0.</p>\n",
        "!url": "http://www.espruino.com/Reference#l_Waveform_startOutput"
      },
      "startInput": {
        "!type": "fn(output: +Pin, freq: number, options: ?)",
        "!doc": "<p>Will start inputting the waveform on the given pin that supports analog. If not\nrepeating, it&#39;ll emit a <code>finish</code> event when it is done.</p>\n",
        "!url": "http://www.espruino.com/Reference#l_Waveform_startInput"
      },
      "stop": {
        "!type": "fn()",
        "!doc": "<p>Stop a waveform that is currently outputting</p>\n",
        "!url": "http://www.espruino.com/Reference#l_Waveform_stop"
      }
    }
  },
  "Number": {
    "!type": "fn(value: ?) -> ?",
    "!doc": "<p>Creates a number</p>\n",
    "!url": "http://www.espruino.com/Reference#l_Number_Number",
    "NaN": {
      "!type": "number",
      "!doc": "",
      "!url": "http://www.espruino.com/Reference#l_Number_NaN"
    },
    "MAX_VALUE": {
      "!type": "number",
      "!doc": "",
      "!url": "http://www.espruino.com/Reference#l_Number_MAX_VALUE"
    },
    "MIN_VALUE": {
      "!type": "number",
      "!doc": "",
      "!url": "http://www.espruino.com/Reference#l_Number_MIN_VALUE"
    },
    "NEGATIVE_INFINITY": {
      "!type": "number",
      "!doc": "",
      "!url": "http://www.espruino.com/Reference#l_Number_NEGATIVE_INFINITY"
    },
    "POSITIVE_INFINITY": {
      "!type": "number",
      "!doc": "",
      "!url": "http://www.espruino.com/Reference#l_Number_POSITIVE_INFINITY"
    },
    "prototype": {
      "!stdProto": "Number",
      "toFixed": {
        "!type": "fn(decimalPlaces: number) -> ?",
        "!doc": "<p>Format the number as a fixed point number</p>\n",
        "!url": "http://www.espruino.com/Reference#l_Number_toFixed"
      }
    }
  },
  "DataView": {
    "!type": "fn(buffer: ?, byteOffset: number, byteLength: number) -> +DataView",
    "!doc": "<p>Create a <code>DataView</code> object that can be used to access the data in an\n<code>ArrayBuffer</code>.</p>\n<pre><code>var b = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-constructor\">ArrayBuffer(8)</span>\nvar v = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-constructor\">DataView(<span class=\"hljs-params\">b</span>)</span>\nv.set<span class=\"hljs-constructor\">Uint16(0,<span class=\"hljs-string\">&quot;0x1234&quot;</span>)</span>\nv.set<span class=\"hljs-constructor\">Uint8(3,<span class=\"hljs-string\">&quot;0x56&quot;</span>)</span>\nconsole.log(<span class=\"hljs-string\">&quot;0x&quot;</span>+v.get<span class=\"hljs-constructor\">Uint32(0)</span>.<span class=\"hljs-keyword\">to</span><span class=\"hljs-constructor\">String(16)</span>)\n<span class=\"hljs-comment\">// prints 0x12340056</span>\n</code></pre>\n",
    "!url": "http://www.espruino.com/Reference#l_DataView_DataView",
    "prototype": {
      "getFloat32": {
        "!type": "fn(byteOffset: number, littleEndian: bool) -> ?",
        "!doc": "",
        "!url": "http://www.espruino.com/Reference#l_DataView_getFloat32"
      },
      "getFloat64": {
        "!type": "fn(byteOffset: number, littleEndian: bool) -> ?",
        "!doc": "",
        "!url": "http://www.espruino.com/Reference#l_DataView_getFloat64"
      },
      "getInt8": {
        "!type": "fn(byteOffset: number, littleEndian: bool) -> ?",
        "!doc": "",
        "!url": "http://www.espruino.com/Reference#l_DataView_getInt8"
      },
      "getInt16": {
        "!type": "fn(byteOffset: number, littleEndian: bool) -> ?",
        "!doc": "",
        "!url": "http://www.espruino.com/Reference#l_DataView_getInt16"
      },
      "getInt32": {
        "!type": "fn(byteOffset: number, littleEndian: bool) -> ?",
        "!doc": "",
        "!url": "http://www.espruino.com/Reference#l_DataView_getInt32"
      },
      "getUint8": {
        "!type": "fn(byteOffset: number, littleEndian: bool) -> ?",
        "!doc": "",
        "!url": "http://www.espruino.com/Reference#l_DataView_getUint8"
      },
      "getUint16": {
        "!type": "fn(byteOffset: number, littleEndian: bool) -> ?",
        "!doc": "",
        "!url": "http://www.espruino.com/Reference#l_DataView_getUint16"
      },
      "getUint32": {
        "!type": "fn(byteOffset: number, littleEndian: bool) -> ?",
        "!doc": "",
        "!url": "http://www.espruino.com/Reference#l_DataView_getUint32"
      },
      "setFloat32": {
        "!type": "fn(byteOffset: number, value: ?, littleEndian: bool)",
        "!doc": "",
        "!url": "http://www.espruino.com/Reference#l_DataView_setFloat32"
      },
      "setFloat64": {
        "!type": "fn(byteOffset: number, value: ?, littleEndian: bool)",
        "!doc": "",
        "!url": "http://www.espruino.com/Reference#l_DataView_setFloat64"
      },
      "setInt8": {
        "!type": "fn(byteOffset: number, value: ?, littleEndian: bool)",
        "!doc": "",
        "!url": "http://www.espruino.com/Reference#l_DataView_setInt8"
      },
      "setInt16": {
        "!type": "fn(byteOffset: number, value: ?, littleEndian: bool)",
        "!doc": "",
        "!url": "http://www.espruino.com/Reference#l_DataView_setInt16"
      },
      "setInt32": {
        "!type": "fn(byteOffset: number, value: ?, littleEndian: bool)",
        "!doc": "",
        "!url": "http://www.espruino.com/Reference#l_DataView_setInt32"
      },
      "setUint8": {
        "!type": "fn(byteOffset: number, value: ?, littleEndian: bool)",
        "!doc": "",
        "!url": "http://www.espruino.com/Reference#l_DataView_setUint8"
      },
      "setUint16": {
        "!type": "fn(byteOffset: number, value: ?, littleEndian: bool)",
        "!doc": "",
        "!url": "http://www.espruino.com/Reference#l_DataView_setUint16"
      },
      "setUint32": {
        "!type": "fn(byteOffset: number, value: ?, littleEndian: bool)",
        "!doc": "",
        "!url": "http://www.espruino.com/Reference#l_DataView_setUint32"
      }
    }
  },
  "Math": {
    "!type": "fn()",
    "!doc": "<p>This is a standard JavaScript class that contains useful Maths routines</p>\n",
    "!url": "http://www.espruino.com/Reference#Math",
    "E": {
      "!type": "number",
      "!doc": "",
      "!url": "http://www.espruino.com/Reference#l_Math_E"
    },
    "PI": {
      "!type": "number",
      "!doc": "",
      "!url": "http://www.espruino.com/Reference#l_Math_PI"
    },
    "LN2": {
      "!type": "number",
      "!doc": "",
      "!url": "http://www.espruino.com/Reference#l_Math_LN2"
    },
    "LN10": {
      "!type": "number",
      "!doc": "",
      "!url": "http://www.espruino.com/Reference#l_Math_LN10"
    },
    "LOG2E": {
      "!type": "number",
      "!doc": "",
      "!url": "http://www.espruino.com/Reference#l_Math_LOG2E"
    },
    "LOG10E": {
      "!type": "number",
      "!doc": "",
      "!url": "http://www.espruino.com/Reference#l_Math_LOG10E"
    },
    "SQRT2": {
      "!type": "number",
      "!doc": "",
      "!url": "http://www.espruino.com/Reference#l_Math_SQRT2"
    },
    "SQRT1_2": {
      "!type": "number",
      "!doc": "",
      "!url": "http://www.espruino.com/Reference#l_Math_SQRT1_2"
    },
    "abs": {
      "!type": "fn(x: number) -> number",
      "!doc": "",
      "!url": "http://www.espruino.com/Reference#l_Math_abs"
    },
    "acos": {
      "!type": "fn(x: number) -> number",
      "!doc": "",
      "!url": "http://www.espruino.com/Reference#l_Math_acos"
    },
    "asin": {
      "!type": "fn(x: number) -> number",
      "!doc": "",
      "!url": "http://www.espruino.com/Reference#l_Math_asin"
    },
    "atan": {
      "!type": "fn(x: number) -> number",
      "!doc": "",
      "!url": "http://www.espruino.com/Reference#l_Math_atan"
    },
    "atan2": {
      "!type": "fn(y: number, x: number) -> number",
      "!doc": "",
      "!url": "http://www.espruino.com/Reference#l_Math_atan2"
    },
    "cos": {
      "!type": "fn(theta: number) -> number",
      "!doc": "",
      "!url": "http://www.espruino.com/Reference#l_Math_cos"
    },
    "pow": {
      "!type": "fn(x: number, y: number) -> number",
      "!doc": "",
      "!url": "http://www.espruino.com/Reference#l_Math_pow"
    },
    "random": {
      "!type": "fn() -> number",
      "!doc": "",
      "!url": "http://www.espruino.com/Reference#l_Math_random"
    },
    "randInt": {
      "!type": "fn(range: number) -> number",
      "!doc": "<p>(Added in 2v25) Returns a random integer <code>X</code>, where <code>0 &lt;= X &lt; range</code>, or <code>-2147483648 &lt;= X &lt;= 2147483647</code> if <code>range &lt;= 0</code> or <code>undefined</code></p>\n<p>If <code>range</code> is supplied, this value is created using <code>modulo</code> of a 31 bit integer, so as <code>val</code> gets larger (24+ bits)\nthe values produced will be less randomly distributed, and no values above <code>0x7FFFFFFF</code> will ever be returned.</p>\n<p>If <code>val==undefined</code> or <code>val&lt;=0</code> a <strong>32 bit</strong> random number will be returned as an int (<code>-2147483648</code> .. <code>2147483647</code>).</p>\n<p><strong>Note:</strong> this is not part of the JS spec, but is included in Espruino as it makes a lot of sense on embedded targets</p>\n",
      "!url": "http://www.espruino.com/Reference#l_Math_randInt"
    },
    "round": {
      "!type": "fn(x: number) -> ?",
      "!doc": "",
      "!url": "http://www.espruino.com/Reference#l_Math_round"
    },
    "sin": {
      "!type": "fn(theta: number) -> number",
      "!doc": "",
      "!url": "http://www.espruino.com/Reference#l_Math_sin"
    },
    "tan": {
      "!type": "fn(theta: number) -> number",
      "!doc": "",
      "!url": "http://www.espruino.com/Reference#l_Math_tan"
    },
    "sqrt": {
      "!type": "fn(x: number) -> number",
      "!doc": "",
      "!url": "http://www.espruino.com/Reference#l_Math_sqrt"
    },
    "ceil": {
      "!type": "fn(x: number) -> number",
      "!doc": "",
      "!url": "http://www.espruino.com/Reference#l_Math_ceil"
    },
    "floor": {
      "!type": "fn(x: number) -> number",
      "!doc": "",
      "!url": "http://www.espruino.com/Reference#l_Math_floor"
    },
    "exp": {
      "!type": "fn(x: number) -> number",
      "!doc": "",
      "!url": "http://www.espruino.com/Reference#l_Math_exp"
    },
    "log": {
      "!type": "fn(x: number) -> number",
      "!doc": "",
      "!url": "http://www.espruino.com/Reference#l_Math_log"
    },
    "clip": {
      "!type": "fn(x: number, min: number, max: number) -> number",
      "!doc": "<p>DEPRECATED - Please use <code>E.clip()</code> instead. Clip a number to be between min and\nmax (inclusive)</p>\n",
      "!url": "http://www.espruino.com/Reference#l_Math_clip"
    },
    "wrap": {
      "!type": "fn(x: number, max: number) -> number",
      "!doc": "<p>DEPRECATED - This is not part of standard JavaScript libraries</p>\n<p>Wrap a number around if it is less than 0 or greater than or equal to max. For\ninstance you might do: <code>Math.wrap(angleInDegrees, 360)</code></p>\n",
      "!url": "http://www.espruino.com/Reference#l_Math_wrap"
    },
    "min": {
      "!type": "fn(args: ?) -> number",
      "!doc": "<p>Find the minimum of a series of numbers</p>\n",
      "!url": "http://www.espruino.com/Reference#l_Math_min"
    },
    "max": {
      "!type": "fn(args: ?) -> number",
      "!doc": "<p>Find the maximum of a series of numbers</p>\n",
      "!url": "http://www.espruino.com/Reference#l_Math_max"
    },
    "sign": {
      "!type": "fn(x: number) -> number",
      "!doc": "",
      "!url": "http://www.espruino.com/Reference#l_Math_sign"
    }
  },
  "Storage": {
    "!type": "fn()",
    "!doc": "<p>This module allows you to read and write part of the nonvolatile flash memory of\nyour device using a filesystem-like API.</p>\n<p>Also see the <code>Flash</code> library, which provides a low level, more dangerous way to\naccess all parts of your flash memory.</p>\n<p>The <code>Storage</code> library provides two distinct types of file:</p>\n<ul>\n<li><code>require(&quot;Storage&quot;).write(...)</code>/<code>require(&quot;Storage&quot;).read(...)</code>/etc create\nsimple contiguous files of fixed length. This is the recommended file type.</li>\n<li><code>require(&quot;Storage&quot;).open(...)</code> creates a <code>StorageFile</code>, which stores the file\nin numbered chunks (<code>&quot;filename\\1&quot;</code>/<code>&quot;filename\\2&quot;</code>/etc). It allows data to be\nappended and for the file to be read line by line.</li>\n</ul>\n<p>You must read a file using the same method you used to write it - e.g. you can&#39;t\ncreate a file with <code>require(&quot;Storage&quot;).open(...)</code> and then read it with\n<code>require(&quot;Storage&quot;).read(...)</code>.</p>\n<p><strong>Note:</strong> In firmware 2v05 and later, the maximum length for filenames is 28\ncharacters. However in 2v04 and earlier the max length is 8.</p>\n",
    "!url": "http://www.espruino.com/Reference#Storage",
    "eraseAll": {
      "!type": "fn()",
      "!doc": "<p>Erase the flash storage area. This will remove all files created with\n<code>require(&quot;Storage&quot;).write(...)</code> as well as any code saved with <code>save()</code> or\n<code>E.setBootCode()</code>.</p>\n",
      "!url": "http://www.espruino.com/Reference#l_Storage_eraseAll"
    },
    "erase": {
      "!type": "fn(name: ?)",
      "!doc": "<p>Erase a single file from the flash storage area.</p>\n<p><strong>Note:</strong> This function should be used with normal files, and not <code>StorageFile</code>s\ncreated with <code>require(&quot;Storage&quot;).open(filename, ...)</code>. To erase those, use\n<code>require(&quot;Storage&quot;).open(..., &quot;r&quot;).erase()</code>.</p>\n",
      "!url": "http://www.espruino.com/Reference#l_Storage_erase"
    },
    "read": {
      "!type": "fn(name: ?, offset: number, length: number) -> ?",
      "!doc": "<p>Read a file from the flash storage area that has been written with\n<code>require(&quot;Storage&quot;).write(...)</code>.</p>\n<p>This function returns a memory-mapped String that points to the actual memory\narea in read-only memory, so it won&#39;t use up RAM.</p>\n<p>As such you can check if a file exists efficiently using\n<code>require(&quot;Storage&quot;).read(filename)!==undefined</code>.</p>\n<p>If you evaluate this string with <code>eval</code>, any functions contained in the String\nwill keep their code stored in flash memory.</p>\n<p><strong>Note:</strong> This function should be used with normal files, and not <code>StorageFile</code>s\ncreated with <code>require(&quot;Storage&quot;).open(filename, ...)</code></p>\n",
      "!url": "http://www.espruino.com/Reference#l_Storage_read"
    },
    "readJSON": {
      "!type": "fn(name: ?, noExceptions: bool) -> ?",
      "!doc": "<p>Read a file from the flash storage area that has been written with\n<code>require(&quot;Storage&quot;).write(...)</code>, and parse JSON in it into a JavaScript object.</p>\n<p>This is identical to <code>JSON.parse(require(&quot;Storage&quot;).read(...))</code>. It will throw\nan exception if the data in the file is not valid JSON.</p>\n<p><strong>Note:</strong> This function should be used with normal files, and not <code>StorageFile</code>s\ncreated with <code>require(&quot;Storage&quot;).open(filename, ...)</code></p>\n",
      "!url": "http://www.espruino.com/Reference#l_Storage_readJSON"
    },
    "readArrayBuffer": {
      "!type": "fn(name: ?) -> ?",
      "!doc": "<p>Read a file from the flash storage area that has been written with\n<code>require(&quot;Storage&quot;).write(...)</code>, and return the raw binary data as an\nArrayBuffer.</p>\n<p>This can be used:</p>\n<ul>\n<li>In a <code>DataView</code> with <code>new DataView(require(&quot;Storage&quot;).readArrayBuffer(&quot;x&quot;))</code></li>\n<li>In a <code>Uint8Array/Float32Array/etc</code> with <code>new Uint8Array(require(&quot;Storage&quot;).readArrayBuffer(&quot;x&quot;))</code></li>\n</ul>\n<p><strong>Note:</strong> This function should be used with normal files, and not <code>StorageFile</code>s\ncreated with <code>require(&quot;Storage&quot;).open(filename, ...)</code></p>\n",
      "!url": "http://www.espruino.com/Reference#l_Storage_readArrayBuffer"
    },
    "write": {
      "!type": "fn(name: ?, data: ?, offset: number, size: number) -> bool",
      "!doc": "<p>Write/create a file in the flash storage area. This is nonvolatile and will not\ndisappear when the device resets or power is lost.</p>\n<p>Simply write <code>require(&quot;Storage&quot;).write(&quot;MyFile&quot;, &quot;Some data&quot;)</code> to write a new\nfile, and <code>require(&quot;Storage&quot;).read(&quot;MyFile&quot;)</code> to read it.</p>\n<p>If you supply:</p>\n<ul>\n<li>A String, it will be written as-is</li>\n<li>An array, will be written as a byte array (but read back as a String)</li>\n<li>An object, it will automatically be converted to a JSON string before being\nwritten.</li>\n</ul>\n<p><strong>Note:</strong> If an array is supplied it will not be converted to JSON. To be\nexplicit about the conversion you can use <code>Storage.writeJSON</code></p>\n<p>You may also create a file and then populate data later <strong>as long as you don&#39;t\ntry and overwrite data that already exists</strong>. For instance:</p>\n<pre><code>var f = require(<span class=\"hljs-string\">&quot;Storage&quot;</span>);\nf.<span class=\"hljs-keyword\">write</span>(<span class=\"hljs-string\">&quot;a&quot;</span>,<span class=\"hljs-string\">&quot;Hello&quot;</span>,<span class=\"hljs-number\">0</span>,<span class=\"hljs-number\">14</span>); <span class=\"hljs-comment\">// Creates a new file, 14 chars long</span>\n<span class=\"hljs-keyword\">print</span>(JSON.stringify(f.<span class=\"hljs-keyword\">read</span>(<span class=\"hljs-string\">&quot;a&quot;</span>))); <span class=\"hljs-comment\">// read the file</span>\n<span class=\"hljs-comment\">// any nonwritten chars will be char code 255:</span>\n<span class=\"hljs-string\">&quot;Hello\\u00FF\\u00FF\\u00FF\\u00FF\\u00FF\\u00FF\\u00FF\\u00FF\\u00FF&quot;</span>\nf.<span class=\"hljs-keyword\">write</span>(<span class=\"hljs-string\">&quot;a&quot;</span>,<span class=\"hljs-string\">&quot; &quot;</span>,<span class=\"hljs-number\">5</span>); <span class=\"hljs-comment\">// write within the file</span>\nf.<span class=\"hljs-keyword\">write</span>(<span class=\"hljs-string\">&quot;a&quot;</span>,<span class=\"hljs-string\">&quot;World!!!&quot;</span>,<span class=\"hljs-number\">6</span>); <span class=\"hljs-comment\">// write again within the file</span>\n<span class=\"hljs-keyword\">print</span>(f.<span class=\"hljs-keyword\">read</span>(<span class=\"hljs-string\">&quot;a&quot;</span>)); <span class=\"hljs-comment\">// &quot;Hello World!!!&quot;</span>\nf.<span class=\"hljs-keyword\">write</span>(<span class=\"hljs-string\">&quot;a&quot;</span>,<span class=\"hljs-string\">&quot; &quot;</span>,<span class=\"hljs-number\">0</span>); <span class=\"hljs-comment\">// Writing to location 0 again will cause the file to be re-written</span>\n<span class=\"hljs-keyword\">print</span>(f.<span class=\"hljs-keyword\">read</span>(<span class=\"hljs-string\">&quot;a&quot;</span>)); <span class=\"hljs-comment\">// &quot; &quot;</span>\n</code></pre>\n<p>This can be useful if you&#39;ve got more data to write than you have RAM\navailable - for instance the Web IDE uses this method to write large files into\nonboard storage.</p>\n<p><strong>Note:</strong> This function should be used with normal files, and not <code>StorageFile</code>s\ncreated with <code>require(&quot;Storage&quot;).open(filename, ...)</code></p>\n",
      "!url": "http://www.espruino.com/Reference#l_Storage_write"
    },
    "writeJSON": {
      "!type": "fn(name: ?, data: ?) -> bool",
      "!doc": "<p>Write/create a file in the flash storage area. This is nonvolatile and will not\ndisappear when the device resets or power is lost.</p>\n<p>Simply write <code>require(&quot;Storage&quot;).writeJSON(&quot;MyFile&quot;, [1,2,3])</code> to write a new\nfile, and <code>require(&quot;Storage&quot;).readJSON(&quot;MyFile&quot;)</code> to read it.</p>\n<p>This is (almost) equivalent to <code>require(&quot;Storage&quot;).write(name, JSON.stringify(data))</code> (see the notes below)</p>\n<p><strong>Note:</strong> This function should be used with normal files, and not <code>StorageFile</code>s\ncreated with <code>require(&quot;Storage&quot;).open(filename, ...)</code></p>\n<p><strong>Note:</strong> Normally <code>JSON.stringify</code> converts any non-standard character to an escape code with <code>\\uXXXX</code>, but\nas of Espruino 2v20, when writing to a file we use the most compact form, like <code>\\xXX</code> or <code>\\X</code>, as well as\nskipping quotes on fields. This saves space and is faster, but also means that if a String wasn&#39;t a UTF8\nstring but contained characters in the UTF8 codepoint range, when saved it won&#39;t end up getting reloaded as a UTF8 string.\nIt does mean that you cannot parse the file with just <code>JSON.parse</code> as it&#39;s no longer standard JSON but is JS,\nso you must use <code>Storage.readJSON</code></p>\n",
      "!url": "http://www.espruino.com/Reference#l_Storage_writeJSON"
    },
    "list": {
      "!type": "fn(regex: ?, filter: ?) -> ?",
      "!doc": "<p>List all files in the flash storage area. An array of Strings is returned.</p>\n<p>By default this lists files created by <code>StorageFile</code> (<code>require(&quot;Storage&quot;).open</code>)\nwhich have a file number (<code>&quot;\\1&quot;</code>/<code>&quot;\\2&quot;</code>/etc) appended to them.</p>\n<pre><code><span class=\"hljs-comment\">// All files</span>\n<span class=\"hljs-function\"><span class=\"hljs-title\">require</span><span class=\"hljs-params\">(<span class=\"hljs-string\">&quot;Storage&quot;</span>)</span></span><span class=\"hljs-selector-class\">.list</span>()\n<span class=\"hljs-comment\">// Files ending in &#x27;.js&#x27;</span>\n<span class=\"hljs-function\"><span class=\"hljs-title\">require</span><span class=\"hljs-params\">(<span class=\"hljs-string\">&quot;Storage&quot;</span>)</span></span><span class=\"hljs-selector-class\">.list</span>(/\\.js$/)\n<span class=\"hljs-comment\">// All Storage Files</span>\n<span class=\"hljs-function\"><span class=\"hljs-title\">require</span><span class=\"hljs-params\">(<span class=\"hljs-string\">&quot;Storage&quot;</span>)</span></span><span class=\"hljs-selector-class\">.list</span>(undefined, {sf:true})\n<span class=\"hljs-comment\">// All normal files (e.g. created with Storage.write)</span>\n<span class=\"hljs-function\"><span class=\"hljs-title\">require</span><span class=\"hljs-params\">(<span class=\"hljs-string\">&quot;Storage&quot;</span>)</span></span><span class=\"hljs-selector-class\">.list</span>(undefined, {sf:false})\n</code></pre>\n<p><strong>Note:</strong> This will output system files (e.g. saved code) as well as files that\nyou may have written.</p>\n",
      "!url": "http://www.espruino.com/Reference#l_Storage_list"
    },
    "hash": {
      "!type": "fn(regex: ?) -> number",
      "!doc": "<p>List all files in the flash storage area matching the specified regex (ignores\nStorageFiles), and then hash their filenames <em>and</em> file locations.</p>\n<p>Identical files may have different hashes (e.g. if Storage is compacted and the\nfile moves) but the chances of different files having the same hash are\nextremely small.</p>\n<pre><code><span class=\"hljs-comment\">// Hash files</span>\n<span class=\"hljs-function\"><span class=\"hljs-title\">require</span><span class=\"hljs-params\">(<span class=\"hljs-string\">&quot;Storage&quot;</span>)</span></span><span class=\"hljs-selector-class\">.hash</span>()\n<span class=\"hljs-comment\">// Files ending in &#x27;.boot.js&#x27;</span>\n<span class=\"hljs-function\"><span class=\"hljs-title\">require</span><span class=\"hljs-params\">(<span class=\"hljs-string\">&quot;Storage&quot;</span>)</span></span><span class=\"hljs-selector-class\">.hash</span>(/\\.boot\\.js$/)\n</code></pre>\n<p><strong>Note:</strong> This function is used by Bangle.js as a way to cache files. For\ninstance the bootloader will add all <code>.boot.js</code> files together into a single\n<code>.boot0</code> file, but it needs to know quickly whether anything has changed.</p>\n",
      "!url": "http://www.espruino.com/Reference#l_Storage_hash"
    },
    "compact": {
      "!type": "fn(showMessage: bool)",
      "!doc": "<p>The Flash Storage system is journaling. To make the most of the limited write\ncycles of Flash memory, Espruino marks deleted/replaced files as garbage/trash files and\nmoves on to a fresh part of flash memory. Espruino only fully erases those files\nwhen it is running low on flash, or when <code>compact</code> is called.</p>\n<p><code>compact</code> may fail if there isn&#39;t enough RAM free on the stack to use as swap\nspace, however in this case it will not lose data.</p>\n<p><strong>Note:</strong> <code>compact</code> rearranges the contents of memory. If code is referencing\nthat memory (e.g. functions that have their code stored in flash) then they may\nbecome garbled when compaction happens. To avoid this, call <code>eraseFiles</code> before\nuploading data that you intend to reference to ensure that uploaded files are\nright at the start of flash and cannot be compacted further.</p>\n",
      "!url": "http://www.espruino.com/Reference#l_Storage_compact"
    },
    "debug": {
      "!type": "fn()",
      "!doc": "<p>This writes information about all blocks in flash memory to the console - and is\nonly useful for debugging flash storage.</p>\n",
      "!url": "http://www.espruino.com/Reference#l_Storage_debug"
    },
    "getFree": {
      "!type": "fn(checkInternalFlash: bool) -> number",
      "!doc": "<p>Return the amount of free bytes available in Storage. Due to fragmentation there\nmay be more bytes available, but this represents the maximum size of file that\ncan be written.</p>\n<p><strong>NOTE:</strong> <code>checkInternalFlash</code> is only useful on DICKENS devices - other devices don&#39;t use two different flash banks</p>\n",
      "!url": "http://www.espruino.com/Reference#l_Storage_getFree"
    },
    "getStats": {
      "!type": "fn(checkInternalFlash: ?) -> ?",
      "!doc": "<p>Returns:</p>\n<pre><code>{\n  totalBytes <span class=\"hljs-regexp\">//</span> Amount of bytes <span class=\"hljs-keyword\">in</span> filesystem\n  freeBytes <span class=\"hljs-regexp\">//</span> How many bytes are left at the end of storage?\n  fileBytes <span class=\"hljs-regexp\">//</span> How many bytes of allocated files <span class=\"hljs-keyword\">do</span> we have?\n  fileCount <span class=\"hljs-regexp\">//</span> How many allocated files <span class=\"hljs-keyword\">do</span> we have?\n  trashBytes <span class=\"hljs-regexp\">//</span> How many bytes of trash files <span class=\"hljs-keyword\">do</span> we have?\n  trashCount <span class=\"hljs-regexp\">//</span> How many trash files <span class=\"hljs-keyword\">do</span> we have? (can be cleared with .compact)\n}\n</code></pre>\n<p><strong>NOTE:</strong> <code>checkInternalFlash</code> is only useful on DICKENS/BANGLEJS2_IFLASH devices - other devices don&#39;t use two different flash banks</p>\n",
      "!url": "http://www.espruino.com/Reference#l_Storage_getStats"
    },
    "optimise": {
      "!type": "fn()",
      "!doc": "<p>Writes a lookup table for files into Bangle.js&#39;s storage. This allows any file\nstored up to that point to be accessed quickly.</p>\n",
      "!url": "http://www.espruino.com/Reference#l_Storage_optimise"
    },
    "open": {
      "!type": "fn(name: ?, mode: ?) -> +StorageFile",
      "!doc": "<p>Open a file in the Storage area. This can be used for appending data\n(normal read/write operations only write the entire file).</p>\n<p>Please see <code>StorageFile</code> for more information (and examples).</p>\n<p><strong>Note:</strong> These files write through immediately - they do not need closing.</p>\n",
      "!url": "http://www.espruino.com/Reference#l_Storage_open"
    }
  },
  "StorageFile": {
    "!type": "fn()",
    "!doc": "<p>These objects are created from <code>require(&quot;Storage&quot;).open</code> and allow Storage items\nto be read/written.</p>\n<p>The <code>Storage</code> library writes into Flash memory (which can only be erased in\nchunks), and unlike a normal filesystem it allocates files in one long\ncontiguous area to allow them to be accessed easily from Espruino.</p>\n<p>This presents a challenge for <code>StorageFile</code> which allows you to append to a\nfile, so instead <code>StorageFile</code> stores files in chunks. It uses the last\ncharacter of the filename to denote the chunk number (e.g. <code>&quot;foobar\\1&quot;</code>,\n<code>&quot;foobar\\2&quot;</code>, etc).</p>\n<p>This means that while <code>StorageFile</code> files exist in the same area as those from\n<code>Storage</code>, they should be read using <code>Storage.open</code> (and not <code>Storage.read</code>).</p>\n<pre><code>f = require(<span class=\"hljs-string\">&quot;Storage&quot;</span>).<span class=\"hljs-keyword\">open</span>(<span class=\"hljs-string\">&quot;foobar&quot;</span>,<span class=\"hljs-string\">&quot;w&quot;</span>)<span class=\"hljs-comment\">;</span>\nf.<span class=\"hljs-keyword\">write</span>(<span class=\"hljs-string\">&quot;Hell&quot;</span>)<span class=\"hljs-comment\">;</span>\nf.<span class=\"hljs-keyword\">write</span>(<span class=\"hljs-string\">&quot;o World\\n&quot;</span>)<span class=\"hljs-comment\">;</span>\nf.<span class=\"hljs-keyword\">write</span>(<span class=\"hljs-string\">&quot;Hello\\n&quot;</span>)<span class=\"hljs-comment\">;</span>\nf.<span class=\"hljs-keyword\">write</span>(<span class=\"hljs-string\">&quot;World 2\\n&quot;</span>)<span class=\"hljs-comment\">;</span>\nf.<span class=\"hljs-keyword\">write</span>(<span class=\"hljs-string\">&quot;Hello World 3\\n&quot;</span>)<span class=\"hljs-comment\">;</span>\n<span class=\"hljs-comment\">// there&#x27;s no need to call &#x27;close&#x27;</span>\n<span class=\"hljs-comment\">// then</span>\nf = require(<span class=\"hljs-string\">&quot;Storage&quot;</span>).<span class=\"hljs-keyword\">open</span>(<span class=\"hljs-string\">&quot;foobar&quot;</span>,<span class=\"hljs-string\">&quot;r&quot;</span>)<span class=\"hljs-comment\">;</span>\nf.<span class=\"hljs-keyword\">read</span>(<span class=\"hljs-number\">13</span>) <span class=\"hljs-comment\">// &quot;Hello World\\nH&quot;</span>\nf.<span class=\"hljs-keyword\">read</span>(<span class=\"hljs-number\">13</span>) <span class=\"hljs-comment\">// &quot;ello\\nWorld 2\\n&quot;</span>\nf.<span class=\"hljs-keyword\">read</span>(<span class=\"hljs-number\">13</span>) <span class=\"hljs-comment\">// &quot;Hello World 3&quot;</span>\nf.<span class=\"hljs-keyword\">read</span>(<span class=\"hljs-number\">13</span>) <span class=\"hljs-comment\">// &quot;\\n&quot;</span>\nf.<span class=\"hljs-keyword\">read</span>(<span class=\"hljs-number\">13</span>) <span class=\"hljs-comment\">// undefined</span>\n<span class=\"hljs-comment\">// or</span>\nf = require(<span class=\"hljs-string\">&quot;Storage&quot;</span>).<span class=\"hljs-keyword\">open</span>(<span class=\"hljs-string\">&quot;foobar&quot;</span>,<span class=\"hljs-string\">&quot;r&quot;</span>)<span class=\"hljs-comment\">;</span>\nf.readLine() <span class=\"hljs-comment\">// &quot;Hello World\\n&quot;</span>\nf.readLine() <span class=\"hljs-comment\">// &quot;Hello\\n&quot;</span>\nf.readLine() <span class=\"hljs-comment\">// &quot;World 2\\n&quot;</span>\nf.readLine() <span class=\"hljs-comment\">// &quot;Hello World 3\\n&quot;</span>\nf.readLine() <span class=\"hljs-comment\">// undefined</span>\n<span class=\"hljs-comment\">// now get rid of file</span>\nf.erase()<span class=\"hljs-comment\">;</span>\n</code></pre>\n<p><strong>Note:</strong> <code>StorageFile</code> uses the fact that all bits of erased flash memory are 1\nto detect the end of a file. As such you should not write character code 255\n(<code>&quot;\\xFF&quot;</code>) to these files.</p>\n",
    "!url": "http://www.espruino.com/Reference#StorageFile",
    "prototype": {
      "read": {
        "!type": "fn(len: number) -> +String",
        "!doc": "<p>Read &#39;len&#39; bytes of data from the file, and return a String containing those\nbytes.</p>\n<p>If the end of the file is reached, the String may be smaller than the amount of\nbytes requested, or if the file is already at the end, <code>undefined</code> is returned.</p>\n",
        "!url": "http://www.espruino.com/Reference#l_StorageFile_read"
      },
      "readLine": {
        "!type": "fn() -> +String",
        "!doc": "<p>Read a line of data from the file (up to and including <code>&quot;\\n&quot;</code>)</p>\n",
        "!url": "http://www.espruino.com/Reference#l_StorageFile_readLine"
      },
      "getLength": {
        "!type": "fn() -> number",
        "!doc": "<p>Return the length of the current file.</p>\n<p>This requires Espruino to read the file from scratch, which is not a fast\noperation.</p>\n",
        "!url": "http://www.espruino.com/Reference#l_StorageFile_getLength"
      },
      "write": {
        "!type": "fn(data: ?)",
        "!doc": "<p>Append the given data to a file. You should not attempt to append <code>&quot;\\xFF&quot;</code>\n(character code 255).</p>\n",
        "!url": "http://www.espruino.com/Reference#l_StorageFile_write"
      },
      "erase": {
        "!type": "fn()",
        "!doc": "<p>Erase this <code>StorageFile</code> - after being called this file can no longer be written to.</p>\n<p><strong>Note:</strong> You shouldn&#39;t call <code>require(&quot;Storage&quot;).erase(...)</code> on a <code>StorageFile</code>, but should\ninstead open the StorageFile and call <code>.erase</code> on the returned file: <code>require(&quot;Storage&quot;).open(..., &quot;r&quot;).erase()</code></p>\n",
        "!url": "http://www.espruino.com/Reference#l_StorageFile_erase"
      },
      "pipe": {
        "!type": "fn(destination: ?, options: ?)",
        "!doc": "<p>Pipe this file to a stream (an object with a &#39;write&#39; method)</p>\n",
        "!url": "http://www.espruino.com/Reference#l_StorageFile_pipe"
      }
    }
  },
  "Date": {
    "!type": "fn(args: ?) -> +Date",
    "!doc": "<p>Creates a date object</p>\n",
    "!url": "http://www.espruino.com/Reference#l_Date_Date",
    "now": {
      "!type": "fn() -> number",
      "!doc": "<p>Get the number of milliseconds elapsed since 1970 (or on embedded platforms,\nsince startup).</p>\n<p><strong>Note:</strong> Desktop JS engines return an integer value for <code>Date.now()</code>, however Espruino\nreturns a floating point value, accurate to fractions of a millisecond.</p>\n",
      "!url": "http://www.espruino.com/Reference#l_Date_now"
    },
    "prototype": {
      "getTimezoneOffset": {
        "!type": "fn() -> number",
        "!doc": "<p>This returns the time-zone offset from UTC, in minutes.</p>\n",
        "!url": "http://www.espruino.com/Reference#l_Date_getTimezoneOffset"
      },
      "getIsDST": {
        "!type": "fn() -> number",
        "!doc": "<p>This returns a boolean indicating whether daylight savings time is in effect.</p>\n",
        "!url": "http://www.espruino.com/Reference#l_Date_getIsDST"
      },
      "getTime": {
        "!type": "fn() -> number",
        "!doc": "<p>Return the number of milliseconds since 1970</p>\n",
        "!url": "http://www.espruino.com/Reference#l_Date_getTime"
      },
      "valueOf": {
        "!type": "fn() -> number",
        "!doc": "<p>Return the number of milliseconds since 1970</p>\n",
        "!url": "http://www.espruino.com/Reference#l_Date_valueOf"
      },
      "setTime": {
        "!type": "fn(timeValue: number) -> number",
        "!doc": "<p>Set the time/date of this Date class</p>\n",
        "!url": "http://www.espruino.com/Reference#l_Date_setTime"
      },
      "getHours": {
        "!type": "fn() -> number",
        "!doc": "<p>0..23</p>\n",
        "!url": "http://www.espruino.com/Reference#l_Date_getHours"
      },
      "getMinutes": {
        "!type": "fn() -> number",
        "!doc": "<p>0..59</p>\n",
        "!url": "http://www.espruino.com/Reference#l_Date_getMinutes"
      },
      "getSeconds": {
        "!type": "fn() -> number",
        "!doc": "<p>0..59</p>\n",
        "!url": "http://www.espruino.com/Reference#l_Date_getSeconds"
      },
      "getMilliseconds": {
        "!type": "fn() -> number",
        "!doc": "<p>0..999</p>\n",
        "!url": "http://www.espruino.com/Reference#l_Date_getMilliseconds"
      },
      "getDay": {
        "!type": "fn() -> number",
        "!doc": "<p>Day of the week (0=sunday, 1=monday, etc)</p>\n",
        "!url": "http://www.espruino.com/Reference#l_Date_getDay"
      },
      "getDate": {
        "!type": "fn() -> number",
        "!doc": "<p>Day of the month 1..31</p>\n",
        "!url": "http://www.espruino.com/Reference#l_Date_getDate"
      },
      "getMonth": {
        "!type": "fn() -> number",
        "!doc": "<p>Month of the year 0..11</p>\n",
        "!url": "http://www.espruino.com/Reference#l_Date_getMonth"
      },
      "getFullYear": {
        "!type": "fn() -> number",
        "!doc": "<p>The year, e.g. 2014</p>\n",
        "!url": "http://www.espruino.com/Reference#l_Date_getFullYear"
      },
      "setHours": {
        "!type": "fn(hoursValue: number, minutesValue: ?, secondsValue: ?, millisecondsValue: ?) -> number",
        "!doc": "<p>0..23</p>\n",
        "!url": "http://www.espruino.com/Reference#l_Date_setHours"
      },
      "setMinutes": {
        "!type": "fn(minutesValue: number, secondsValue: ?, millisecondsValue: ?) -> number",
        "!doc": "<p>0..59</p>\n",
        "!url": "http://www.espruino.com/Reference#l_Date_setMinutes"
      },
      "setSeconds": {
        "!type": "fn(secondsValue: number, millisecondsValue: ?) -> number",
        "!doc": "<p>0..59</p>\n",
        "!url": "http://www.espruino.com/Reference#l_Date_setSeconds"
      },
      "setMilliseconds": {
        "!type": "fn(millisecondsValue: number) -> number",
        "!doc": "",
        "!url": "http://www.espruino.com/Reference#l_Date_setMilliseconds"
      },
      "setDate": {
        "!type": "fn(dayValue: number) -> number",
        "!doc": "<p>Day of the month 1..31</p>\n",
        "!url": "http://www.espruino.com/Reference#l_Date_setDate"
      },
      "setMonth": {
        "!type": "fn(monthValue: number, dayValue: ?) -> number",
        "!doc": "<p>Month of the year 0..11</p>\n",
        "!url": "http://www.espruino.com/Reference#l_Date_setMonth"
      },
      "setFullYear": {
        "!type": "fn(yearValue: number, monthValue: ?, dayValue: ?) -> number",
        "!doc": "",
        "!url": "http://www.espruino.com/Reference#l_Date_setFullYear"
      },
      "toString": {
        "!type": "fn() -> ?",
        "!doc": "<p>Converts to a String, e.g: <code>Fri Jun 20 2014 14:52:20 GMT+0000</code></p>\n<p> <strong>Note:</strong> This uses whatever timezone was set with <code>E.setTimeZone()</code> or\n <code>E.setDST()</code></p>\n",
        "!url": "http://www.espruino.com/Reference#l_Date_toString"
      },
      "toUTCString": {
        "!type": "fn() -> ?",
        "!doc": "<p>Converts to a String, e.g: <code>Fri, 20 Jun 2014 14:52:20 GMT</code></p>\n<p> <strong>Note:</strong> This always assumes a timezone of GMT</p>\n",
        "!url": "http://www.espruino.com/Reference#l_Date_toUTCString"
      },
      "toISOString": {
        "!type": "fn() -> ?",
        "!doc": "<p>Converts to a ISO 8601 String, e.g: <code>2014-06-20T14:52:20.123Z</code></p>\n<p> <strong>Note:</strong> This always assumes a timezone of GMT</p>\n",
        "!url": "http://www.espruino.com/Reference#l_Date_toISOString"
      },
      "toJSON": {
        "!type": "fn() -> ?",
        "!doc": "<p>Calls <code>Date.toISOString</code> to output this date to JSON</p>\n",
        "!url": "http://www.espruino.com/Reference#l_Date_toJSON"
      },
      "toLocalISOString": {
        "!type": "fn() -> ?",
        "!doc": "<p>Converts to a ISO 8601 String (with timezone information), e.g:\n<code>2014-06-20T14:52:20.123-0500</code></p>\n",
        "!url": "http://www.espruino.com/Reference#l_Date_toLocalISOString"
      }
    },
    "parse": {
      "!type": "fn(str: ?) -> number",
      "!doc": "<p>Parse a date string and return milliseconds since 1970. Data can be either\n&#39;2011-10-20T14:48:00&#39;, &#39;2011-10-20&#39; or &#39;Mon, 25 Dec 1995 13:30:00 +0430&#39;</p>\n",
      "!url": "http://www.espruino.com/Reference#l_Date_parse"
    }
  },
  "E": {
    "!type": "fn()",
    "!doc": "<p>This is the built-in JavaScript class for Espruino utility functions.</p>\n",
    "!url": "http://www.espruino.com/Reference#E",
    "showMenu": {
      "!type": "fn(menu: ?) -> ?",
      "!doc": "<p>Display a menu on the screen, and set up the buttons to navigate through it.</p>\n<p>Supply an object containing menu items. When an item is selected, the function\nit references will be executed. For example:</p>\n<pre><code><span class=\"hljs-keyword\">var</span> <span class=\"hljs-built_in\">boolean</span> = <span class=\"hljs-literal\">false</span>;\n<span class=\"hljs-keyword\">var</span> <span class=\"hljs-built_in\">number</span> = <span class=\"hljs-number\">50</span>;\n<span class=\"hljs-comment\">// First menu</span>\n<span class=\"hljs-keyword\">var</span> mainmenu = {\n  <span class=\"hljs-string\">&quot;&quot;</span> : { <span class=\"hljs-string\">&quot;title&quot;</span> : <span class=\"hljs-string\">&quot;-- Main Menu --&quot;</span> },\n  <span class=\"hljs-string\">&quot;Backlight On&quot;</span> : <span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) { LED1.set(); },\n  <span class=\"hljs-string\">&quot;Backlight Off&quot;</span> : <span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) { LED1.reset(); },\n  <span class=\"hljs-string\">&quot;Submenu&quot;</span> : <span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) { E.showMenu(submenu); },\n  <span class=\"hljs-string\">&quot;A Boolean&quot;</span> : {\n    <span class=\"hljs-attr\">value</span> : <span class=\"hljs-built_in\">boolean</span>,\n    <span class=\"hljs-attr\">format</span> : <span class=\"hljs-function\"><span class=\"hljs-params\">v</span> =&gt;</span> v?<span class=\"hljs-string\">&quot;On&quot;</span>:<span class=\"hljs-string\">&quot;Off&quot;</span>,\n    <span class=\"hljs-attr\">onchange</span> : <span class=\"hljs-function\"><span class=\"hljs-params\">v</span> =&gt;</span> { <span class=\"hljs-built_in\">boolean</span>=v; }\n  },\n  <span class=\"hljs-string\">&quot;A Number&quot;</span> : {\n    <span class=\"hljs-attr\">value</span> : <span class=\"hljs-built_in\">number</span>,\n    <span class=\"hljs-attr\">min</span>:<span class=\"hljs-number\">0</span>,<span class=\"hljs-attr\">max</span>:<span class=\"hljs-number\">100</span>,<span class=\"hljs-attr\">step</span>:<span class=\"hljs-number\">10</span>,\n    <span class=\"hljs-comment\">// noList : true, // On Bangle.js devices this forces use of the number-chooser (and not a scrolling list)</span>\n    onchange : <span class=\"hljs-function\"><span class=\"hljs-params\">v</span> =&gt;</span> { <span class=\"hljs-built_in\">number</span>=v; }\n  },\n  <span class=\"hljs-string\">&quot;Exit&quot;</span> : <span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) { E.showMenu(); }, <span class=\"hljs-comment\">// remove the menu</span>\n};\n<span class=\"hljs-comment\">// Submenu</span>\n<span class=\"hljs-keyword\">var</span> submenu = {\n  <span class=\"hljs-string\">&quot;&quot;</span> : { <span class=\"hljs-attr\">title</span> : <span class=\"hljs-string\">&quot;-- SubMenu --&quot;</span>,\n         <span class=\"hljs-attr\">back</span> : <span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) { E.showMenu(mainmenu); } },\n  <span class=\"hljs-string\">&quot;One&quot;</span> : <span class=\"hljs-literal\">undefined</span>, <span class=\"hljs-comment\">// do nothing</span>\n  <span class=\"hljs-string\">&quot;Two&quot;</span> : <span class=\"hljs-literal\">undefined</span> <span class=\"hljs-comment\">// do nothing</span>\n};\n<span class=\"hljs-comment\">// Actually display the menu</span>\nE.showMenu(mainmenu);\n</code></pre>\n<p>The menu will stay onscreen and active until explicitly removed, which you can\ndo by calling <code>E.showMenu()</code> without arguments.</p>\n<p>See <a href=\"http://www.espruino.com/graphical_menu\">http://www.espruino.com/graphical_menu</a> for more detailed information.</p>\n",
      "!url": "http://www.espruino.com/Reference#l_E_showMenu"
    },
    "showMessage": {
      "!type": "fn(message: ?, title: ?)",
      "!doc": "<p>A utility function for displaying a full screen message on the screen.</p>\n<p>Draws to the screen and returns immediately.</p>\n<pre><code>E.showMessage(<span class=\"hljs-string\">&quot;These are<span class=\"hljs-subst\">\\n</span>Lots of<span class=\"hljs-subst\">\\n</span>Lines&quot;</span>,<span class=\"hljs-string\">&quot;My Title&quot;</span>)\n</code></pre>\n",
      "!url": "http://www.espruino.com/Reference#l_E_showMessage"
    },
    "showPrompt": {
      "!type": "fn(message: ?, options: ?) -> ?",
      "!doc": "<p>Displays a full screen prompt on the screen, with the buttons requested (or\n<code>Yes</code> and <code>No</code> for defaults).</p>\n<p>When the button is pressed the promise is resolved with the requested values\n(for the <code>Yes</code> and <code>No</code> defaults, <code>true</code> and <code>false</code> are returned).</p>\n<pre><code>E.showPrompt(<span class=\"hljs-string\">&quot;Do you like fish?&quot;</span>).the<span class=\"hljs-meta\">n</span>(functio<span class=\"hljs-meta\">n</span>(v) {\n  <span class=\"hljs-keyword\">if</span> (v) pr<span class=\"hljs-meta\">int</span>(<span class=\"hljs-string\">&quot;&#x27;Yes&#x27; chosen&quot;</span>);\n  <span class=\"hljs-keyword\">else</span> pr<span class=\"hljs-meta\">int</span>(<span class=\"hljs-string\">&quot;&#x27;No&#x27; chosen&quot;</span>);\n});\n// <span class=\"hljs-keyword\">Or</span>\nE.showPrompt(<span class=\"hljs-string\">&quot;How many fish\\ndo you like?&quot;</span>,{\n  <span class=\"hljs-keyword\">title</span>:<span class=\"hljs-string\">&quot;Fish&quot;</span>,\n  buttons : {<span class=\"hljs-string\">&quot;One&quot;</span>:1,<span class=\"hljs-string\">&quot;Two&quot;</span>:2,<span class=\"hljs-string\">&quot;Three&quot;</span>:3}\n}).the<span class=\"hljs-meta\">n</span>(functio<span class=\"hljs-meta\">n</span>(v) {\n  pr<span class=\"hljs-meta\">int</span>(<span class=\"hljs-string\">&quot;You like &quot;</span>+v+<span class=\"hljs-string\">&quot; fish&quot;</span>);\n});\n</code></pre>\n<p>To remove the prompt, call <code>E.showPrompt()</code> with no arguments.</p>\n<p>The second <code>options</code> argument can contain:</p>\n<pre><code>{\n  <span class=\"hljs-built_in\">title</span>: <span class=\"hljs-string\">&quot;Hello&quot;</span>,                      <span class=\"hljs-comment\">// optional Title</span>\n  buttons : {<span class=\"hljs-string\">&quot;Ok&quot;</span>:<span class=\"hljs-literal\">true</span>,<span class=\"hljs-string\">&quot;Cancel&quot;</span>:<span class=\"hljs-literal\">false</span>} <span class=\"hljs-comment\">// list of button text &amp; return value</span>\n}\n</code></pre>\n",
      "!url": "http://www.espruino.com/Reference#l_E_showPrompt"
    },
    "showScroller": {
      "!type": "fn()",
      "!doc": "",
      "!url": "http://www.espruino.com/Reference#l_E_showScroller"
    },
    "showAlert": {
      "!type": "fn(message: ?, options: ?) -> ?",
      "!doc": "<p>Displays a full screen prompt on the screen, with a single &#39;Ok&#39; button.</p>\n<p>When the button is pressed the promise is resolved.</p>\n<pre><code><span class=\"hljs-module-access\"><span class=\"hljs-module\"><span class=\"hljs-identifier\">E</span>.</span></span>show<span class=\"hljs-constructor\">Alert(<span class=\"hljs-string\">&quot;Hello&quot;</span>)</span>.<span class=\"hljs-keyword\">then</span>(<span class=\"hljs-keyword\">function</span><span class=\"hljs-literal\">()</span> {\n  print(<span class=\"hljs-string\">&quot;Ok pressed&quot;</span>);\n});\n<span class=\"hljs-comment\">// or</span>\n<span class=\"hljs-module-access\"><span class=\"hljs-module\"><span class=\"hljs-identifier\">E</span>.</span></span>show<span class=\"hljs-constructor\">Alert(<span class=\"hljs-string\">&quot;These are\\nLots of\\nLines&quot;</span>,<span class=\"hljs-string\">&quot;My Title&quot;</span>)</span>.<span class=\"hljs-keyword\">then</span>(<span class=\"hljs-keyword\">function</span><span class=\"hljs-literal\">()</span> {\n  print(<span class=\"hljs-string\">&quot;Ok pressed&quot;</span>);\n});\n</code></pre>\n<p>To remove the window, call <code>E.showAlert()</code> with no arguments.</p>\n",
      "!url": "http://www.espruino.com/Reference#l_E_showAlert"
    },
    "connectSDCard": {
      "!type": "fn(spi: ?, csPin: +Pin)",
      "!doc": "<p>Setup the filesystem so that subsequent calls to <code>E.openFile</code> and\n<code>require(&#39;fs&#39;).*</code> will use an SD card on the supplied SPI device and pin.</p>\n<p>It can even work using software SPI - for instance:</p>\n<pre><code><span class=\"hljs-regexp\">//</span> DI/CMD = C7\n<span class=\"hljs-regexp\">//</span> DO/DAT0 = C8\n<span class=\"hljs-regexp\">//</span> CK/CLK = C9\n<span class=\"hljs-regexp\">//</span> CD<span class=\"hljs-regexp\">/CS/</span>DAT3 = C6\nvar spi = new SPI();\nspi.setup({mosi:C7, miso:C8, sck:C9});\nE.connectSDCard(spi, C6);\nconsole.log(require(<span class=\"hljs-string\">&quot;fs&quot;</span>).readdirSync());\n</code></pre>\n<p>See <a href=\"http://www.espruino.com/File+IO\">the page on File IO</a> for more information.</p>\n<p><strong>Note:</strong> We&#39;d strongly suggest you add a pullup resistor from CD/CS pin to\n3.3v. It is good practise to avoid accidental writes before Espruino is\ninitialised, and some cards will not work reliably without one.</p>\n<p><strong>Note:</strong> If you want to remove an SD card after you have started using it, you\n<em>must</em> call <code>E.unmountSD()</code> or you may cause damage to the card.</p>\n",
      "!url": "http://www.espruino.com/Reference#l_E_connectSDCard"
    },
    "unmountSD": {
      "!type": "fn()",
      "!doc": "<p>Unmount the SD card, so it can be removed. If you remove the SD card without\ncalling this you may cause corruption, and you will be unable to access another\nSD card until you reset Espruino or call <code>E.unmountSD()</code>.</p>\n",
      "!url": "http://www.espruino.com/Reference#l_E_unmountSD"
    },
    "openFile": {
      "!type": "fn(path: ?, mode: ?) -> +File",
      "!doc": "<p>Open a file</p>\n",
      "!url": "http://www.espruino.com/Reference#l_E_openFile"
    },
    "internal": {
      "!type": "?",
      "!doc": "<p>(2v28+) A reference to the &quot;hidden root&quot; that contains\ninternal Espruino JavaScript variables such as lists\nof timers and watches.</p>\n<p>On earlier firmwares this was accessible via <code>global[&quot;\\xff&quot;]</code></p>\n",
      "!url": "http://www.espruino.com/Reference#l_E_internal"
    },
    "getTemperature": {
      "!type": "fn() -> number",
      "!doc": "<p>Use the microcontroller&#39;s internal thermistor to work out the temperature.</p>\n<p>On Puck.js v2.0 this will use the on-board PCT2075TP temperature sensor, but on\nother devices it may not be desperately well calibrated.</p>\n<p>While this is implemented on Espruino boards, it may not be implemented on other\ndevices. If so it&#39;ll return NaN.</p>\n<p> <strong>Note:</strong> This is not entirely accurate and varies by a few degrees from chip\n to chip. It measures the <strong>die temperature</strong>, so when connected to USB it could\n be reading 10 over degrees C above ambient temperature. When running from\n battery with <code>setDeepSleep(true)</code> it is much more accurate though.</p>\n",
      "!url": "http://www.espruino.com/Reference#l_E_getTemperature"
    },
    "getAnalogVRef": {
      "!type": "fn() -> number",
      "!doc": "<p>Check the internal voltage reference. To work out an actual voltage of an input\npin, you can use <code>analogRead(pin)*E.getAnalogVRef()</code></p>\n<p> <strong>Note:</strong> This value is calculated by reading the voltage on an internal\nvoltage reference with the ADC. It will be slightly noisy, so if you need this\nfor accurate measurements we&#39;d recommend that you call this function several\ntimes and average the results.</p>\n<p>While this is implemented on Espruino boards, it may not be implemented on other\ndevices. If so it&#39;ll return NaN.</p>\n",
      "!url": "http://www.espruino.com/Reference#l_E_getAnalogVRef"
    },
    "getVDDH": {
      "!type": "fn() -> number",
      "!doc": "<p>Return the voltage on VDDH input</p>\n<p><strong>Note:</strong> This value is calculated by reading the voltage on an internal\nvoltage reference with the ADC. It will be slightly noisy, so if you need this\nfor accurate measurements we&#39;d recommend that you call this function several\ntimes and average the results.</p>\n",
      "!url": "http://www.espruino.com/Reference#l_E_getVDDH"
    },
    "nativeCall": {
      "!type": "fn(addr: number, sig: ?, data: ?) -> ?",
      "!doc": "<p>ADVANCED: It&#39;s very easy to crash Espruino using this function if\nyou get the code/arguments you supply wrong!</p>\n<p>Create a native function that executes the code at the given address, e.g.\n<code>E.nativeCall(0x08012345,&#39;double (double,double)&#39;)(1.1, 2.2)</code></p>\n<p>If you&#39;re executing a thumb function, you&#39;ll almost certainly need to set the\nbottom bit of the address to 1.</p>\n<p>Note it&#39;s not guaranteed that the call signature you provide can be used - there\nare limits on the number of arguments allowed (5).</p>\n<p>When supplying <code>data</code>, if it is a &#39;flat string&#39; then it will be used directly,\notherwise it&#39;ll be converted to a flat string and used.</p>\n<p>The argument types in <code>sig</code> are:</p>\n<ul>\n<li><code>void</code> - returns nothing</li>\n<li><code>bool</code> -  boolean value</li>\n<li><code>int</code> - 32 bit integer</li>\n<li><code>double</code> - 64 bit floating point</li>\n<li><code>float</code> - 32 bit floating point (2v21 and later)</li>\n<li><code>Pin</code> - Espruino &#39;pin&#39; value (8 bit integer)</li>\n<li><code>JsVar</code> - Pointer to an Espruino JsVar structure</li>\n</ul>\n",
      "!url": "http://www.espruino.com/Reference#l_E_nativeCall"
    },
    "clip": {
      "!type": "fn(x: number, min: number, max: number) -> number",
      "!doc": "<p>Clip a number to be between min and max (inclusive)</p>\n",
      "!url": "http://www.espruino.com/Reference#l_E_clip"
    },
    "sum": {
      "!type": "fn(arr: ?) -> number",
      "!doc": "<p>Sum the contents of the given Array, String or ArrayBuffer and return the result</p>\n",
      "!url": "http://www.espruino.com/Reference#l_E_sum"
    },
    "variance": {
      "!type": "fn(arr: ?, mean: number) -> number",
      "!doc": "<p>Work out the variance of the contents of the given Array, String or ArrayBuffer\nand return the result. This is equivalent to:</p>\n<pre><code><span class=\"hljs-attribute\">v</span>=<span class=\"hljs-number\">0</span>;\n<span class=\"hljs-attribute\">for</span> (i in arr)\n  <span class=\"hljs-attribute\">v</span>+=Math.pow(mean-arr[i],<span class=\"hljs-number\">2</span>);\n</code></pre>\n",
      "!url": "http://www.espruino.com/Reference#l_E_variance"
    },
    "convolve": {
      "!type": "fn(arr1: ?, arr2: ?, offset: number) -> number",
      "!doc": "<p>Convolve arr1 with arr2. This is equivalent to <code>v=0;for (i in arr1) v+=arr1[i] * arr2[(i+offset) % arr2.length]</code></p>\n",
      "!url": "http://www.espruino.com/Reference#l_E_convolve"
    },
    "FFT": {
      "!type": "fn(arrReal: ?, arrImage: ?, inverse: bool)",
      "!doc": "<p>Performs a Fast Fourier Transform (FFT) in 32 bit floats on the supplied data\nand writes it back into the original arrays. Note that if only one array is\nsupplied, the data written back is the modulus of the complex result\n<code>sqrt(r*r+i*i)</code>.</p>\n<p>In order to perform the FFT, there has to be enough room on the stack to\nallocate two arrays of 32 bit floating point numbers - this will limit the\nmaximum size of FFT possible to around 1024 items on most platforms.</p>\n<p><strong>Note:</strong> on the Original Espruino board, FFTs are performed in 64bit arithmetic\nas there isn&#39;t space to include the 32 bit maths routines (2x more RAM is\nrequired).</p>\n",
      "!url": "http://www.espruino.com/Reference#l_E_FFT"
    },
    "enableWatchdog": {
      "!type": "fn(timeout: number, isAuto: ?)",
      "!doc": "<p>Enable the watchdog timer. This will reset Espruino if it isn&#39;t able to return\nto the idle loop within the timeout.</p>\n<p>If <code>isAuto</code> is false, you must call <code>E.kickWatchdog()</code> yourself every so often\nor the chip will reset.</p>\n<pre><code><span class=\"hljs-module-access\"><span class=\"hljs-module\"><span class=\"hljs-identifier\">E</span>.</span></span>enable<span class=\"hljs-constructor\">Watchdog(0.5)</span>; <span class=\"hljs-comment\">// automatic mode</span>\n<span class=\"hljs-keyword\">while</span>(<span class=\"hljs-number\">1</span>); <span class=\"hljs-comment\">// Espruino will reboot because it has not been idle for 0.5 sec</span>\n</code></pre>\n<pre><code><span class=\"hljs-module-access\"><span class=\"hljs-module\"><span class=\"hljs-identifier\">E</span>.</span></span>enable<span class=\"hljs-constructor\">Watchdog(1, <span class=\"hljs-params\">false</span>)</span>;\nset<span class=\"hljs-constructor\">Interval(<span class=\"hljs-params\">function</span>()</span> {\n  <span class=\"hljs-keyword\">if</span> (everything_ok)\n    <span class=\"hljs-module-access\"><span class=\"hljs-module\"><span class=\"hljs-identifier\">E</span>.</span></span>kick<span class=\"hljs-constructor\">Watchdog()</span>;\n}, <span class=\"hljs-number\">500</span>);\n<span class=\"hljs-comment\">// Espruino will now reset if everything_ok is false,</span>\n<span class=\"hljs-comment\">// or if the interval fails to be called</span>\n</code></pre>\n<p><strong>NOTE:</strong> This is only implemented on STM32, nRF5x and ESP32 devices (all official\nEspruino boards).</p>\n<p><strong>NOTE:</strong> On STM32 (Pico, WiFi, Original) with <code>setDeepSleep(1)</code> you need to\nexplicitly wake Espruino up with an interval of less than the watchdog timeout\nor the watchdog will fire and the board will reboot. You can do this with\n<code>setInterval(&quot;&quot;, time_in_milliseconds)</code>.\n<strong>NOTE:</strong> On ESP32, the timeout will be rounded to the nearest second.</p>\n",
      "!url": "http://www.espruino.com/Reference#l_E_enableWatchdog"
    },
    "kickWatchdog": {
      "!type": "fn()",
      "!doc": "<p>Kicks a Watchdog timer set up with <code>E.enableWatchdog(..., false)</code>. See\n<code>E.enableWatchdog</code> for more information.</p>\n<p><strong>NOTE:</strong> This is only implemented on STM32 and nRF5x devices (all official\nEspruino boards).</p>\n",
      "!url": "http://www.espruino.com/Reference#l_E_kickWatchdog"
    },
    "setComparator": {
      "!type": "fn(pin: +Pin, level: number)",
      "!doc": "<p>(Added 2v25) Enable the nRF52 chip&#39;s <code>LPCOMP</code> hardware. When enabled, it creates an <code>E.on(&quot;comparator&quot;, ...)</code>\nevent whenever the pin supplied rises or falls past the setpoint given (with 50mv hysteresis).</p>\n<pre><code><span class=\"hljs-module-access\"><span class=\"hljs-module\"><span class=\"hljs-identifier\">E</span>.</span></span>set<span class=\"hljs-constructor\">Comparator(D28, 8<span class=\"hljs-operator\">/</span>16)</span>; <span class=\"hljs-comment\">// compare with VDD/2</span>\n<span class=\"hljs-module-access\"><span class=\"hljs-module\"><span class=\"hljs-identifier\">E</span>.</span></span>on(<span class=\"hljs-string\">&quot;comparator&quot;</span>,<span class=\"hljs-function\"> <span class=\"hljs-params\">e</span> =&gt;</span> {\n  print(e); <span class=\"hljs-comment\">// 1 for up, or -1 for down</span>\n});\n</code></pre>\n<p><strong>Note:</strong> There is just one LPCOMP, so you can only enable the comparator on one pin.</p>\n<p><strong>On <a href=\"https://www.espruino.com/Jolt.js\">Jolt.js</a>:</strong> when using <code>E.setComparator</code> on the analog pins on the\nTerminal block (<code>H0</code>/<code>H2</code>/<code>H4</code>/<code>H6</code>), the <code>level</code> you give needs to be in volts. Because the comparator only\nworks in 16 steps, you can only detect multiples of 1.37v (1.37/2.74/4.11/etc)</p>\n",
      "!url": "http://www.espruino.com/Reference#l_E_setComparator"
    },
    "getErrorFlags": {
      "!type": "fn() -> ?",
      "!doc": "<p>Get and reset the error flags. Returns an array that can contain:</p>\n<p><code>&#39;FIFO_FULL&#39;</code>: The receive FIFO filled up and data was lost. This could be state\ntransitions for setWatch, or received characters.</p>\n<p><code>&#39;BUFFER_FULL&#39;</code>: A buffer for a stream filled up and characters were lost. This\ncan happen to any stream - Serial,HTTP,etc.</p>\n<p><code>&#39;CALLBACK&#39;</code>: A callback (<code>setWatch</code>, <code>setInterval</code>, <code>on(&#39;data&#39;,...)</code>) caused an\nerror and so was removed.</p>\n<p><code>&#39;LOW_MEMORY&#39;</code>: Memory is running low - Espruino had to run a garbage collection\npass or remove some of the command history</p>\n<p><code>&#39;MEMORY&#39;</code>: Espruino ran out of memory and was unable to allocate some data that\nit needed.</p>\n<p><code>&#39;UART_OVERFLOW&#39;</code> : A UART received data but it was not read in time and was\nlost</p>\n",
      "!url": "http://www.espruino.com/Reference#l_E_getErrorFlags"
    },
    "getFlags": {
      "!type": "fn() -> ?",
      "!doc": "<p>Get Espruino&#39;s interpreter flags that control the way it handles your JavaScript\ncode.</p>\n<ul>\n<li><code>deepSleep</code> - Allow deep sleep modes (also set by setDeepSleep)</li>\n<li><code>pretokenise</code> - When adding functions, pre-minify them and tokenise reserved\nwords</li>\n<li><code>unsafeFlash</code> - Some platforms stop writes/erases to interpreter memory to\nstop you bricking the device accidentally - this removes that protection</li>\n<li><code>unsyncFiles</code> - When writing files, <em>don&#39;t</em> flush all data to the SD card\nafter each command (the default is <em>to</em> flush). This is much faster, but can\ncause filesystem damage if power is lost without the filesystem unmounted.</li>\n<li><code>jitDebug</code> - When JIT compiling, outputs debug info to the console</li>\n<li><code>onErrorSave</code> - (2v27+) when an uncaught error occurs, write it to a\nfile called <code>ERROR</code> in Storage (the file is not updated)</li>\n<li><code>onErrorFlash</code> - (2v27+) when an uncaught error occurs, flash the red LED\nfor 200ms (only on devices with a physical LED)</li>\n</ul>\n",
      "!url": "http://www.espruino.com/Reference#l_E_getFlags"
    },
    "setFlags": {
      "!type": "fn(flags: ?)",
      "!doc": "<p>Set the Espruino interpreter flags that control the way it handles your\nJavaScript code.</p>\n<p>Run <code>E.getFlags()</code> and check its description for a list of available flags and\ntheir values.</p>\n",
      "!url": "http://www.espruino.com/Reference#l_E_setFlags"
    },
    "pipe": {
      "!type": "fn(source: ?, destination: ?, options: ?)",
      "!doc": "<p>Pipe one stream to another.</p>\n<p>This can be given any object with a <code>read</code> method as a source, and any object with a <code>.write(data)</code> method as a destination.</p>\n<p>Data will be piped from <code>source</code> to <code>destination</code> in the idle loop until <code>source.read(...)</code> returns <code>undefined</code>.</p>\n<p>For instance:</p>\n<pre><code><span class=\"hljs-comment\">// Print a really big string to the console, 1 character at a time and write &#x27;Finished!&#x27; at the end</span>\n<span class=\"hljs-module-access\"><span class=\"hljs-module\"><span class=\"hljs-identifier\">E</span>.</span></span>pipe(<span class=\"hljs-string\">&quot;This is a really big String&quot;</span>,\n       {write: print},\n       {chunkSize:<span class=\"hljs-number\">1</span>, complete:<span class=\"hljs-literal\">()</span>=&gt;print(<span class=\"hljs-string\">&quot;Finished!&quot;</span>)});\n<span class=\"hljs-comment\">// Pipe the numbers 1 to 100 to a StorageFile in Storage</span>\n<span class=\"hljs-module-access\"><span class=\"hljs-module\"><span class=\"hljs-identifier\">E</span>.</span></span>pipe({ n:<span class=\"hljs-number\">0</span>, read : <span class=\"hljs-keyword\">function</span><span class=\"hljs-literal\">()</span> { <span class=\"hljs-keyword\">if</span> (this.n&lt;<span class=\"hljs-number\">100</span>) return (this.n++)+<span class=\"hljs-string\">&quot;\\n&quot;</span>; }},\n       require(<span class=\"hljs-string\">&quot;Storage&quot;</span>).<span class=\"hljs-keyword\">open</span>(<span class=\"hljs-string\">&quot;testfile&quot;</span>,<span class=\"hljs-string\">&quot;w&quot;</span>));\n<span class=\"hljs-comment\">// Pipe a StorageFile straight to the Bluetooth UART</span>\n<span class=\"hljs-module-access\"><span class=\"hljs-module\"><span class=\"hljs-identifier\">E</span>.</span></span>pipe(require(<span class=\"hljs-string\">&quot;Storage&quot;</span>).<span class=\"hljs-keyword\">open</span>(<span class=\"hljs-string\">&quot;testfile&quot;</span>,<span class=\"hljs-string\">&quot;r&quot;</span>), Bluetooth);\n<span class=\"hljs-comment\">// Pipe a normal file in Storage (not StorageFile) straight to the Bluetooth UART</span>\n<span class=\"hljs-module-access\"><span class=\"hljs-module\"><span class=\"hljs-identifier\">E</span>.</span></span>pipe(require(<span class=\"hljs-string\">&quot;Storage&quot;</span>).read(<span class=\"hljs-string\">&quot;blob.txt&quot;</span>), Bluetooth);\n<span class=\"hljs-comment\">// Pipe a normal file in Storage as a response to an HTTP request</span>\n<span class=\"hljs-keyword\">function</span> on<span class=\"hljs-constructor\">PageRequest(<span class=\"hljs-params\">req</span>, <span class=\"hljs-params\">res</span>)</span> {\n  res.write<span class=\"hljs-constructor\">Head(200, {&#x27;Content-Type&#x27;: &#x27;<span class=\"hljs-params\">text</span><span class=\"hljs-operator\">/</span><span class=\"hljs-params\">plain</span>&#x27;})</span>;\n  <span class=\"hljs-module-access\"><span class=\"hljs-module\"><span class=\"hljs-identifier\">E</span>.</span></span>pipe(require(<span class=\"hljs-string\">&quot;Storage&quot;</span>).read(<span class=\"hljs-string\">&quot;webpage.txt&quot;</span>), res);\n}\nrequire(<span class=\"hljs-string\">&quot;http&quot;</span>).create<span class=\"hljs-constructor\">Server(<span class=\"hljs-params\">onPageRequest</span>)</span>.listen(<span class=\"hljs-number\">80</span>);\n</code></pre>\n",
      "!url": "http://www.espruino.com/Reference#l_E_pipe"
    },
    "toArrayBuffer": {
      "!type": "fn(str: ?) -> +ArrayBufferView",
      "!doc": "<p>Create an ArrayBuffer from the given string. This is done via a reference, not a\ncopy - so it is very fast and memory efficient.</p>\n<p>Note that this is an ArrayBuffer, not a Uint8Array. To get one of those, do:\n<code>new Uint8Array(E.toArrayBuffer(&#39;....&#39;))</code>.</p>\n",
      "!url": "http://www.espruino.com/Reference#l_E_toArrayBuffer"
    },
    "toString": {
      "!type": "fn(args: ?) -> +String",
      "!doc": "<p>Returns a <code>String</code> representing the data in the arguments.</p>\n<p>This creates a string from the given arguments in the same way as <code>E.toUint8Array</code>. If each argument is:</p>\n<ul>\n<li>A String or an Array, each element is traversed and added as an 8 bit character</li>\n<li><code>{data : ..., count : N}</code> causes <code>data</code> to be repeated <code>count</code> times</li>\n<li><code>{callback : fn}</code> calls the function and adds the result</li>\n<li>Anything else is converted to a character directly.</li>\n</ul>\n<p>In the case where there&#39;s one argument which is an 8 bit typed array backed by a\nflat string of the same length, the backing string will be returned without\ndoing a copy or other allocation. The same applies if there&#39;s a single argument\nwhich is itself a flat string.</p>\n<pre><code><span class=\"hljs-module-access\"><span class=\"hljs-module\"><span class=\"hljs-identifier\">E</span>.</span></span><span class=\"hljs-keyword\">to</span><span class=\"hljs-constructor\">String(0,1,2,<span class=\"hljs-string\">&quot;Hi&quot;</span>,3)</span>\n<span class=\"hljs-string\">&quot;\\0\\1\\2Hi\\3&quot;</span>\n</code></pre>\n<pre><code><span class=\"hljs-module-access\"><span class=\"hljs-module\"><span class=\"hljs-identifier\">E</span>.</span></span><span class=\"hljs-keyword\">to</span><span class=\"hljs-constructor\">String(1,2,{<span class=\"hljs-params\">data</span>:[3,4], <span class=\"hljs-params\">count</span>:4},5,6)</span>\n<span class=\"hljs-string\">&quot;\\1\\2\\3\\4\\3\\4\\3\\4\\3\\4\\5\\6&quot;</span>\n</code></pre>\n<pre><code>E.toString(<span class=\"hljs-number\">1</span>,<span class=\"hljs-number\">2</span>,{callback <span class=\"hljs-symbol\">:</span> () =&gt; <span class=\"hljs-string\">&quot;Hello World&quot;</span>},<span class=\"hljs-number\">5</span>,<span class=\"hljs-number\">6</span>)\n=<span class=\"hljs-string\">&quot;\\1\\2Hello World\\5\\6&quot;</span>\n</code></pre>\n<p><strong>Note:</strong> Prior to Espruino 2v18 <code>E.toString</code> would always return a flat string,\nor would return <code>undefined</code> if one couldn&#39;t be allocated. Now, it will return\na normal (fragmented) String if a contiguous chunk of memory cannot be allocated.\nYou can still check if the returned value is a Flat string using <code>E.getAddressOf(str, true)!=0</code>,\nor can use <code>E.toFlatString</code> instead.</p>\n",
      "!url": "http://www.espruino.com/Reference#l_E_toString"
    },
    "toFlatString": {
      "!type": "fn(args: ?) -> +String",
      "!doc": "<p>Returns a Flat <code>String</code> representing the data in the arguments, or <code>undefined</code> if one can&#39;t be allocated.</p>\n<p>This provides the same behaviour that <code>E.toString</code> had in Espruino before 2v18 - see <code>E.toString</code> for\nmore information.</p>\n",
      "!url": "http://www.espruino.com/Reference#l_E_toFlatString"
    },
    "asUTF8": {
      "!type": "fn(str: ?) -> +String",
      "!doc": "<p>By default, strings in Espruino are standard 8 bit binary strings\nunless they contain Unicode chars or a <code>\\u####</code> escape code\nthat doesn&#39;t map to the range 0..255.</p>\n<p>However calling E.asUTF8 will convert one of those strings to\nUTF8.</p>\n<pre><code>var s = <span class=\"hljs-module-access\"><span class=\"hljs-module\"><span class=\"hljs-identifier\">String</span>.</span></span>from<span class=\"hljs-constructor\">CharCode(0xF0,0x9F,0x8D,0x94)</span>;\nvar u = <span class=\"hljs-module-access\"><span class=\"hljs-module\"><span class=\"hljs-identifier\">E</span>.</span></span><span class=\"hljs-keyword\">as</span><span class=\"hljs-constructor\">UTF8(<span class=\"hljs-params\">s</span>)</span>;\ns.length <span class=\"hljs-comment\">// 4</span>\ns<span class=\"hljs-literal\">[<span class=\"hljs-number\">0</span>]</span> <span class=\"hljs-comment\">// &quot;\\xF0&quot;</span>\nu.length <span class=\"hljs-comment\">// 1</span>\nu<span class=\"hljs-literal\">[<span class=\"hljs-number\">0</span>]</span> <span class=\"hljs-comment\">// hamburger emoji</span>\n</code></pre>\n<p><strong>NOTE:</strong> UTF8 is currently only available on Bangle.js devices</p>\n",
      "!url": "http://www.espruino.com/Reference#l_E_asUTF8"
    },
    "fromUTF8": {
      "!type": "fn(str: ?) -> +String",
      "!doc": "<p>Given a UTF8 String (see <code>E.asUTF8</code>) this returns the underlying representation\nof that String.</p>\n<pre><code><span class=\"hljs-variable\">E</span>.<span class=\"hljs-property\">fromUTF8</span>(<span class=\"hljs-string\">&quot;<span class=\"hljs-char escape_\">\\u03C0</span>&quot;</span>) <span class=\"hljs-operator\">==</span> <span class=\"hljs-string\">&quot;<span class=\"hljs-char escape_\">\\xCF</span><span class=\"hljs-char escape_\">\\x80</span>&quot;</span>\n</code></pre>\n<p><strong>NOTE:</strong> UTF8 is currently only available on Bangle.js devices</p>\n",
      "!url": "http://www.espruino.com/Reference#l_E_fromUTF8"
    },
    "isUTF8": {
      "!type": "fn(str: ?) -> bool",
      "!doc": "<p>By default, strings in Espruino are standard 8 bit binary strings\nunless they contain Unicode chars or a <code>\\u####</code> escape code\nthat doesn&#39;t map to the range 0..255.</p>\n<p>This checks if a String is being treated by Espruino as a UTF8 String</p>\n<p>See <code>E.asUTF8</code> to convert to a UTF8 String</p>\n<p><strong>NOTE:</strong> UTF8 is currently only available on Bangle.js devices</p>\n",
      "!url": "http://www.espruino.com/Reference#l_E_isUTF8"
    },
    "toUint8Array": {
      "!type": "fn(args: ?) -> +Uint8Array",
      "!doc": "<p>This creates a <code>Uint8Array</code> from the given arguments. These are handled as\nfollows:</p>\n<ul>\n<li><code>Number</code> -&gt; read as an integer, using the lowest 8 bits</li>\n<li><code>String</code> -&gt; use each character&#39;s numeric value (e.g.\n<code>String.charCodeAt(...)</code>)</li>\n<li><code>Array</code> -&gt; Call itself on each element</li>\n<li><code>ArrayBuffer</code> or Typed Array -&gt; use the lowest 8 bits of each element</li>\n<li><code>Object</code>:<ul>\n<li><code>{data:..., count: int}</code> -&gt; call itself <code>object.count</code> times, on\n<code>object.data</code></li>\n<li><code>{callback : function}</code> -&gt; call the given function, call itself on return\nvalue</li>\n</ul>\n</li>\n</ul>\n<p>For example:</p>\n<pre><code>E.toUint8Array([<span class=\"hljs-number\">1</span>,<span class=\"hljs-number\">2</span>,<span class=\"hljs-number\">3</span>])\n=new Uint8Array([<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span>])\nE.toUint8Array([<span class=\"hljs-number\">1</span>,{da<span class=\"hljs-symbol\">ta:2</span>,cou<span class=\"hljs-symbol\">nt:3</span>},<span class=\"hljs-number\">3</span>])\n=new Uint8Array([<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span>])\nE.toUint8Array(<span class=\"hljs-string\">&quot;Hello&quot;</span>)\n=new Uint8Array([<span class=\"hljs-number\">72</span>, <span class=\"hljs-number\">101</span>, <span class=\"hljs-number\">108</span>, <span class=\"hljs-number\">108</span>, <span class=\"hljs-number\">111</span>])\nE.toUint8Array([<span class=\"hljs-string\">&quot;hi&quot;</span>,{callba<span class=\"hljs-symbol\">ck:fu</span>nction() { return [<span class=\"hljs-number\">1</span>,<span class=\"hljs-number\">2</span>,<span class=\"hljs-number\">3</span>] }}])\n=new Uint8Array([<span class=\"hljs-number\">104</span>, <span class=\"hljs-number\">105</span>, <span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span>])\n</code></pre>\n",
      "!url": "http://www.espruino.com/Reference#l_E_toUint8Array"
    },
    "toJS": {
      "!type": "fn(arg: ?) -> +String",
      "!doc": "<p>This performs the same basic function as <code>JSON.stringify</code>, however\n<code>JSON.stringify</code> adds extra characters to conform to the JSON spec which aren&#39;t\nrequired if outputting JS.</p>\n<p><code>E.toJS</code> will also stringify JS functions, whereas <code>JSON.stringify</code> ignores\nthem.</p>\n<p>For example:</p>\n<ul>\n<li><code>JSON.stringify({a:1,b:2}) == &#39;{&quot;a&quot;:1,&quot;b&quot;:2}&#39;</code></li>\n<li><code>E.toJS({a:1,b:2}) == &#39;{a:1,b:2}&#39;</code></li>\n</ul>\n<p><strong>Note:</strong> Strings generated with <code>E.toJS</code> can&#39;t be reliably parsed by\n<code>JSON.parse</code> - however they are valid JS so will work with <code>eval</code> (but this has\nsecurity implications if you don&#39;t trust the source of the string).</p>\n<p>On the desktop <a href=\"https://github.com/json5/json5\">JSON5 parsers</a> will parse the\nstrings produced by <code>E.toJS</code> without trouble.</p>\n",
      "!url": "http://www.espruino.com/Reference#l_E_toJS"
    },
    "memoryArea": {
      "!type": "fn(addr: number, len: number) -> +String",
      "!doc": "<p>This creates and returns a special type of string, which references a\nspecific address in memory. It can be used in order to use sections of\nFlash memory directly in Espruino (for example <code>Storage</code> uses it\nto allow files to be read directly from Flash).</p>\n<p><strong>Note:</strong> As of 2v21, Calling <code>E.memoryArea</code> with an address of 0 will return <code>undefined</code></p>\n",
      "!url": "http://www.espruino.com/Reference#l_E_memoryArea"
    },
    "setBootCode": {
      "!type": "fn(code: ?, alwaysExec: bool)",
      "!doc": "<p>This writes JavaScript code into Espruino&#39;s flash memory, to be executed on\nstartup. It differs from <code>save()</code> in that <code>save()</code> saves the whole state of the\ninterpreter, whereas this just saves JS code that is executed at boot.</p>\n<p>Code will be executed before <code>onInit()</code> and <code>E.on(&#39;init&#39;, ...)</code>.</p>\n<p>If <code>alwaysExec</code> is <code>true</code>, the code will be executed even after a call to\n<code>reset()</code>. This is useful if you&#39;re making something that you want to program,\nbut you want some code that is always built in (for instance setting up a\ndisplay or keyboard).</p>\n<p>To remove boot code that has been saved previously, use <code>E.setBootCode(&quot;&quot;)</code></p>\n<p><strong>Note:</strong> this removes any code that was previously saved with <code>save()</code></p>\n",
      "!url": "http://www.espruino.com/Reference#l_E_setBootCode"
    },
    "setClock": {
      "!type": "fn(options: ?) -> number",
      "!doc": "<p>This sets the clock frequency of Espruino&#39;s processor. It will return <code>0</code> if it\nis unimplemented or the clock speed cannot be changed.</p>\n<p><strong>Note:</strong> On pretty much all boards, UART, SPI, I2C, PWM, etc will change\nfrequency and will need setting up again in order to work.</p>\n<h3 id=\"stm32f4\">STM32F4</h3>\n<p>Options is of the form <code>{ M: int, N: int, P: int, Q: int }</code> - see the &#39;Clocks&#39;\nsection of the microcontroller&#39;s reference manual for what these mean.</p>\n<ul>\n<li>System clock = 8Mhz * N / ( M * P )</li>\n<li>USB clock (should be 48Mhz) = 8Mhz * N / ( M * Q )</li>\n</ul>\n<p>Optional arguments are:</p>\n<ul>\n<li><code>latency</code> - flash latency from 0..15</li>\n<li><code>PCLK1</code> - Peripheral clock 1 divisor (default: 2)</li>\n<li><code>PCLK2</code> - Peripheral clock 2 divisor (default: 4)</li>\n</ul>\n<p>The Pico&#39;s default is <code>{M:8, N:336, P:4, Q:7, PCLK1:2, PCLK2:4}</code>, use <code>{M:8, N:336, P:8, Q:7, PCLK:1, PCLK2:2}</code> to halve the system clock speed while keeping\nthe peripherals running at the same speed (omitting PCLK1/2 will lead to the\nperipherals changing speed too).</p>\n<p>On STM32F4 boards (e.g. Espruino Pico), the USB clock needs to be kept at 48Mhz\nor USB will fail to work. You&#39;ll also experience USB instability if the\nprocessor clock falls much below 48Mhz.</p>\n<h3 id=\"esp8266\">ESP8266</h3>\n<p>Just specify an integer value, either 80 or 160 (for 80 or 160Mhz)</p>\n",
      "!url": "http://www.espruino.com/Reference#l_E_setClock"
    },
    "getClock": {
      "!type": "fn() -> ?",
      "!doc": "<p>On boards other than STM32 this currently just returns <code>undefined</code></p>\n<h3 id=\"stm32\">STM32</h3>\n<p>See <code>E.setClock</code> for more information.</p>\n<p>Returns:</p>\n<pre><code>{\n  sysclk, hclk, pclk1, pclk2,  <span class=\"hljs-regexp\">//</span> various clocks <span class=\"hljs-keyword\">in</span> Hz\n  M, N, P, Q, PCLK1, PCLK2     <span class=\"hljs-regexp\">//</span> STM32F4: currently set divisors\n  RTCCLKSource : <span class=\"hljs-string\">&quot;LSI/LSE/HSE_Div#&quot;</span> <span class=\"hljs-regexp\">//</span> STM32F4 source <span class=\"hljs-keyword\">for</span> RTC clock\n}\n</code></pre>\n",
      "!url": "http://www.espruino.com/Reference#l_E_getClock"
    },
    "setConsole": {
      "!type": "fn(device: ?, options: ?)",
      "!doc": "<p>Changes the device that the JS console (otherwise known as the REPL) is attached\nto. If the console is on a device, that device can be used for programming\nEspruino.</p>\n<p>Rather than calling <code>Serial.setConsole</code> you can call\n<code>E.setConsole(&quot;DeviceName&quot;)</code>.</p>\n<p>This is particularly useful if you just want to remove the console.\n<code>E.setConsole(null)</code> will make the console completely inaccessible.</p>\n<p><code>device</code> may be <code>&quot;Serial1&quot;</code>,<code>&quot;USB&quot;</code>,<code>&quot;Bluetooth&quot;</code>,<code>&quot;Telnet&quot;</code>,<code>&quot;Terminal&quot;</code>, any\nother <em>hardware</em> <code>Serial</code> device, or <code>null</code> to disable the console completely.</p>\n<p><code>options</code> is of the form:</p>\n<pre><code>{\n  force : <span class=\"hljs-built_in\">bool</span> <span class=\"hljs-comment\">// default false, force the console onto this device so it does not move</span>\n               <span class=\"hljs-comment\">//   if false, changes in connection state (e.g. USB/Bluetooth) can move</span>\n               <span class=\"hljs-comment\">//   the console automatically.</span>\n}\n</code></pre>\n",
      "!url": "http://www.espruino.com/Reference#l_E_setConsole"
    },
    "getConsole": {
      "!type": "fn() -> ?",
      "!doc": "<p>Returns the current console device - see <code>E.setConsole</code> for more information.</p>\n",
      "!url": "http://www.espruino.com/Reference#l_E_getConsole"
    },
    "reverseByte": {
      "!type": "fn(x: number) -> number",
      "!doc": "<p>Reverse the 8 bits in a byte, swapping MSB and LSB.</p>\n<p>For example, <code>E.reverseByte(0b10010000) == 0b00001001</code>.</p>\n<p>Note that you can reverse all the bytes in an array with: <code>arr = arr.map(E.reverseByte)</code></p>\n",
      "!url": "http://www.espruino.com/Reference#l_E_reverseByte"
    },
    "dumpTimers": {
      "!type": "fn()",
      "!doc": "<p>Output the current list of Utility Timer Tasks - for debugging only</p>\n",
      "!url": "http://www.espruino.com/Reference#l_E_dumpTimers"
    },
    "dumpLockedVars": {
      "!type": "fn()",
      "!doc": "<p>Dump any locked variables that aren&#39;t referenced from <code>global</code> - for debugging\nmemory leaks only.</p>\n<p><strong>Note:</strong> This does a linear scan over memory, finding variables\nthat are currently locked. In some cases it may show variables\nlike <code>Unknown 66</code> which happen when <em>part</em> of a string has ended\nup placed in memory ahead of the String that it&#39;s part of. See <a href=\"https://github.com/espruino/Espruino/issues/2345\">https://github.com/espruino/Espruino/issues/2345</a></p>\n",
      "!url": "http://www.espruino.com/Reference#l_E_dumpLockedVars"
    },
    "dumpFreeList": {
      "!type": "fn()",
      "!doc": "<p>Dump any locked variables that aren&#39;t referenced from <code>global</code> - for debugging\nmemory leaks only.</p>\n",
      "!url": "http://www.espruino.com/Reference#l_E_dumpFreeList"
    },
    "dumpFragmentation": {
      "!type": "fn()",
      "!doc": "<p>Show fragmentation. As of 2v27 this stops at the last allocated variable\nso as to avoid outputting blank lines if memory isn&#39;t full.</p>\n<ul>\n<li><code> </code> is free space</li>\n<li><code>#</code> is a normal variable</li>\n<li><code>L</code> is a locked variable (address used, cannot be moved)</li>\n<li><code>=</code> represents data in a Flat String (must be contiguous)</li>\n</ul>\n",
      "!url": "http://www.espruino.com/Reference#l_E_dumpFragmentation"
    },
    "dumpVariables": {
      "!type": "fn()",
      "!doc": "<p>Dumps a comma-separated list of all allocated variables along with the variables\nthey link to. Can be used to visualise where memory is used.</p>\n",
      "!url": "http://www.espruino.com/Reference#l_E_dumpVariables"
    },
    "defrag": {
      "!type": "fn()",
      "!doc": "<p>This defragment&#39;s Espruino&#39;s memory.</p>\n<p>While Espruino does a lot of work to avoid fragmentation (variables spread over memory)\nand can usually work around it (such as by allocating data in chunks) sometimes\nit is useful to be able to allocate a large contiguous chunk of memory, and\nif memory is low and has been fragmented it may need defragmenting in order to\nfind that chunk.</p>\n<p>See <code>E.dumpFragmentation()</code> to show a map of the arrangement of variables\nwithin memory.</p>\n",
      "!url": "http://www.espruino.com/Reference#l_E_defrag"
    },
    "getSizeOf": {
      "!type": "fn(v: ?, depth: number) -> ?",
      "!doc": "<p>Return the number of variable blocks used by the supplied variable. This is\nuseful if you&#39;re running out of memory and you want to be able to see what is\ntaking up most of the available space.</p>\n<p>If <code>depth&gt;0</code> and the variable can be recursed into, an array listing all\nproperty names (including internal Espruino names) and their sizes is returned.\nIf <code>depth&gt;1</code> there is also a <code>more</code> field that inspects the objects&#39; children&#39;s\nchildren.</p>\n<p>For instance <code>E.getSizeOf(function(a,b) { })</code> returns <code>5</code>.</p>\n<p>But <code>E.getSizeOf(function(a,b) { }, 1)</code> returns:</p>\n<pre><code> [\n  {\n    <span class=\"hljs-string\">&quot;name&quot;</span>: <span class=\"hljs-string\">&quot;a&quot;</span>,\n    <span class=\"hljs-string\">&quot;size&quot;</span>: <span class=\"hljs-number\">1</span> },\n  {\n    <span class=\"hljs-string\">&quot;name&quot;</span>: <span class=\"hljs-string\">&quot;b&quot;</span>,\n    <span class=\"hljs-string\">&quot;size&quot;</span>: <span class=\"hljs-number\">1</span> },\n  {\n    <span class=\"hljs-string\">&quot;name&quot;</span>: <span class=\"hljs-string\">&quot;\\xFFcod&quot;</span>,\n    <span class=\"hljs-string\">&quot;size&quot;</span>: <span class=\"hljs-number\">2</span> }\n ]\n</code></pre>\n<p>In this case setting depth to <code>2</code> will make no difference as there are no more\nchildren to traverse.</p>\n<p>See <a href=\"http://www.espruino.com/Internals\">http://www.espruino.com/Internals</a> for more information</p>\n",
      "!url": "http://www.espruino.com/Reference#l_E_getSizeOf"
    },
    "getAddressOf": {
      "!type": "fn(v: ?, flatAddress: bool) -> number",
      "!doc": "<p>Return the address in memory of the given variable. This can then be used with\n<code>peek</code> and <code>poke</code> functions. However, changing data in JS variables directly\n(flatAddress=false) will most likely result in a crash.</p>\n<p>This functions exists to allow embedded targets to set up peripherals such as\nDMA so that they write directly to JS variables.</p>\n<p>See <a href=\"http://www.espruino.com/Internals\">http://www.espruino.com/Internals</a> for more information</p>\n",
      "!url": "http://www.espruino.com/Reference#l_E_getAddressOf"
    },
    "mapInPlace": {
      "!type": "fn(from: ?, to: ?, map: ?, bits: number)",
      "!doc": "<p>Take each element of the <code>from</code> array, look it up in <code>map</code> (or call\n<code>map(value,index)</code> if it is a function), and write it into the corresponding\nelement in the <code>to</code> array.</p>\n<p>You can use an array to map:</p>\n<pre><code>var a = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-constructor\">Uint8Array([1,2,3,1,2,3])</span>;\nvar lut = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-constructor\">Uint8Array([128,129,130,131])</span>;\n<span class=\"hljs-module-access\"><span class=\"hljs-module\"><span class=\"hljs-identifier\">E</span>.</span></span>map<span class=\"hljs-constructor\">InPlace(<span class=\"hljs-params\">a</span>, <span class=\"hljs-params\">a</span>, <span class=\"hljs-params\">lut</span>)</span>;\n<span class=\"hljs-comment\">// a = [129, 130, 131, 129, 130, 131]</span>\n</code></pre>\n<p>Or <code>undefined</code> to pass straight through, or a function to do a normal &#39;mapping&#39;:</p>\n<pre><code>var a = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-constructor\">Uint8Array([0x12,0x34,0x56,0x78])</span>;\nvar b = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-constructor\">Uint8Array(8)</span>;\n<span class=\"hljs-module-access\"><span class=\"hljs-module\"><span class=\"hljs-identifier\">E</span>.</span></span>map<span class=\"hljs-constructor\">InPlace(<span class=\"hljs-params\">a</span>, <span class=\"hljs-params\">b</span>, <span class=\"hljs-params\">undefined</span>)</span>; <span class=\"hljs-comment\">// straight through</span>\n<span class=\"hljs-comment\">// b = [0x12,0x34,0x56,0x78,0,0,0,0]</span>\n<span class=\"hljs-module-access\"><span class=\"hljs-module\"><span class=\"hljs-identifier\">E</span>.</span></span>map<span class=\"hljs-constructor\">InPlace(<span class=\"hljs-params\">a</span>, <span class=\"hljs-params\">b</span>, (<span class=\"hljs-params\">value</span>,<span class=\"hljs-params\">index</span>)</span>=&gt;index); <span class=\"hljs-comment\">// write the index in the first 4 (because a.length==4)</span>\n<span class=\"hljs-comment\">// b = [0,1,2,3,4,0,0,0]</span>\n<span class=\"hljs-module-access\"><span class=\"hljs-module\"><span class=\"hljs-identifier\">E</span>.</span></span>map<span class=\"hljs-constructor\">InPlace(<span class=\"hljs-params\">a</span>, <span class=\"hljs-params\">b</span>, <span class=\"hljs-params\">undefined</span>, 4)</span>; <span class=\"hljs-comment\">// 4 bits from 8 bit input -&gt; 2x as many outputs, msb-first</span>\n<span class=\"hljs-comment\">// b = [1, 2, 3, 4, 5, 6, 7, 8]</span>\n <span class=\"hljs-module-access\"><span class=\"hljs-module\"><span class=\"hljs-identifier\">E</span>.</span></span>map<span class=\"hljs-constructor\">InPlace(<span class=\"hljs-params\">a</span>, <span class=\"hljs-params\">b</span>, <span class=\"hljs-params\">undefined</span>, -4)</span>; <span class=\"hljs-comment\">// 4 bits from 8 bit input -&gt; 2x as many outputs, lsb-first</span>\n<span class=\"hljs-comment\">// b = [2, 1, 4, 3, 6, 5, 8, 7]</span>\n<span class=\"hljs-module-access\"><span class=\"hljs-module\"><span class=\"hljs-identifier\">E</span>.</span></span>map<span class=\"hljs-constructor\">InPlace(<span class=\"hljs-params\">a</span>, <span class=\"hljs-params\">b</span>, <span class=\"hljs-params\">a</span>=&gt;<span class=\"hljs-params\">a</span>+2, 4)</span>;\n<span class=\"hljs-comment\">// b = [3, 4, 5, 6, 7, 8, 9, 10]</span>\nvar b = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-constructor\">Uint16Array(4)</span>;\n<span class=\"hljs-module-access\"><span class=\"hljs-module\"><span class=\"hljs-identifier\">E</span>.</span></span>map<span class=\"hljs-constructor\">InPlace(<span class=\"hljs-params\">a</span>, <span class=\"hljs-params\">b</span>, <span class=\"hljs-params\">undefined</span>, 12)</span>; <span class=\"hljs-comment\">// 12 bits from 8 bit input, msb-first</span>\n<span class=\"hljs-comment\">// b = [0x123, 0x456, 0x780, 0]</span>\n<span class=\"hljs-module-access\"><span class=\"hljs-module\"><span class=\"hljs-identifier\">E</span>.</span></span>map<span class=\"hljs-constructor\">InPlace(<span class=\"hljs-params\">a</span>, <span class=\"hljs-params\">b</span>, <span class=\"hljs-params\">undefined</span>, -12)</span>; <span class=\"hljs-comment\">// 12 bits from 8 bit input, lsb-first</span>\n<span class=\"hljs-comment\">// b = [0x412, 0x563, 0x078, 0]</span>\n</code></pre>\n",
      "!url": "http://www.espruino.com/Reference#l_E_mapInPlace"
    },
    "lookupNoCase": {
      "!type": "fn(haystack: ?, needle: ?, returnKey: bool) -> ?",
      "!doc": "<p>Search in an Object, Array, or Function</p>\n",
      "!url": "http://www.espruino.com/Reference#l_E_lookupNoCase"
    },
    "dumpStr": {
      "!type": "fn() -> +String",
      "!doc": "<p>Get the current interpreter state in a text form such that it can be copied to a\nnew device</p>\n",
      "!url": "http://www.espruino.com/Reference#l_E_dumpStr"
    },
    "srand": {
      "!type": "fn(v: number)",
      "!doc": "<p>Set the seed for the random number generator used by <code>Math.random()</code>.</p>\n",
      "!url": "http://www.espruino.com/Reference#l_E_srand"
    },
    "hwRand": {
      "!type": "fn() -> number",
      "!doc": "<p>Unlike &#39;Math.random()&#39; which uses a pseudo-random number generator, this method\nreads from the internal voltage reference several times, XOR-ing and rotating to\ntry and make a relatively random value from the noise in the signal.</p>\n",
      "!url": "http://www.espruino.com/Reference#l_E_hwRand"
    },
    "CRC32": {
      "!type": "fn(data: ?) -> ?",
      "!doc": "<p>Perform a standard 32 bit CRC (Cyclic redundancy check) on the supplied data\n(one byte at a time) and return the result as an unsigned integer.</p>\n",
      "!url": "http://www.espruino.com/Reference#l_E_CRC32"
    },
    "HSBtoRGB": {
      "!type": "fn(hue: number, sat: number, bri: number, format: number) -> ?",
      "!doc": "<p>Convert hue, saturation and brightness to red, green and blue (packed into an\ninteger if <code>asArray==false</code> or an array if <code>asArray==true</code>).</p>\n<p>This replaces <code>Graphics.setColorHSB</code> and <code>Graphics.setBgColorHSB</code>. On devices\nwith 24 bit colour it can be used as: <code>Graphics.setColor(E.HSBtoRGB(h, s, b))</code>,\nor on devices with 26 bit colour use <code>Graphics.setColor(E.HSBtoRGB(h, s, b, 16))</code></p>\n<p>You can quickly set RGB items in an Array or Typed Array using\n<code>array.set(E.HSBtoRGB(h, s, b, true), offset)</code>, which can be useful with arrays\nused with <code>require(&quot;neopixel&quot;).write</code>.</p>\n",
      "!url": "http://www.espruino.com/Reference#l_E_HSBtoRGB"
    },
    "setPassword": {
      "!type": "fn(password: ?)",
      "!doc": "<p>Set a password on the console (REPL). When powered on, Espruino will then demand\na password before the console can be used. If you want to lock the console\nimmediately after this you can call <code>E.lockConsole()</code></p>\n<p>To remove the password, call this function with no arguments.</p>\n<p><strong>Note:</strong> There is no protection against multiple password attempts, so someone\ncould conceivably try every password in a dictionary.</p>\n<p><strong>Note:</strong> This password is stored in memory in plain text. If someone is able to\nexecute arbitrary JavaScript code on the device (e.g., you use <code>eval</code> on input\nfrom unknown sources) or read the device&#39;s firmware then they may be able to\nobtain it.</p>\n",
      "!url": "http://www.espruino.com/Reference#l_E_setPassword"
    },
    "lockConsole": {
      "!type": "fn()",
      "!doc": "<p>If a password has been set with <code>E.setPassword()</code>, this will lock the console so\nthe password needs to be entered to unlock it.</p>\n",
      "!url": "http://www.espruino.com/Reference#l_E_lockConsole"
    },
    "setTimeZone": {
      "!type": "fn(zone: number)",
      "!doc": "<p>Set the time zone to be used with <code>Date</code> objects.</p>\n<p>For example <code>E.setTimeZone(1)</code> will be GMT+0100</p>\n<p>Time can be set with <code>setTime</code>.</p>\n<p><strong>Note:</strong> If daylight savings time rules have been set with <code>E.setDST()</code>,\ncalling <code>E.setTimeZone()</code> will remove them and move back to using a static\ntimezone that doesn&#39;t change based on the time of year.</p>\n",
      "!url": "http://www.espruino.com/Reference#l_E_setTimeZone"
    },
    "setDST": {
      "!type": "fn(params: ?)",
      "!doc": "<p>Set the daylight savings time parameters to be used with <code>Date</code> objects.</p>\n<p>The parameters are</p>\n<ul>\n<li>dstOffset: The number of minutes daylight savings time adds to the clock\n(usually 60) - set to 0 to disable DST</li>\n<li>timezone: The time zone, in minutes, when DST is not in effect - positive east\nof Greenwich</li>\n<li>startDowNumber: The index of the day-of-week in the month when DST starts - 0\nfor first, 1 for second, 2 for third, 3 for fourth and 4 for last</li>\n<li>startDow: The day-of-week for the DST start calculation - 0 for Sunday, 6 for\nSaturday</li>\n<li>startMonth: The number of the month that DST starts - 0 for January, 11 for\nDecember</li>\n<li>startDayOffset: The number of days between the selected day-of-week and the\nactual day that DST starts - usually 0</li>\n<li>startTimeOfDay: The number of minutes elapsed in the day before DST starts</li>\n<li>endDowNumber: The index of the day-of-week in the month when DST ends - 0 for\nfirst, 1 for second, 2 for third, 3 for fourth and 4 for last</li>\n<li>endDow: The day-of-week for the DST end calculation - 0 for Sunday, 6 for\nSaturday</li>\n<li>endMonth: The number of the month that DST ends - 0 for January, 11 for\nDecember</li>\n<li>endDayOffset: The number of days between the selected day-of-week and the\nactual day that DST ends - usually 0</li>\n<li>endTimeOfDay: The number of minutes elapsed in the day before DST ends</li>\n</ul>\n<p>To determine what the <code>dowNumber, dow, month, dayOffset, timeOfDay</code> parameters\nshould be, start with a sentence of the form &quot;DST starts on the last Sunday of\nMarch (plus 0 days) at 03:00&quot;. Since it&#39;s the last Sunday, we have\nstartDowNumber = 4, and since it&#39;s Sunday, we have startDow = 0. That it is\nMarch gives us startMonth = 2, and that the offset is zero days, we have\nstartDayOffset = 0. The time that DST starts gives us startTimeOfDay = 3*60.</p>\n<p>&quot;DST ends on the Friday before the second Sunday in November at 02:00&quot; would\ngive us endDowNumber=1, endDow=0, endMonth=10, endDayOffset=-2 and\nendTimeOfDay=120.</p>\n<p>Using Ukraine as an example, we have a time which is 2 hours ahead of GMT in\nwinter (EET) and 3 hours in summer (EEST). DST starts at 03:00 EET on the last\nSunday in March, and ends at 04:00 EEST on the last Sunday in October. So\nsomeone in Ukraine might call <code>E.setDST(60,120,4,0,2,0,180,4,0,9,0,240);</code></p>\n<p>Examples:</p>\n<pre><code><span class=\"hljs-comment\">// United Kingdom</span>\n<span class=\"hljs-module-access\"><span class=\"hljs-module\"><span class=\"hljs-identifier\">E</span>.</span></span>set<span class=\"hljs-constructor\">DST(60,0,4,0,2,0,60,4,0,9,0,120)</span>;\n<span class=\"hljs-comment\">// California, USA</span>\n<span class=\"hljs-module-access\"><span class=\"hljs-module\"><span class=\"hljs-identifier\">E</span>.</span></span>set<span class=\"hljs-constructor\">DST(60,-480,1,0,2,0,120,0,0,10,0,120)</span>;\n<span class=\"hljs-comment\">// Or adjust -480 (-8 hours) for other US states</span>\n<span class=\"hljs-comment\">// Ukraine</span>\n<span class=\"hljs-module-access\"><span class=\"hljs-module\"><span class=\"hljs-identifier\">E</span>.</span></span>set<span class=\"hljs-constructor\">DST(60,120,4,0,2,0,180,4,0,9,0,240)</span>;\n</code></pre>\n<p><strong>Note:</strong> This is not compatible with <code>E.setTimeZone()</code>. Calling <code>E.setTimeZone()</code>\nafter this will disable DST.</p>\n",
      "!url": "http://www.espruino.com/Reference#l_E_setDST"
    },
    "memoryMap": {
      "!type": "fn(baseAddress: ?, registers: ?) -> ?",
      "!doc": "<p>Create an object where every field accesses a specific 32 bit address in the\nmicrocontroller&#39;s memory. This is perfect for accessing on-chip peripherals.</p>\n<pre><code><span class=\"hljs-comment\">// for NRF52 based chips</span>\n<span class=\"hljs-keyword\">var</span> GPIO = E.<span class=\"hljs-title function_ invoke__\">memoryMap</span>(<span class=\"hljs-number\">0x50000000</span>,{<span class=\"hljs-attr\">OUT</span>:<span class=\"hljs-number\">0x504</span>, <span class=\"hljs-attr\">OUTSET</span>:<span class=\"hljs-number\">0x508</span>, <span class=\"hljs-attr\">OUTCLR</span>:<span class=\"hljs-number\">0x50C</span>, <span class=\"hljs-attr\">IN</span>:<span class=\"hljs-number\">0x510</span>, <span class=\"hljs-attr\">DIR</span>:<span class=\"hljs-number\">0x514</span>, <span class=\"hljs-attr\">DIRSET</span>:<span class=\"hljs-number\">0x518</span>, <span class=\"hljs-attr\">DIRCLR</span>:<span class=\"hljs-number\">0x51C</span>});\nGPIO.DIRSET = <span class=\"hljs-number\">1</span>; <span class=\"hljs-comment\">// set GPIO0 to output</span>\nGPIO.OUT ^= <span class=\"hljs-number\">1</span>; <span class=\"hljs-comment\">// toggle the output state of GPIO0</span>\n</code></pre>\n",
      "!url": "http://www.espruino.com/Reference#l_E_memoryMap"
    },
    "asm": {
      "!type": "fn(callspec: ?, assemblycode: ?)",
      "!doc": "<p>Provide assembly to Espruino.</p>\n<p><strong>This function is not part of Espruino</strong>. Instead, it is detected by the\nEspruino IDE (or command-line tools) at upload time and is replaced with machine\ncode and an <code>E.nativeCall</code> call.</p>\n<p>See <a href=\"http://www.espruino.com/Assembler\">the documentation on the Assembler</a> for\nmore information.</p>\n",
      "!url": "http://www.espruino.com/Reference#l_E_asm"
    },
    "compiledC": {
      "!type": "fn(code: ?)",
      "!doc": "<p>Provides the ability to write C code inside your JavaScript file.</p>\n<p><strong>This function is not part of Espruino</strong>. Instead, it is detected by the\nEspruino IDE (or command-line tools) at upload time, is sent to our web service\nto be compiled, and is replaced with machine code and an <code>E.nativeCall</code> call.</p>\n<p>See <a href=\"http://www.espruino.com/InlineC\">the documentation on Inline C</a> for more\ninformation and examples.</p>\n",
      "!url": "http://www.espruino.com/Reference#l_E_compiledC"
    },
    "reboot": {
      "!type": "fn()",
      "!doc": "<p>Forces a hard reboot of the microcontroller - as close as possible to if the\nreset pin had been toggled.</p>\n<p><strong>Note:</strong> This is different to <code>reset()</code>, which performs a software reset of\nEspruino (resetting the interpreter and pin states, but not all the hardware)</p>\n",
      "!url": "http://www.espruino.com/Reference#l_E_reboot"
    },
    "rebootToDFU": {
      "!type": "fn()",
      "!doc": "<p>Forces a hard reboot of the microcontroller into DFU mode.</p>\n<p>If this is an ST device, this will be the ST DFU mode.</p>\n<p>If this device has an UF2 bootloader, it will reappear as a USB drive, onto which you can copy new firmware.</p>\n<p><strong>Note:</strong> The device will stay in DFU mode until it is power-cycled or reset.</p>\n",
      "!url": "http://www.espruino.com/Reference#l_E_rebootToDFU"
    },
    "setUSBHID": {
      "!type": "fn(opts: ?)",
      "!doc": "<p>USB HID will only take effect next time you unplug and re-plug your Espruino. If\nyou&#39;re disconnecting it from power you&#39;ll have to make sure you have <code>save()</code>d\nafter calling this function.</p>\n",
      "!url": "http://www.espruino.com/Reference#l_E_setUSBHID"
    },
    "sendUSBHID": {
      "!type": "fn(data: ?) -> bool",
      "!doc": "",
      "!url": "http://www.espruino.com/Reference#l_E_sendUSBHID"
    },
    "getBattery": {
      "!type": "fn() -> number",
      "!doc": "<p>In devices that come with batteries, this function returns the battery charge\npercentage as an integer between 0 and 100.</p>\n<p><strong>Note:</strong> this is an estimation only, based on battery voltage. The temperature\nof the battery (as well as the load being drawn from it at the time\n<code>E.getBattery</code> is called) will affect the readings.</p>\n",
      "!url": "http://www.espruino.com/Reference#l_E_getBattery"
    },
    "setRTCPrescaler": {
      "!type": "fn(prescaler: number)",
      "!doc": "<p>Sets the RTC&#39;s prescaler&#39;s maximum value. This is the counter that counts up on\neach oscillation of the low speed oscillator. When the prescaler counts to the\nvalue supplied, one second is deemed to have passed.</p>\n<p>By default this is set to the oscillator&#39;s average speed as specified in the\ndatasheet, and usually that is fine. However on early <a href=\"/Pico\">Espruino Pico</a>\nboards the STM32F4&#39;s internal oscillator could vary by as much as 15% from the\nvalue in the datasheet. In that case you may want to alter this value to reflect\nthe true RTC speed for more accurate timekeeping.</p>\n<p>To change the RTC&#39;s prescaler value to a computed value based on comparing\nagainst the high speed oscillator, just run the following command, making sure\nit&#39;s done a few seconds after the board starts up:</p>\n<pre><code><span class=\"hljs-module-access\"><span class=\"hljs-module\"><span class=\"hljs-identifier\">E</span>.</span></span>set<span class=\"hljs-constructor\">RTCPrescaler(E.<span class=\"hljs-params\">getRTCPrescaler</span>(<span class=\"hljs-params\">true</span>)</span>);\n</code></pre>\n<p>When changing the RTC prescaler, the RTC &#39;follower&#39; counters are reset and it\ncan take a second or two before readings from getTime are stable again.</p>\n<p>To test, you can connect an input pin to a known frequency square wave and then\nuse <code>setWatch</code>. If you don&#39;t have a frequency source handy, you can check\nagainst the high speed oscillator:</p>\n<pre><code><span class=\"hljs-comment\">// connect pin B3 to B4</span>\n<span class=\"hljs-built_in\">analogWrite</span>(B3, <span class=\"hljs-number\">0.5</span>, {freq:<span class=\"hljs-number\">0.5</span>});\n<span class=\"hljs-built_in\">setWatch</span>(function(e) {\n  <span class=\"hljs-built_in\">print</span>(e.time - e.lastTime);\n}, B4, {repeat:true});\n</code></pre>\n<p><strong>Note:</strong> This is only used on official Espruino boards containing an STM32\nmicrocontroller. Other boards (even those using an STM32) don&#39;t use the RTC and\nso this has no effect.</p>\n",
      "!url": "http://www.espruino.com/Reference#l_E_setRTCPrescaler"
    },
    "getRTCPrescaler": {
      "!type": "fn(calibrate: bool) -> number",
      "!doc": "<p>Gets the RTC&#39;s current prescaler value if <code>calibrate</code> is undefined or false.</p>\n<p>If <code>calibrate</code> is true, the low speed oscillator&#39;s speed is calibrated against\nthe high speed oscillator (usually +/- 20 ppm) and a suggested value to be fed\ninto <code>E.setRTCPrescaler(...)</code> is returned.</p>\n<p>See <code>E.setRTCPrescaler</code> for more information.</p>\n",
      "!url": "http://www.espruino.com/Reference#l_E_getRTCPrescaler"
    },
    "getPowerUsage": {
      "!type": "fn() -> ?",
      "!doc": "<p>This function returns an object detailing the current <strong>estimated</strong> power usage\nof the Espruino device in microamps (uA). It is not intended to be a replacement\nfor measuring actual power consumption, but can be useful for finding obvious power\ndraws.</p>\n<p>Where an Espruino device has outputs that are connected to other things, those\nare not included in the power usage figures.</p>\n<p>Results look like:</p>\n<pre><code>{\n  device: {\n    CPU : <span class=\"hljs-number\">2000</span>, <span class=\"hljs-regexp\">//</span> microcontroller\n    LCD : <span class=\"hljs-number\">100</span>, <span class=\"hljs-regexp\">//</span> LCD\n    <span class=\"hljs-regexp\">//</span> ...\n  },\n  total : <span class=\"hljs-number\">5500</span> <span class=\"hljs-regexp\">//</span> estimated usage <span class=\"hljs-keyword\">in</span> microamps\n}\n</code></pre>\n<p><strong>Note:</strong> Currently only nRF52-based devices have variable CPU power usage\nfigures. These are based on the time passed for each SysTick event, so under heavy\nusage the figure will update within 0.3s, but under low CPU usage it could take\nminutes for the CPU usage figure to update.</p>\n<p><strong>Note:</strong> On Jolt.js we take account of internal resistance on H0/H2/H4/H6 where\nwe can measure voltage. H1/H3/H5/H7 cannot be measured.</p>\n",
      "!url": "http://www.espruino.com/Reference#l_E_getPowerUsage"
    },
    "decodeUTF8": {
      "!type": "fn(str: ?, lookup: ?, replaceFn: ?) -> ?",
      "!doc": "<p>Decode a UTF8 string.</p>\n<ul>\n<li>Any decoded character less than 256 gets passed straight through</li>\n<li>Otherwise if <code>lookup</code> is an array and an item with that char code exists in <code>lookup</code> then that is used</li>\n<li>Otherwise if <code>lookup</code> is an object and an item with that char code (as lowercase hex) exists in <code>lookup</code> then that is used</li>\n<li>Otherwise <code>replaceFn(charCode)</code> is called and the result used if <code>replaceFn</code> is a function</li>\n<li>If <code>replaceFn</code> is a string, that is used</li>\n<li>Or finally if nothing else matches, the character is ignored</li>\n</ul>\n<p>For instance:</p>\n<pre><code><span class=\"hljs-keyword\">let</span> unicodeRemap = {\n  <span class=\"hljs-number\">0x20ac</span>:<span class=\"hljs-string\">&quot;\\u0080&quot;</span>, <span class=\"hljs-comment\">// Euro symbol</span>\n  <span class=\"hljs-number\">0x2026</span>:<span class=\"hljs-string\">&quot;\\u0085&quot;</span>, <span class=\"hljs-comment\">// Ellipsis</span>\n};\n<span class=\"hljs-module-access\"><span class=\"hljs-module\"><span class=\"hljs-identifier\">E</span>.</span></span>decode<span class=\"hljs-constructor\">UTF8(<span class=\"hljs-string\">&quot;UTF-8 Euro: \\u00e2\\u0082\\u00ac&quot;</span>, <span class=\"hljs-params\">unicodeRemap</span>, &#x27;[?]&#x27;)</span><span class=\"hljs-operator\"> == </span><span class=\"hljs-string\">&quot;UTF-8 Euro: \\u0080&quot;</span>\n</code></pre>\n",
      "!url": "http://www.espruino.com/Reference#l_E_decodeUTF8"
    },
    "stopEventPropagation": {
      "!type": "fn()",
      "!doc": "<p>When using events with <code>X.on(&#39;foo&#39;, function() { ... })</code>\nand then <code>X.emit(&#39;foo&#39;)</code> you might want to stop subsequent\nevent handlers from being executed.</p>\n<p>Calling this function doing the execution of events will\nensure that no subsequent event handlers are executed.</p>\n<pre><code><span class=\"hljs-keyword\">var</span> <span class=\"hljs-variable\">X</span> = {}<span class=\"hljs-comment\">; // in Espruino all objects are EventEmitters</span>\nX.<span class=\"hljs-literal\">on</span>(<span class=\"hljs-string\">&#x27;foo&#x27;</span>, <span class=\"hljs-keyword\">function</span>() { <span class=\"hljs-literal\">print</span>(<span class=\"hljs-string\">&quot;A&quot;</span>)<span class=\"hljs-comment\">; })</span>\nX.<span class=\"hljs-literal\">on</span>(<span class=\"hljs-string\">&#x27;foo&#x27;</span>, <span class=\"hljs-keyword\">function</span>() { <span class=\"hljs-literal\">print</span>(<span class=\"hljs-string\">&quot;B&quot;</span>)<span class=\"hljs-comment\">; E.stopEventPropagation(); })</span>\nX.<span class=\"hljs-literal\">on</span>(<span class=\"hljs-string\">&#x27;foo&#x27;</span>, <span class=\"hljs-keyword\">function</span>() { <span class=\"hljs-literal\">print</span>(<span class=\"hljs-string\">&quot;C&quot;</span>)<span class=\"hljs-comment\">; })</span>\nX.emit(<span class=\"hljs-string\">&#x27;foo&#x27;</span>)<span class=\"hljs-comment\">;</span>\n// prints A,B but not C\n</code></pre>\n",
      "!url": "http://www.espruino.com/Reference#l_E_stopEventPropagation"
    }
  },
  "Error": {
    "!type": "fn(message: ?) -> ?",
    "!doc": "<p>Creates an Error object</p>\n",
    "!url": "http://www.espruino.com/Reference#l_Error_Error",
    "prototype": {
      "toString": {
        "!type": "fn() -> ?",
        "!doc": "",
        "!url": "http://www.espruino.com/Reference#l_Error_toString"
      }
    }
  },
  "SyntaxError": {
    "!type": "fn(message: ?) -> ?",
    "!doc": "<p>Creates a SyntaxError object</p>\n",
    "!url": "http://www.espruino.com/Reference#l_SyntaxError_SyntaxError",
    "prototype": {
      "toString": {
        "!type": "fn() -> ?",
        "!doc": "",
        "!url": "http://www.espruino.com/Reference#l_SyntaxError_toString"
      }
    }
  },
  "TypeError": {
    "!type": "fn(message: ?) -> ?",
    "!doc": "<p>Creates a TypeError object</p>\n",
    "!url": "http://www.espruino.com/Reference#l_TypeError_TypeError",
    "prototype": {
      "toString": {
        "!type": "fn() -> ?",
        "!doc": "",
        "!url": "http://www.espruino.com/Reference#l_TypeError_toString"
      }
    }
  },
  "InternalError": {
    "!type": "fn(message: ?) -> ?",
    "!doc": "<p>Creates an InternalError object</p>\n",
    "!url": "http://www.espruino.com/Reference#l_InternalError_InternalError",
    "prototype": {
      "toString": {
        "!type": "fn() -> ?",
        "!doc": "",
        "!url": "http://www.espruino.com/Reference#l_InternalError_toString"
      }
    }
  },
  "ReferenceError": {
    "!type": "fn(message: ?) -> ?",
    "!doc": "<p>Creates a ReferenceError object</p>\n",
    "!url": "http://www.espruino.com/Reference#l_ReferenceError_ReferenceError",
    "prototype": {
      "toString": {
        "!type": "fn() -> ?",
        "!doc": "",
        "!url": "http://www.espruino.com/Reference#l_ReferenceError_toString"
      }
    }
  },
  "Array": {
    "!type": "fn(args: ?) -> ?",
    "!doc": "<p>Create an Array. Either give it one integer argument (&gt;=0) which is the length\nof the array, or any number of arguments</p>\n",
    "!url": "http://www.espruino.com/Reference#l_Array_Array",
    "prototype": {
      "!stdProto": "Array",
      "toString": {
        "!type": "fn(radix: ?) -> ?",
        "!doc": "<p>Convert the Array to a string</p>\n",
        "!url": "http://www.espruino.com/Reference#l_Array_toString"
      },
      "length": {
        "!type": "?",
        "!doc": "<p>Find the length of the array</p>\n",
        "!url": "http://www.espruino.com/Reference#l_Array_length"
      },
      "indexOf": {
        "!type": "fn(value: ?, startIndex: number) -> ?",
        "!doc": "<p>Return the index of the value in the array, or -1</p>\n",
        "!url": "http://www.espruino.com/Reference#l_Array_indexOf"
      },
      "includes": {
        "!type": "fn(value: ?, startIndex: number) -> bool",
        "!doc": "<p>Return <code>true</code> if the array includes the value, <code>false</code> otherwise</p>\n",
        "!url": "http://www.espruino.com/Reference#l_Array_includes"
      },
      "join": {
        "!type": "fn(separator: ?) -> ?",
        "!doc": "<p>Join all elements of this array together into one string, using &#39;separator&#39;\nbetween them. e.g. <code>[1,2,3].join(&#39; &#39;)==&#39;1 2 3&#39;</code></p>\n",
        "!url": "http://www.espruino.com/Reference#l_Array_join"
      },
      "push": {
        "!type": "fn(arguments: ?) -> number",
        "!doc": "<p>Push a new value onto the end of this array&#39;</p>\n<p>This is the opposite of <code>[1,2,3].unshift(0)</code>, which adds one or more elements to\nthe beginning of the array.</p>\n",
        "!url": "http://www.espruino.com/Reference#l_Array_push"
      },
      "pop": {
        "!type": "fn() -> ?",
        "!doc": "<p>Remove and return the value on the end of this array.</p>\n<p>This is the opposite of <code>[1,2,3].shift()</code>, which removes an element from the\nbeginning of the array.</p>\n",
        "!url": "http://www.espruino.com/Reference#l_Array_pop"
      },
      "map": {
        "!type": "fn(function: ?, thisArg: ?) -> ?",
        "!doc": "<p>Return an array which is made from the following: <code>A.map(function) = [function(A[0]), function(A[1]), ...]</code></p>\n<p><strong>Note:</strong> Do not modify the array you&#39;re iterating over from inside the callback (<code>a.map(()=&gt;a.push(0))</code>).\nIt will cause non-spec-compliant behaviour.</p>\n",
        "!url": "http://www.espruino.com/Reference#l_Array_map"
      },
      "forEach": {
        "!type": "fn(function: ?, thisArg: ?)",
        "!doc": "<p>Executes a provided function once per array element.</p>\n<p><strong>Note:</strong> Do not modify the array you&#39;re iterating over from inside the callback (<code>a.forEach(()=&gt;a.push(0))</code>).\nIt will cause non-spec-compliant behaviour.</p>\n",
        "!url": "http://www.espruino.com/Reference#l_Array_forEach"
      },
      "filter": {
        "!type": "fn(function: ?, thisArg: ?) -> ?",
        "!doc": "<p>Return an array which contains only those elements for which the callback\nfunction returns &#39;true&#39;</p>\n<p><strong>Note:</strong> Do not modify the array you&#39;re iterating over from inside the callback (<code>a.filter(()=&gt;a.push(0))</code>).\nIt will cause non-spec-compliant behaviour.</p>\n",
        "!url": "http://www.espruino.com/Reference#l_Array_filter"
      },
      "find": {
        "!type": "fn(function: ?) -> ?",
        "!doc": "<p>Return the array element where <code>function</code> returns <code>true</code>, or <code>undefined</code> if it\ndoesn&#39;t returns <code>true</code> for any element.</p>\n<pre><code><span class=\"hljs-selector-attr\">[<span class=\"hljs-string\">&quot;Hello&quot;</span>,<span class=\"hljs-string\">&quot;There&quot;</span>,<span class=\"hljs-string\">&quot;World&quot;</span>]</span><span class=\"hljs-selector-class\">.find</span>(a=&gt;<span class=\"hljs-selector-tag\">a</span><span class=\"hljs-selector-attr\">[0]</span>==<span class=\"hljs-string\">&quot;T&quot;</span>)\n<span class=\"hljs-comment\">// returns &quot;There&quot;</span>\n</code></pre>\n<p><strong>Note:</strong> Do not modify the array you&#39;re iterating over from inside the callback (<code>a.find(()=&gt;a.push(0))</code>).\nIt will cause non-spec-compliant behaviour.</p>\n",
        "!url": "http://www.espruino.com/Reference#l_Array_find"
      },
      "findIndex": {
        "!type": "fn(function: ?) -> ?",
        "!doc": "<p>Return the array element&#39;s index where <code>function</code> returns <code>true</code>, or <code>-1</code> if it\ndoesn&#39;t returns <code>true</code> for any element.</p>\n<pre><code><span class=\"hljs-selector-attr\">[<span class=\"hljs-string\">&quot;Hello&quot;</span>,<span class=\"hljs-string\">&quot;There&quot;</span>,<span class=\"hljs-string\">&quot;World&quot;</span>]</span><span class=\"hljs-selector-class\">.findIndex</span>(a=&gt;<span class=\"hljs-selector-tag\">a</span><span class=\"hljs-selector-attr\">[0]</span>==<span class=\"hljs-string\">&quot;T&quot;</span>)\n<span class=\"hljs-comment\">// returns 1</span>\n</code></pre>\n<p><strong>Note:</strong> Do not modify the array you&#39;re iterating over from inside the callback (<code>a.findIndex(()=&gt;a.push(0))</code>).\nIt will cause non-spec-compliant behaviour.</p>\n",
        "!url": "http://www.espruino.com/Reference#l_Array_findIndex"
      },
      "some": {
        "!type": "fn(function: ?, thisArg: ?) -> ?",
        "!doc": "<p>Return &#39;true&#39; if the callback returns &#39;true&#39; for any of the elements in the\narray</p>\n<p><strong>Note:</strong> Do not modify the array you&#39;re iterating over from inside the callback (<code>a.some(()=&gt;a.push(0))</code>).\nIt will cause non-spec-compliant behaviour.</p>\n",
        "!url": "http://www.espruino.com/Reference#l_Array_some"
      },
      "every": {
        "!type": "fn(function: ?, thisArg: ?) -> ?",
        "!doc": "<p>Return &#39;true&#39; if the callback returns &#39;true&#39; for every element in the array</p>\n<p><strong>Note:</strong> Do not modify the array you&#39;re iterating over from inside the callback (<code>a.every(()=&gt;a.push(0))</code>).\nIt will cause non-spec-compliant behaviour.</p>\n",
        "!url": "http://www.espruino.com/Reference#l_Array_every"
      },
      "reduce": {
        "!type": "fn(callback: ?, initialValue: ?) -> ?",
        "!doc": "<p>Execute <code>previousValue=initialValue</code> and then <code>previousValue = callback(previousValue, currentValue, index, array)</code> for each element in the\narray, and finally return previousValue.</p>\n<p><strong>Note:</strong> Do not modify the array you&#39;re iterating over from inside the callback (<code>a.reduce(()=&gt;a.push(0))</code>).\nIt will cause non-spec-compliant behaviour.</p>\n",
        "!url": "http://www.espruino.com/Reference#l_Array_reduce"
      },
      "splice": {
        "!type": "fn(index: number, howMany: ?, elements: ?) -> ?",
        "!doc": "<p>Both remove and add items to an array</p>\n",
        "!url": "http://www.espruino.com/Reference#l_Array_splice"
      },
      "shift": {
        "!type": "fn() -> ?",
        "!doc": "<p>Remove and return the first element of the array.</p>\n<p>This is the opposite of <code>[1,2,3].pop()</code>, which takes an element off the end.</p>\n",
        "!url": "http://www.espruino.com/Reference#l_Array_shift"
      },
      "unshift": {
        "!type": "fn(elements: ?) -> number",
        "!doc": "<p>Add one or more items to the start of the array, and return its new length.</p>\n<p>This is the opposite of <code>[1,2,3].push(4)</code>, which puts one or more elements on\nthe end.</p>\n",
        "!url": "http://www.espruino.com/Reference#l_Array_unshift"
      },
      "slice": {
        "!type": "fn(start: number, end: ?) -> ?",
        "!doc": "<p>Return a copy of a portion of this array (in a new array)</p>\n",
        "!url": "http://www.espruino.com/Reference#l_Array_slice"
      },
      "sort": {
        "!type": "fn(var: ?) -> ?",
        "!doc": "<p>Do an in-place quicksort of the array</p>\n<p><strong>Note:</strong> Do not modify the array you&#39;re iterating over from inside the callback (<code>a.sort(()=&gt;a.push(0))</code>).\nIt will cause non-spec-compliant behaviour.</p>\n",
        "!url": "http://www.espruino.com/Reference#l_Array_sort"
      },
      "concat": {
        "!type": "fn(args: ?) -> ?",
        "!doc": "<p>Create a new array, containing the elements from this one and any arguments, if\nany argument is an array then those elements will be added.</p>\n",
        "!url": "http://www.espruino.com/Reference#l_Array_concat"
      },
      "fill": {
        "!type": "fn(value: ?, start: number, end: ?) -> ?",
        "!doc": "<p>Fill this array with the given value, for every index <code>&gt;= start</code> and <code>&lt; end</code></p>\n",
        "!url": "http://www.espruino.com/Reference#l_Array_fill"
      },
      "reverse": {
        "!type": "fn() -> ?",
        "!doc": "<p>Reverse all elements in this array (in place)</p>\n",
        "!url": "http://www.espruino.com/Reference#l_Array_reverse"
      }
    },
    "isArray": {
      "!type": "fn(var: ?) -> bool",
      "!doc": "<p>Returns true if the provided object is an array</p>\n",
      "!url": "http://www.espruino.com/Reference#l_Array_isArray"
    }
  },
  "Pin": {
    "!type": "fn(value: ?) -> ?",
    "!doc": "<p>Creates a pin from the given argument (or returns undefined if no argument)</p>\n",
    "!url": "http://www.espruino.com/Reference#l_Pin_Pin",
    "prototype": {
      "read": {
        "!type": "fn() -> bool",
        "!doc": "<p>Returns the input state of the pin as a boolean.</p>\n<p> <strong>Note:</strong> if you didn&#39;t call <code>pinMode</code> beforehand then this function will also\n reset the pin&#39;s state to <code>&quot;input&quot;</code></p>\n",
        "!url": "http://www.espruino.com/Reference#l_Pin_read"
      },
      "set": {
        "!type": "fn()",
        "!doc": "<p>Sets the output state of the pin to a 1</p>\n<p> <strong>Note:</strong> if you didn&#39;t call <code>pinMode</code> beforehand then this function will also\n reset the pin&#39;s state to <code>&quot;output&quot;</code></p>\n",
        "!url": "http://www.espruino.com/Reference#l_Pin_set"
      },
      "reset": {
        "!type": "fn()",
        "!doc": "<p>Sets the output state of the pin to a 0</p>\n<p> <strong>Note:</strong> if you didn&#39;t call <code>pinMode</code> beforehand then this function will also\n reset the pin&#39;s state to <code>&quot;output&quot;</code></p>\n",
        "!url": "http://www.espruino.com/Reference#l_Pin_reset"
      },
      "write": {
        "!type": "fn(value: bool)",
        "!doc": "<p>Sets the output state of the pin to the parameter given</p>\n<p> <strong>Note:</strong> if you didn&#39;t call <code>pinMode</code> beforehand then this function will also\n reset the pin&#39;s state to <code>&quot;output&quot;</code></p>\n",
        "!url": "http://www.espruino.com/Reference#l_Pin_write"
      },
      "writeAtTime": {
        "!type": "fn(value: bool, time: number)",
        "!doc": "<p>Sets the output state of the pin to the parameter given at the specified time.</p>\n<p> <strong>Note:</strong> this <strong>doesn&#39;t</strong> change the mode of the pin to an output. To do that,\n you need to use <code>pin.write(0)</code> or <code>pinMode(pin, &#39;output&#39;)</code> first.</p>\n",
        "!url": "http://www.espruino.com/Reference#l_Pin_writeAtTime"
      },
      "getMode": {
        "!type": "fn() -> ?",
        "!doc": "<p>Return the current mode of the given pin. See <code>pinMode</code> for more information.</p>\n",
        "!url": "http://www.espruino.com/Reference#l_Pin_getMode"
      },
      "mode": {
        "!type": "fn(mode: ?)",
        "!doc": "<p>Set the mode of the given pin. See <a href=\"#l__global_pinMode\"><code>pinMode</code></a> for more\ninformation on pin modes.</p>\n",
        "!url": "http://www.espruino.com/Reference#l_Pin_mode"
      },
      "toggle": {
        "!type": "fn() -> bool",
        "!doc": "<p>Toggles the state of the pin from off to on, or from on to off.</p>\n<p><strong>Note:</strong> This method doesn&#39;t currently work on the ESP8266 port of Espruino.</p>\n<p><strong>Note:</strong> if you didn&#39;t call <code>pinMode</code> beforehand then this function will also\nreset the pin&#39;s state to <code>&quot;output&quot;</code></p>\n",
        "!url": "http://www.espruino.com/Reference#l_Pin_toggle"
      },
      "pulse": {
        "!type": "fn(value: bool, time: ?)",
        "!doc": "<p>(Added in 2v20) Pulse the pin with the value for the given time in milliseconds.</p>\n<pre><code>LED.pulse<span class=\"hljs-comment\">(1, 100)</span>; <span class=\"hljs-comment\">// pulse LED on for 100ms</span>\nLED.pulse<span class=\"hljs-comment\">(1, [100,1000,100])</span>; <span class=\"hljs-comment\">// pulse LED on for 100ms, off for 1s, on for 100ms</span>\n</code></pre>\n<p>This is identical to <code>digitalPulse</code>.</p>\n",
        "!url": "http://www.espruino.com/Reference#l_Pin_pulse"
      },
      "analog": {
        "!type": "fn() -> number",
        "!doc": "<p>(Added in 2v20) Get the analogue value of the given pin. See <code>analogRead</code> for more information.</p>\n",
        "!url": "http://www.espruino.com/Reference#l_Pin_analog"
      },
      "pwm": {
        "!type": "fn(value: number, options: ?)",
        "!doc": "<p>(Added in 2v20) Set the analog Value of a pin. It will be output using PWM.</p>\n<p>See <code>analogWrite</code> for more information.</p>\n<p>Objects can contain:</p>\n<ul>\n<li><code>freq</code> - pulse frequency in Hz, e.g. <code>analogWrite(A0,0.5,{ freq : 10 });</code> -\nspecifying a frequency will force PWM output, even if the pin has a DAC</li>\n<li><code>soft</code> - boolean, If true software PWM is used if hardware is not available.</li>\n<li><code>forceSoft</code> - boolean, If true software PWM is used even if hardware PWM or a\nDAC is available</li>\n</ul>\n",
        "!url": "http://www.espruino.com/Reference#l_Pin_pwm"
      },
      "getInfo": {
        "!type": "fn() -> ?",
        "!doc": "<p>Get information about this pin and its capabilities. Of the form:</p>\n<pre><code>{\n  <span class=\"hljs-string\">&quot;port&quot;</span>        : <span class=\"hljs-string\">&quot;A&quot;</span>,    <span class=\"hljs-comment\">// the Pin&#x27;s port on the chip</span>\n  <span class=\"hljs-string\">&quot;num&quot;</span>         : 12,     <span class=\"hljs-comment\">// the Pin&#x27;s number</span>\n  <span class=\"hljs-string\">&quot;mode&quot;</span>        : (2v25+) <span class=\"hljs-comment\">// string: the pin&#x27;s mode (same as Pin.getMode())</span>\n  <span class=\"hljs-string\">&quot;output&quot;</span>      : (2v25+) <span class=\"hljs-comment\">// 0/1: the state of the pin&#x27;s output register</span>\n  <span class=\"hljs-string\">&quot;in_addr&quot;</span>     : 0x..., <span class=\"hljs-comment\">// (if available) the address of the pin&#x27;s input address in bit-banded memory (can be used with peek)</span>\n  <span class=\"hljs-string\">&quot;out_addr&quot;</span>    : 0x..., <span class=\"hljs-comment\">// (if available) the address of the pin&#x27;s output address in bit-banded memory (can be used with poke)</span>\n  <span class=\"hljs-string\">&quot;analog&quot;</span>      : { ADCs : [1], channel : 12 }, <span class=\"hljs-comment\">// If analog input is available</span>\n  <span class=\"hljs-string\">&quot;functions&quot;</span>   : {\n    <span class=\"hljs-string\">&quot;TIM1&quot;</span>:{<span class=\"hljs-keyword\">type</span>:&quot;CH1, af:0},\n    <span class=\"hljs-string\">&quot;I2C3&quot;</span>:{<span class=\"hljs-keyword\">type</span>:<span class=\"hljs-string\">&quot;SCL&quot;</span>, af:1}\n  }\n}\n</code></pre>\n<p>Will return undefined if pin is not valid.</p>\n",
        "!url": "http://www.espruino.com/Reference#l_Pin_getInfo"
      }
    }
  },
  "process": {
    "!type": "fn()",
    "!doc": "<p>This class contains information about Espruino itself</p>\n",
    "!url": "http://www.espruino.com/Reference#process",
    "version": {
      "!type": "?",
      "!doc": "<p>Returns the version of Espruino as a String</p>\n",
      "!url": "http://www.espruino.com/Reference#l_process_version"
    },
    "env": {
      "!type": "?",
      "!doc": "<p>Returns an Object containing various pre-defined variables.</p>\n<ul>\n<li><code>VERSION</code> - is the Espruino version</li>\n<li><code>GIT_COMMIT</code> - is Git commit hash this firmware was built from</li>\n<li><code>BOARD</code> - the board&#39;s ID (e.g. <code>PUCKJS</code>)</li>\n<li><code>RAM</code> - total amount of on-chip RAM in bytes</li>\n<li><code>FLASH</code> - total amount of on-chip flash memory in bytes</li>\n<li><code>SPIFLASH</code> - (on Bangle.js) total amount of off-chip flash memory in bytes</li>\n<li><code>HWVERSION</code> - For Puck.js this is the board revision (1, 2, 2.1), or for\nBangle.js it&#39;s 1 or 2</li>\n<li><code>STORAGE</code> - memory in bytes dedicated to the <code>Storage</code> module</li>\n<li><code>SERIAL</code> - the serial number of this chip</li>\n<li><code>CONSOLE</code> - the name of the current console device being used (<code>Serial1</code>,\n<code>USB</code>, <code>Bluetooth</code>, etc)</li>\n<li><code>MODULES</code> - a list of built-in modules separated by commas</li>\n<li><code>EXPTR</code> - The address of the <code>exportPtrs</code> structure in flash (this includes\nlinks to built-in functions that compiled JS code needs)</li>\n<li><code>APP_RAM_BASE</code> - On nRF5x boards, this is the RAM required by the Softdevice\n<em>if it doesn&#39;t exactly match what was allocated</em>. You can use this to update\n<code>LD_APP_RAM_BASE</code> in the <code>BOARD.py</code> file</li>\n<li><code>SOFTDEVICE</code> - (on nRF5x) the hex version code of the Bluetooth Softdevice that is installed on the device (see below)</li>\n</ul>\n<p>To get a list of built-in modules, you can use <code>process.env.MODULES.split(&#39;,&#39;)</code></p>\n<p>The <code>process.env.SOFTDEVICE</code> code is likely one of:</p>\n<table>\n<thead>\n<tr>\n<th>Code</th>\n<th>Chip</th>\n<th>Softdevice</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>0x0091 / 145</td>\n<td>nRF52832</td>\n<td>S132 v3.1.0 (SDK12)</td>\n</tr>\n<tr>\n<td>0x00A9 / 169</td>\n<td>nRF52840</td>\n<td>S140 v6.0.0 (SDK15.3)</td>\n</tr>\n<tr>\n<td>0x00B6 / 182</td>\n<td>nRF52840</td>\n<td>S140 v6.1.1 (SDK15)</td>\n</tr>\n</tbody></table>\n<p><strong>Note:</strong> <code>process.env</code> is not writeable - so as not to waste RAM, the contents\nare generated on demand. If you need to be able to change them, use <code>process.env=process.env;</code>\nfirst to ensure the values stay allocated.</p>\n",
      "!url": "http://www.espruino.com/Reference#l_process_env"
    },
    "memory": {
      "!type": "fn(gc: ?) -> ?",
      "!doc": "<p>Run a Garbage Collection pass, and return an object containing information on\nmemory usage.</p>\n<ul>\n<li><code>free</code> : Memory that is available to be used (in blocks)</li>\n<li><code>usage</code> : Memory that has been used (in blocks)</li>\n<li><code>total</code> : Total memory (in blocks)</li>\n<li><code>history</code> : Memory used for command history - that is freed if memory is low.\nNote that this is INCLUDED in the figure for &#39;free&#39;</li>\n<li><code>gc</code> : Memory freed during the GC pass</li>\n<li><code>gctime</code> : Time taken for GC pass (in milliseconds)</li>\n<li><code>blocksize</code> : Size of a block (variable) in bytes</li>\n<li><code>stackEndAddress</code> : (on ARM) the address (that can be used with peek/poke/etc)\nof the END of the stack. The stack grows down, so unless you do a lot of\nrecursion the bytes above this can be used.</li>\n<li><code>stackFree</code> : (on ARM) how many bytes of free execution stack are there\nat the point of execution.</li>\n<li><code>flash_start</code> : (on ARM) the address of the start of flash memory (usually\n<code>0x8000000</code>)</li>\n<li><code>flash_binary_end</code> : (on ARM) the address in flash memory of the end of\nEspruino&#39;s firmware.</li>\n<li><code>flash_code_start</code> : (on ARM) the address in flash memory of pages that store\nany code that you save with <code>save()</code>.</li>\n<li><code>flash_length</code> : (on ARM) the amount of flash memory this firmware was built\nfor (in bytes). <strong>Note:</strong> Some STM32 chips actually have more memory than is\nadvertised.</li>\n</ul>\n<p>Memory units are specified in &#39;blocks&#39;, which are around 16 bytes each\n(depending on your device). The actual size is available in <code>blocksize</code>. See\n<a href=\"http://www.espruino.com/Performance\">http://www.espruino.com/Performance</a> for more information.</p>\n<p><strong>Note:</strong> To find free areas of flash memory, see <code>require(&#39;Flash&#39;).getFree()</code></p>\n",
      "!url": "http://www.espruino.com/Reference#l_process_memory"
    }
  },
  "Stepper": {
    "!type": "fn(options: ?) -> ?",
    "!doc": "<p>Create a <code>Stepper</code> class. <code>options</code> can contain:</p>\n<pre><code><span class=\"hljs-keyword\">.</span>.. =<span class=\"hljs-built_in\"> new </span>Stepper({\n  pins<span class=\"hljs-keyword\"> :</span> [...], // required - 4 element<span class=\"hljs-built_in\"> array </span>of pins\n  pattern<span class=\"hljs-keyword\"> :</span> [...], // optional - a 4/8 element<span class=\"hljs-built_in\"> array </span>of step patterns\n  offpattern<span class=\"hljs-keyword\"> :</span> 0, // optional (default 0) - the pattern to output to stop driving the stepper motor\n  freq<span class=\"hljs-keyword\"> :</span> 500,   // optional (default 100) steps per second\n})\n</code></pre>\n<p><code>pins</code> must be supplied as a 4 element array of pins. When created,\nif pin state has not been set manually on each pin, the pins will\nbe set to outputs.</p>\n<p>If <code>pattern</code> isn&#39;t specified, a default pattern of <code>[0b0001,0b0010,0b0100,0b1000]</code> will be used. You\ncan specify different patterns, for example <code>[0b1100,0b1000,0b1001,0b0001,0b0011,0b0010,0b0110,0b0100]</code>.</p>\n",
    "!url": "http://www.espruino.com/Reference#l_Stepper_Stepper",
    "prototype": {
      "moveTo": {
        "!type": "fn(position: number, options: ?) -> +Promise",
        "!doc": "<p>Move a a certain number of steps in either direction. <code>position</code> is remembered, so\n<code>s.moveTo(1000)</code> will move 1000 steps forward the first time it is called, but\n<code>s.moveTo(1500)</code> called afterwards will only move 500 steps.</p>\n<p>, <code>options</code> can be:</p>\n<pre><code>s.moveTo(steps, {\n  freq : <span class=\"hljs-number\">100</span>, <span class=\"hljs-regexp\">//</span> optional (frequency <span class=\"hljs-keyword\">in</span> Hz) step frequency\n  turnOff : <span class=\"hljs-literal\">true</span>, <span class=\"hljs-regexp\">//</span> optional (<span class=\"hljs-keyword\">default</span> <span class=\"hljs-literal\">false</span>) turn <span class=\"hljs-literal\">off</span> stepper after this movement?\n  relative : <span class=\"hljs-literal\">true</span>, <span class=\"hljs-regexp\">//</span> optional (<span class=\"hljs-keyword\">default</span> <span class=\"hljs-literal\">false</span>) the step number <span class=\"hljs-keyword\">is</span> relative (<span class=\"hljs-keyword\">not</span> absolute)\n}).<span class=\"hljs-keyword\">then</span>(<span class=\"hljs-function\"><span class=\"hljs-params\">()</span> =&gt;</span> {\n  <span class=\"hljs-regexp\">//</span> movement finished...\n});\n</code></pre>\n",
        "!url": "http://www.espruino.com/Reference#l_Stepper_moveTo"
      },
      "stop": {
        "!type": "fn(options: ?)",
        "!doc": "<p>Stop a stepper motor that is currently running.</p>\n<p>You can specify <code>.stop({turnOff:true})</code> to force the stepper motor to turn off.</p>\n",
        "!url": "http://www.espruino.com/Reference#l_Stepper_stop"
      },
      "getPosition": {
        "!type": "fn() -> number",
        "!doc": "<p>Get the current position of the stepper motor in steps</p>\n",
        "!url": "http://www.espruino.com/Reference#l_Stepper_getPosition"
      }
    }
  },
  "console": {
    "!type": "fn()",
    "!doc": "<p>An Object that contains functions for writing to the interactive console</p>\n",
    "!url": "http://www.espruino.com/Reference#console",
    "log": {
      "!type": "fn(text: ?)",
      "!doc": "<p>Print the supplied string(s) to the console</p>\n<p> <strong>Note:</strong> If you&#39;re connected to a computer (not a wall adaptor) via USB but\n <strong>you are not running a terminal app</strong> then when you print data Espruino may\n pause execution and wait until the computer requests the data it is trying to\n print.</p>\n",
      "!url": "http://www.espruino.com/Reference#l_console_log"
    },
    "debug": {
      "!type": "fn(text: ?)",
      "!doc": "<p>Implemented in Espruino as an alias of <code>console.log</code></p>\n",
      "!url": "http://www.espruino.com/Reference#l_console_debug"
    },
    "info": {
      "!type": "fn(text: ?)",
      "!doc": "<p>Implemented in Espruino as an alias of <code>console.log</code></p>\n",
      "!url": "http://www.espruino.com/Reference#l_console_info"
    },
    "warn": {
      "!type": "fn(text: ?)",
      "!doc": "<p>Implemented in Espruino as an alias of <code>console.log</code></p>\n",
      "!url": "http://www.espruino.com/Reference#l_console_warn"
    },
    "error": {
      "!type": "fn(text: ?)",
      "!doc": "<p>Implemented in Espruino as an alias of <code>console.log</code></p>\n",
      "!url": "http://www.espruino.com/Reference#l_console_error"
    },
    "trace": {
      "!type": "fn(text: ?)",
      "!doc": "",
      "!url": "http://www.espruino.com/Reference#l_console_trace"
    }
  },
  "OneWire": {
    "!type": "fn(pin: +Pin) -> ?",
    "!doc": "<p>Create a software OneWire implementation on the given pin</p>\n",
    "!url": "http://www.espruino.com/Reference#l_OneWire_OneWire",
    "prototype": {
      "reset": {
        "!type": "fn() -> bool",
        "!doc": "<p>Perform a reset cycle</p>\n",
        "!url": "http://www.espruino.com/Reference#l_OneWire_reset"
      },
      "select": {
        "!type": "fn(rom: ?)",
        "!doc": "<p>Select a ROM - always performs a reset first</p>\n",
        "!url": "http://www.espruino.com/Reference#l_OneWire_select"
      },
      "skip": {
        "!type": "fn()",
        "!doc": "<p>Skip a ROM</p>\n",
        "!url": "http://www.espruino.com/Reference#l_OneWire_skip"
      },
      "write": {
        "!type": "fn(data: ?, power: bool)",
        "!doc": "<p>Write one or more bytes</p>\n",
        "!url": "http://www.espruino.com/Reference#l_OneWire_write"
      },
      "read": {
        "!type": "fn(count: ?) -> ?",
        "!doc": "<p>Read a byte</p>\n",
        "!url": "http://www.espruino.com/Reference#l_OneWire_read"
      },
      "search": {
        "!type": "fn(command: number) -> ?",
        "!doc": "<p>Search for devices</p>\n",
        "!url": "http://www.espruino.com/Reference#l_OneWire_search"
      }
    }
  },
  "Flash": {
    "!type": "fn()",
    "!doc": "<p>This module allows you to read and write the nonvolatile flash memory of your\ndevice.</p>\n<p>Also see the <code>Storage</code> library, which provides a safer file-like interface to\nnonvolatile storage.</p>\n<p>It should be used with extreme caution, as it is easy to overwrite parts of\nFlash memory belonging to Espruino or even its bootloader. If you damage the\nbootloader then you may need external hardware such as a USB-TTL converter to\nrestore it. For more information on restoring the bootloader see <code>Advanced Reflashing</code> in your board&#39;s reference pages.</p>\n<p>To see which areas of memory you can and can&#39;t overwrite, look at the values\nreported by <code>process.memory()</code>.</p>\n<p><strong>Note:</strong> On Nordic platforms there are checks in place to help you avoid\n&#39;bricking&#39; your device be damaging the bootloader. You can disable these with\n<code>E.setFlags({unsafeFlash:1})</code></p>\n",
    "!url": "http://www.espruino.com/Reference#Flash",
    "getPage": {
      "!type": "fn(addr: number) -> ?",
      "!doc": "<p>Returns the start and length of the flash page containing the given address.</p>\n",
      "!url": "http://www.espruino.com/Reference#l_Flash_getPage"
    },
    "getFree": {
      "!type": "fn() -> ?",
      "!doc": "<p>This method returns an array of objects of the form <code>{addr : #, length : #}</code>,\nrepresenting contiguous areas of flash memory in the chip that are not used for\nanything.</p>\n<p>The memory areas returned are on page boundaries. This means that you can safely\nerase the page containing any address here, and you won&#39;t risk deleting part of\nthe Espruino firmware.</p>\n",
      "!url": "http://www.espruino.com/Reference#l_Flash_getFree"
    },
    "erasePage": {
      "!type": "fn(addr: ?)",
      "!doc": "<p>Erase a page of flash memory</p>\n",
      "!url": "http://www.espruino.com/Reference#l_Flash_erasePage"
    },
    "write": {
      "!type": "fn(data: ?, addr: number)",
      "!doc": "<p>Write data into memory at the given address</p>\n<p>In flash memory you may only turn bits that are 1 into bits that are 0. If\nyou&#39;re writing data into an area that you have already written (so <code>read</code>\ndoesn&#39;t return all <code>0xFF</code>) you&#39;ll need to call <code>erasePage</code> to clear the entire\npage.</p>\n",
      "!url": "http://www.espruino.com/Reference#l_Flash_write"
    },
    "read": {
      "!type": "fn(length: number, addr: number) -> ?",
      "!doc": "<p>Read flash memory from the given address</p>\n",
      "!url": "http://www.espruino.com/Reference#l_Flash_read"
    }
  },
  "RegExp": {
    "!type": "fn(regex: ?, flags: ?) -> +RegExp",
    "!doc": "<p>Creates a RegExp object, for handling Regular Expressions</p>\n",
    "!url": "http://www.espruino.com/Reference#l_RegExp_RegExp",
    "prototype": {
      "!stdProto": "RegExp",
      "exec": {
        "!type": "fn(str: ?) -> ?",
        "!doc": "<p>Test this regex on a string - returns a result array on success, or <code>null</code>\notherwise.</p>\n<p><code>/Wo/.exec(&quot;Hello World&quot;)</code> will return:</p>\n<pre><code>[\n <span class=\"hljs-string\">&quot;Wo&quot;</span>,\n <span class=\"hljs-string\">&quot;index&quot;</span>: <span class=\"hljs-number\">6</span>,\n <span class=\"hljs-string\">&quot;input&quot;</span>: <span class=\"hljs-string\">&quot;Hello World&quot;</span>\n]\n</code></pre>\n<p>Or with groups <code>/W(o)rld/.exec(&quot;Hello World&quot;)</code> returns:</p>\n<pre><code>[\n <span class=\"hljs-string\">&quot;World&quot;</span>,\n <span class=\"hljs-string\">&quot;o&quot;</span>, <span class=\"hljs-string\">&quot;index&quot;</span>: <span class=\"hljs-number\">6</span>,\n <span class=\"hljs-string\">&quot;input&quot;</span>: <span class=\"hljs-string\">&quot;Hello World&quot;</span>\n]\n</code></pre>\n",
        "!url": "http://www.espruino.com/Reference#l_RegExp_exec"
      },
      "test": {
        "!type": "fn(str: ?) -> bool",
        "!doc": "<p>Test this regex on a string - returns <code>true</code> on a successful match, or <code>false</code>\notherwise</p>\n",
        "!url": "http://www.espruino.com/Reference#l_RegExp_test"
      }
    }
  },
  "Modules": {
    "!type": "fn()",
    "!doc": "<p>Built-in class that caches the modules used by the <code>require</code> command</p>\n",
    "!url": "http://www.espruino.com/Reference#Modules",
    "getCached": {
      "!type": "fn() -> ?",
      "!doc": "<p>Return an array of module names that have been cached</p>\n",
      "!url": "http://www.espruino.com/Reference#l_Modules_getCached"
    },
    "removeCached": {
      "!type": "fn(id: ?)",
      "!doc": "<p>Remove the given module from the list of cached modules</p>\n",
      "!url": "http://www.espruino.com/Reference#l_Modules_removeCached"
    },
    "removeAllCached": {
      "!type": "fn()",
      "!doc": "<p>Remove all cached modules</p>\n",
      "!url": "http://www.espruino.com/Reference#l_Modules_removeAllCached"
    },
    "addCached": {
      "!type": "fn(id: ?, sourcecode: ?)",
      "!doc": "<p>Add the given module to the cache</p>\n",
      "!url": "http://www.espruino.com/Reference#l_Modules_addCached"
    }
  },
  "SPI": {
    "!type": "fn() -> ?",
    "!doc": "<p>Create a software SPI port. This has limited functionality (no baud rate), but\nit can work on any pins.</p>\n<p>Use <code>SPI.setup</code> to configure this port.</p>\n",
    "!url": "http://www.espruino.com/Reference#l_SPI_SPI",
    "find": {
      "!type": "fn(pin: +Pin) -> ?",
      "!doc": "<p>Try and find an SPI hardware device that will work on this pin (e.g. <code>SPI1</code>)</p>\n<p>May return undefined if no device can be found.</p>\n",
      "!url": "http://www.espruino.com/Reference#l_SPI_find"
    },
    "prototype": {
      "setup": {
        "!type": "fn(options: ?)",
        "!doc": "<p>Set up this SPI port as an SPI Master.</p>\n<p>Options can contain the following (defaults are shown where relevant):</p>\n<pre><code>{\n  sck:pin,\n  miso:pin,\n  mosi:pin,\n  baud:integer=<span class=\"hljs-number\">100000</span>, <span class=\"hljs-regexp\">//</span> ignored on software SPI\n  mode:integer=<span class=\"hljs-number\">0</span>, <span class=\"hljs-regexp\">//</span> between <span class=\"hljs-number\">0</span> and <span class=\"hljs-number\">3</span>\n  order:string=<span class=\"hljs-string\">&#x27;msb&#x27;</span> <span class=\"hljs-regexp\">//</span> can be <span class=\"hljs-string\">&#x27;msb&#x27;</span> or <span class=\"hljs-string\">&#x27;lsb&#x27;</span>\n  bits:<span class=\"hljs-number\">8</span> <span class=\"hljs-regexp\">//</span> only available <span class=\"hljs-keyword\">for</span> software SPI\n}\n</code></pre>\n<p>If <code>sck</code>,<code>miso</code> and <code>mosi</code> are left out, they will automatically be chosen.\nHowever if one or more is specified then the unspecified pins will not be set\nup.</p>\n<p>You can find out which pins to use by looking at <a href=\"#boards\">your board&#39;s reference\npage</a> and searching for pins with the <code>SPI</code> marker. Some boards such as\nthose based on <code>nRF52</code> chips can have SPI on any pins, so don&#39;t have specific\nmarkings.</p>\n<p>The SPI <code>mode</code> is between 0 and 3 - see\n<a href=\"http://en.wikipedia.org/wiki/Serial_Peripheral_Interface_Bus#Clock_polarity_and_phase\">http://en.wikipedia.org/wiki/Serial_Peripheral_Interface_Bus#Clock_polarity_and_phase</a></p>\n<p>On STM32F1-based parts, you cannot mix AF and non-AF pins (SPI pins are usually\ngrouped on the chip - and you can&#39;t mix pins from two groups). Espruino will not\nwarn you about this.</p>\n",
        "!url": "http://www.espruino.com/Reference#l_SPI_setup"
      },
      "send": {
        "!type": "fn(data: ?, nss_pin: +Pin) -> ?",
        "!doc": "<p>Send data down SPI, and return the result. Sending an integer will return an\ninteger, a String will return a String, and anything else will return a\nUint8Array.</p>\n<p>Sending multiple bytes in one call to send is preferable as they can then be\ntransmitted end to end. Using multiple calls to send() will result in\nsignificantly slower transmission speeds.</p>\n<p>For maximum speeds, please pass either Strings or Typed Arrays as arguments.\nNote that you can even pass arrays of arrays, like <code>[1,[2,3,4],5]</code></p>\n",
        "!url": "http://www.espruino.com/Reference#l_SPI_send"
      },
      "write": {
        "!type": "fn(data: ?)",
        "!doc": "<p>Write a character or array of characters to SPI - without reading the result\nback.</p>\n<p>For maximum speeds, please pass either Strings or Typed Arrays as arguments.</p>\n",
        "!url": "http://www.espruino.com/Reference#l_SPI_write"
      },
      "send4bit": {
        "!type": "fn(data: ?, bit0: number, bit1: number, nss_pin: +Pin)",
        "!doc": "<p>Send data down SPI, using 4 bits for each &#39;real&#39; bit (MSB first). This can be\nuseful for faking one-wire style protocols</p>\n<p>Sending multiple bytes in one call to send is preferable as they can then be\ntransmitted end to end. Using multiple calls to send() will result in\nsignificantly slower transmission speeds.</p>\n",
        "!url": "http://www.espruino.com/Reference#l_SPI_send4bit"
      },
      "send8bit": {
        "!type": "fn(data: ?, bit0: number, bit1: number, nss_pin: +Pin)",
        "!doc": "<p>Send data down SPI, using 8 bits for each &#39;real&#39; bit (MSB first). This can be\nuseful for faking one-wire style protocols</p>\n<p>Sending multiple bytes in one call to send is preferable as they can then be\ntransmitted end to end. Using multiple calls to send() will result in\nsignificantly slower transmission speeds.</p>\n",
        "!url": "http://www.espruino.com/Reference#l_SPI_send8bit"
      }
    }
  },
  "SPI1": {
    "!type": "+SPI",
    "!doc": "<p>The first SPI port</p>\n",
    "!url": "http://www.espruino.com/Reference#l__global_SPI1"
  },
  "SPI2": {
    "!type": "+SPI",
    "!doc": "<p>The second SPI port</p>\n",
    "!url": "http://www.espruino.com/Reference#l__global_SPI2"
  },
  "SPI3": {
    "!type": "+SPI",
    "!doc": "<p>The third SPI port</p>\n",
    "!url": "http://www.espruino.com/Reference#l__global_SPI3"
  },
  "I2C": {
    "!type": "fn() -> ?",
    "!doc": "<p>Create a software I2C port. This has limited functionality (no baud rate), but\nit can work on any pins.</p>\n<p>Use <code>I2C.setup</code> to configure this port.</p>\n",
    "!url": "http://www.espruino.com/Reference#l_I2C_I2C",
    "find": {
      "!type": "fn(pin: +Pin) -> ?",
      "!doc": "<p>Try and find an I2C hardware device that will work on this pin (e.g. <code>I2C1</code>)</p>\n<p>May return undefined if no device can be found.</p>\n",
      "!url": "http://www.espruino.com/Reference#l_I2C_find"
    },
    "prototype": {
      "setup": {
        "!type": "fn(options: ?)",
        "!doc": "<p>Set up this I2C port</p>\n<p>If not specified in options, the default pins are used (usually the lowest\nnumbered pins on the lowest port that supports this peripheral)</p>\n",
        "!url": "http://www.espruino.com/Reference#l_I2C_setup"
      },
      "writeTo": {
        "!type": "fn(address: ?, data: ?)",
        "!doc": "<p>Transmit to the slave device with the given address. This is like Arduino&#39;s\nbeginTransmission, write, and endTransmission rolled up into one.</p>\n",
        "!url": "http://www.espruino.com/Reference#l_I2C_writeTo"
      },
      "readFrom": {
        "!type": "fn(address: ?, quantity: number) -> +Uint8Array",
        "!doc": "<p>Request bytes from the given slave device, and return them as a <code>Uint8Array</code>\n(packed array of bytes). This is like using Arduino Wire&#39;s requestFrom,\navailable and read functions. Sends a STOP unless <code>{address:X, stop:false}</code> is used.</p>\n",
        "!url": "http://www.espruino.com/Reference#l_I2C_readFrom"
      },
      "readReg": {
        "!type": "fn(address: number, reg: number, quantity: number) -> +Uint8Array",
        "!doc": "<p>Request bytes from a register on the given I2C slave device, and return them as a <code>Uint8Array</code>\n(packed array of bytes).</p>\n<p>This is the same as calling <code>I2C.writeTo</code> and <code>I2C.readFrom</code>:</p>\n<pre><code><span class=\"hljs-module-access\"><span class=\"hljs-module\"><span class=\"hljs-identifier\">I2C</span>.</span></span>readReg = <span class=\"hljs-keyword\">function</span>(address, reg, quantity) {\n  this.write<span class=\"hljs-constructor\">To({<span class=\"hljs-params\">address</span>:<span class=\"hljs-params\">address</span>, <span class=\"hljs-params\">stop</span>:<span class=\"hljs-params\">false</span>}, <span class=\"hljs-params\">reg</span>)</span>;\n  return this.read<span class=\"hljs-constructor\">From(<span class=\"hljs-params\">address</span>, <span class=\"hljs-params\">quantity</span>)</span>;\n};\n</code></pre>\n",
        "!url": "http://www.espruino.com/Reference#l_I2C_readReg"
      }
    }
  },
  "I2C1": {
    "!type": "+I2C",
    "!doc": "<p>The first I2C port</p>\n",
    "!url": "http://www.espruino.com/Reference#l__global_I2C1"
  },
  "I2C2": {
    "!type": "+I2C",
    "!doc": "<p>The second I2C port</p>\n",
    "!url": "http://www.espruino.com/Reference#l__global_I2C2"
  },
  "I2C3": {
    "!type": "+I2C",
    "!doc": "<p>The third I2C port</p>\n",
    "!url": "http://www.espruino.com/Reference#l__global_I2C3"
  },
  "JSON": {
    "!type": "fn()",
    "!doc": "<p>An Object that handles conversion to and from the JSON data interchange format</p>\n",
    "!url": "http://www.espruino.com/Reference#JSON",
    "stringify": {
      "!type": "fn(data: ?, replacer: ?, space: ?) -> ?",
      "!doc": "<p>Convert the given object into a JSON string which can subsequently be parsed\nwith JSON.parse or eval.</p>\n<p><strong>Note:</strong> This differs from JavaScript&#39;s standard <code>JSON.stringify</code> in that:</p>\n<ul>\n<li>The <code>replacer</code> argument is ignored</li>\n<li>Typed arrays like <code>new Uint8Array(5)</code> will be dumped as if they were arrays,\nnot as if they were objects (since it is more compact)</li>\n</ul>\n",
      "!url": "http://www.espruino.com/Reference#l_JSON_stringify"
    },
    "parse": {
      "!type": "fn(string: ?) -> ?",
      "!doc": "<p>Parse the given JSON string into a JavaScript object</p>\n",
      "!url": "http://www.espruino.com/Reference#l_JSON_parse"
    }
  },
  "Object": {
    "!type": "fn(value: ?) -> ?",
    "!doc": "<p>Creates an Object from the supplied argument</p>\n",
    "!url": "http://www.espruino.com/Reference#l_Object_Object",
    "prototype": {
      "!stdProto": "Object",
      "length": {
        "!type": "?",
        "!doc": "<p>Find the length of the object</p>\n",
        "!url": "http://www.espruino.com/Reference#l_Object_length"
      },
      "valueOf": {
        "!type": "fn() -> ?",
        "!doc": "<p>Returns the primitive value of this object.</p>\n",
        "!url": "http://www.espruino.com/Reference#l_Object_valueOf"
      },
      "toString": {
        "!type": "fn(radix: ?) -> +string",
        "!doc": "<p>Convert the Object to a string</p>\n",
        "!url": "http://www.espruino.com/Reference#l_Object_toString"
      },
      "clone": {
        "!type": "fn() -> ?",
        "!doc": "<p>Copy this object to a new object, but as a shallow copy. This has a similar effect to calling <code>Object.assign({}, obj)</code>.</p>\n<pre><code>orig = { a : 1, <span class=\"hljs-type\">b</span> : [ 2, 3 ] }\ncopy = orig.clone();\n// copy = { a : 1, <span class=\"hljs-type\">b</span> : [ 2, 3 ] }\n</code></pre>\n<p><strong>Note:</strong> This is not a standard JavaScript function, but is unique to Espruino</p>\n",
        "!url": "http://www.espruino.com/Reference#l_Object_clone"
      },
      "hasOwnProperty": {
        "!type": "fn(name: ?) -> bool",
        "!doc": "<p>Return true if the object (not its prototype) has the given property.</p>\n<p>NOTE: This currently returns false-positives for built-in functions in\nprototypes</p>\n",
        "!url": "http://www.espruino.com/Reference#l_Object_hasOwnProperty"
      },
      "on": {
        "!type": "fn(event: ?, listener: ?)",
        "!doc": "<p>Register an event listener for this object, for instance <code>Serial1.on(&#39;data&#39;, function(d) {...})</code>.</p>\n<p>This is the same as Node.js&#39;s <a href=\"https://nodejs.org/api/events.html\">EventEmitter</a>\nbut on Espruino the functionality is built into every object:</p>\n<ul>\n<li><code>Object.on</code></li>\n<li><code>Object.emit</code></li>\n<li><code>Object.removeListener</code></li>\n<li><code>Object.removeAllListeners</code></li>\n</ul>\n<pre><code>var o = {}; <span class=\"hljs-regexp\">//</span> o can be any object...\n<span class=\"hljs-regexp\">//</span> call an arrow <span class=\"hljs-keyword\">function</span> when the <span class=\"hljs-string\">&#x27;answer&#x27;</span> event is received\no.on(<span class=\"hljs-string\">&#x27;answer&#x27;</span>, x =&gt; console.log(x));\n<span class=\"hljs-regexp\">//</span> call a named <span class=\"hljs-keyword\">function</span> when the <span class=\"hljs-string\">&#x27;answer&#x27;</span> event is received\n<span class=\"hljs-keyword\">function</span> printAnswer(d) {\n  console.log(<span class=\"hljs-string\">&quot;The answer is&quot;</span>, d);\n}\no.on(<span class=\"hljs-string\">&#x27;answer&#x27;</span>, printAnswer);\n<span class=\"hljs-regexp\">//</span> emit the <span class=\"hljs-string\">&#x27;answer&#x27;</span> event - functions added with <span class=\"hljs-string\">&#x27;on&#x27;</span> will be executed\no.emit(<span class=\"hljs-string\">&#x27;answer&#x27;</span>, <span class=\"hljs-number\">42</span>);\n<span class=\"hljs-regexp\">//</span> prints: <span class=\"hljs-number\">42</span>\n<span class=\"hljs-regexp\">//</span> prints: The answer is <span class=\"hljs-number\">42</span>\n<span class=\"hljs-regexp\">//</span> If you have a named <span class=\"hljs-keyword\">function</span>, it can be removed by name\no.removeListener(<span class=\"hljs-string\">&#x27;answer&#x27;</span>, printAnswer);\n<span class=\"hljs-regexp\">//</span> Now <span class=\"hljs-string\">&#x27;printAnswer&#x27;</span> is removed\no.emit(<span class=\"hljs-string\">&#x27;answer&#x27;</span>, <span class=\"hljs-number\">43</span>);\n<span class=\"hljs-regexp\">//</span> prints: <span class=\"hljs-number\">43</span>\n<span class=\"hljs-regexp\">//</span> Or you can remove all listeners <span class=\"hljs-keyword\">for</span> <span class=\"hljs-string\">&#x27;answer&#x27;</span>\no.removeAllListeners(<span class=\"hljs-string\">&#x27;answer&#x27;</span>)\n<span class=\"hljs-regexp\">//</span> Now nothing happens\no.emit(<span class=\"hljs-string\">&#x27;answer&#x27;</span>, <span class=\"hljs-number\">44</span>);\n<span class=\"hljs-regexp\">//</span> nothing printed\n</code></pre>\n<p>If you have more than one handler for an event, and you&#39;d\nlike that handler to stop the event being passed to other handlers\nthen you can call <code>E.stopEventPropagation()</code> in that handler.</p>\n",
        "!url": "http://www.espruino.com/Reference#l_Object_on"
      },
      "addListener": {
        "!type": "fn(event: ?, listener: ?)",
        "!doc": "<p>Register an event listener for this object, for instance <code>Serial1.addListener(&#39;data&#39;, function(d) {...})</code>.</p>\n<p>An alias for <code>Object.on</code></p>\n",
        "!url": "http://www.espruino.com/Reference#l_Object_addListener"
      },
      "prependListener": {
        "!type": "fn(event: ?, listener: ?)",
        "!doc": "<p>Register an event listener for this object, for instance <code>Serial1.addListener(&#39;data&#39;, function(d) {...})</code>.</p>\n<p>An alias for <code>Object.on</code></p>\n",
        "!url": "http://www.espruino.com/Reference#l_Object_prependListener"
      },
      "emit": {
        "!type": "fn(event: ?, args: ?)",
        "!doc": "<p>Call any event listeners that were added to this object with <code>Object.on</code>, for\ninstance <code>obj.emit(&#39;data&#39;, &#39;Foo&#39;)</code>.</p>\n<p>For more information see <code>Object.on</code></p>\n",
        "!url": "http://www.espruino.com/Reference#l_Object_emit"
      },
      "removeListener": {
        "!type": "fn(event: ?, listener: ?)",
        "!doc": "<p>Removes the specified event listener.</p>\n<pre><code><span class=\"hljs-keyword\">function</span> foo(d) {\n  console.log(d);\n}\n<span class=\"hljs-module-access\"><span class=\"hljs-module\"><span class=\"hljs-identifier\">Serial1</span>.</span></span>on(<span class=\"hljs-string\">&quot;data&quot;</span>, foo);\n<span class=\"hljs-module-access\"><span class=\"hljs-module\"><span class=\"hljs-identifier\">Serial1</span>.</span></span>remove<span class=\"hljs-constructor\">Listener(<span class=\"hljs-string\">&quot;data&quot;</span>, <span class=\"hljs-params\">foo</span>)</span>;\n</code></pre>\n<p>For more information see <code>Object.on</code></p>\n",
        "!url": "http://www.espruino.com/Reference#l_Object_removeListener"
      },
      "removeAllListeners": {
        "!type": "fn(event: ?)",
        "!doc": "<p>Removes all listeners (if <code>event===undefined</code>), or those of the specified event.</p>\n<pre><code><span class=\"hljs-module-access\"><span class=\"hljs-module\"><span class=\"hljs-identifier\">Serial1</span>.</span></span>on(<span class=\"hljs-string\">&quot;data&quot;</span>, <span class=\"hljs-keyword\">function</span>(data) {<span class=\"hljs-operator\"> ... </span>});\n<span class=\"hljs-module-access\"><span class=\"hljs-module\"><span class=\"hljs-identifier\">Serial1</span>.</span></span>remove<span class=\"hljs-constructor\">AllListeners(<span class=\"hljs-string\">&quot;data&quot;</span>)</span>;\n<span class=\"hljs-comment\">// or</span>\n<span class=\"hljs-module-access\"><span class=\"hljs-module\"><span class=\"hljs-identifier\">Serial1</span>.</span></span>remove<span class=\"hljs-constructor\">AllListeners()</span>; <span class=\"hljs-comment\">// removes all listeners for all event types</span>\n</code></pre>\n<p>For more information see <code>Object.on</code></p>\n",
        "!url": "http://www.espruino.com/Reference#l_Object_removeAllListeners"
      }
    },
    "keys": {
      "!type": "fn(object: ?) -> +Array<any>",
      "!doc": "<p>Return all enumerable keys of the given object</p>\n",
      "!url": "http://www.espruino.com/Reference#l_Object_keys"
    },
    "getOwnPropertyNames": {
      "!type": "fn(object: ?) -> +Array<any>",
      "!doc": "<p>Returns an array of all properties (enumerable or not) found directly on a given\nobject.</p>\n",
      "!url": "http://www.espruino.com/Reference#l_Object_getOwnPropertyNames"
    },
    "values": {
      "!type": "fn(object: ?) -> +Array<any>",
      "!doc": "<p>Return all enumerable values of the given object</p>\n",
      "!url": "http://www.espruino.com/Reference#l_Object_values"
    },
    "entries": {
      "!type": "fn(object: ?) -> +Array<[string, any]>",
      "!doc": "<p>Return all enumerable keys and values of the given object</p>\n",
      "!url": "http://www.espruino.com/Reference#l_Object_entries"
    },
    "fromEntries": {
      "!type": "fn(entries: ?) -> ?",
      "!doc": "<p>Transforms an array of key-value pairs into an object</p>\n",
      "!url": "http://www.espruino.com/Reference#l_Object_fromEntries"
    },
    "create": {
      "!type": "fn(proto: ?, propertiesObject: ?) -> ?",
      "!doc": "<p>Creates a new object with the specified prototype object and properties.\nproperties are currently unsupported.</p>\n",
      "!url": "http://www.espruino.com/Reference#l_Object_create"
    },
    "getOwnPropertyDescriptor": {
      "!type": "fn(obj: ?, name: ?) -> ?",
      "!doc": "<p>Get information on the given property in the object, or undefined</p>\n",
      "!url": "http://www.espruino.com/Reference#l_Object_getOwnPropertyDescriptor"
    },
    "getOwnPropertyDescriptors": {
      "!type": "fn(obj: ?) -> ?",
      "!doc": "<p>Get information on all properties in the object (from <code>Object.getOwnPropertyDescriptor</code>), or just <code>{}</code> if no properties</p>\n",
      "!url": "http://www.espruino.com/Reference#l_Object_getOwnPropertyDescriptors"
    },
    "defineProperty": {
      "!type": "fn(obj: ?, name: ?, desc: ?) -> ?",
      "!doc": "<p>Add a new property to the Object. &#39;Desc&#39; is an object with the following fields:</p>\n<ul>\n<li><code>configurable</code> (bool = false) - can this property be changed/deleted (not\nimplemented)</li>\n<li><code>enumerable</code> (bool = false) - can this property be enumerated (not\nimplemented)</li>\n<li><code>value</code> (anything) - the value of this property</li>\n<li><code>writable</code> (bool = false) - can the value be changed with the assignment\noperator?</li>\n<li><code>get</code> (function) - the getter function, or undefined if no getter (only\nsupported on some platforms)</li>\n<li><code>set</code> (function) - the setter function, or undefined if no setter (only\nsupported on some platforms)</li>\n</ul>\n<p><strong>Note:</strong> <code>configurable</code>, <code>enumerable</code> and <code>writable</code> are not implemented and\nwill be ignored.</p>\n",
      "!url": "http://www.espruino.com/Reference#l_Object_defineProperty"
    },
    "defineProperties": {
      "!type": "fn(obj: ?, props: ?) -> ?",
      "!doc": "<p>Adds new properties to the Object. See <code>Object.defineProperty</code> for more\ninformation</p>\n",
      "!url": "http://www.espruino.com/Reference#l_Object_defineProperties"
    },
    "getPrototypeOf": {
      "!type": "fn(object: ?) -> ?",
      "!doc": "<p>Get the prototype of the given object - this is like writing <code>object.__proto__</code>\nbut is the &#39;proper&#39; ES6 way of doing it</p>\n",
      "!url": "http://www.espruino.com/Reference#l_Object_getPrototypeOf"
    },
    "setPrototypeOf": {
      "!type": "fn(object: ?, prototype: ?) -> ?",
      "!doc": "<p>Set the prototype of the given object - this is like writing <code>object.__proto__ = prototype</code> but is the &#39;proper&#39; ES6 way of doing it</p>\n",
      "!url": "http://www.espruino.com/Reference#l_Object_setPrototypeOf"
    },
    "assign": {
      "!type": "fn(args: ?) -> ?",
      "!doc": "<p>Appends all keys and values in any subsequent objects to the first object</p>\n<p><strong>Note:</strong> Unlike the standard ES6 <code>Object.assign</code>, this will throw an exception\nif given raw strings, bools or numbers rather than objects.</p>\n",
      "!url": "http://www.espruino.com/Reference#l_Object_assign"
    }
  },
  "Function": {
    "!type": "fn(args: ?) -> ?",
    "!doc": "<p>Creates a function</p>\n",
    "!url": "http://www.espruino.com/Reference#l_Function_Function",
    "prototype": {
      "!stdProto": "Function",
      "replaceWith": {
        "!type": "fn(newFunc: ?)",
        "!doc": "<p>This replaces the function with the one in the argument - while keeping the old\nfunction&#39;s scope. This allows inner functions to be edited, and is used when\nedit() is called on an inner function.</p>\n",
        "!url": "http://www.espruino.com/Reference#l_Function_replaceWith"
      },
      "call": {
        "!type": "fn(this: ?, params: ?) -> ?",
        "!doc": "<p>This executes the function with the supplied &#39;this&#39; argument and parameters</p>\n",
        "!url": "http://www.espruino.com/Reference#l_Function_call"
      },
      "apply": {
        "!type": "fn(this: ?, args: ?) -> ?",
        "!doc": "<p>This executes the function with the supplied &#39;this&#39; argument and parameters</p>\n",
        "!url": "http://www.espruino.com/Reference#l_Function_apply"
      },
      "bind": {
        "!type": "fn(this: ?, params: ?) -> ?",
        "!doc": "<p>This executes the function with the supplied &#39;this&#39; argument and parameters</p>\n",
        "!url": "http://www.espruino.com/Reference#l_Function_bind"
      }
    }
  },
  "Q0": {
    "!type": "?",
    "!doc": "<p><code>Q0</code> and <code>Q1</code> Qwiic connectors can have their power controlled by a 500mA FET (<code>Q0.fet</code>) which switches GND.</p>\n<p>The <code>sda</code> and <code>scl</code> pins on this port are also analog inputs - use <code>analogRead(Q0.sda)</code>/etc</p>\n<p>To turn this connector on run <code>Q0.setPower(1)</code></p>\n",
    "!url": "http://www.espruino.com/Reference#l__global_Q0"
  },
  "Q1": {
    "!type": "?",
    "!doc": "<p><code>Q0</code> and <code>Q1</code> Qwiic connectors can have their power controlled by a 500mA FET (<code>Q1.fet</code>) which switches GND.</p>\n<p>The <code>sda</code> and <code>scl</code> pins on this port are also analog inputs - use <code>analogRead(Q1.sda)</code>/etc</p>\n<p>To turn this connector on run <code>Q1.setPower(1)</code></p>\n",
    "!url": "http://www.espruino.com/Reference#l__global_Q1"
  },
  "Q2": {
    "!type": "?",
    "!doc": "<p><code>Q2</code> and <code>Q3</code> have all 4 pins connected to Jolt.js&#39;s GPIO (including those usually used for power).\nAs such only around 8mA of power can be supplied to any connected device.</p>\n<p>To use this as a normal Qwiic connector, run <code>Q2.setPower(1)</code></p>\n",
    "!url": "http://www.espruino.com/Reference#l__global_Q2"
  },
  "Q3": {
    "!type": "?",
    "!doc": "<p><code>Q2</code> and <code>Q3</code> have all 4 pins connected to Jolt.js&#39;s GPIO (including those usually used for power).\nAs such only around 8mA of power can be supplied to any connected device.</p>\n<p>To use this as a normal Qwiic connector, run <code>Q3.setPower(1)</code></p>\n",
    "!url": "http://www.espruino.com/Reference#l__global_Q3"
  },
  "VIBRATE": {
    "!type": "+Pin",
    "!doc": "<p>The Bangle.js&#39;s vibration motor.</p>\n",
    "!url": "http://www.espruino.com/Reference#l__global_VIBRATE"
  },
  "LED": {
    "!type": "?",
    "!doc": "<p>On most Espruino board there are LEDs, in which case <code>LED</code> will be an actual\nPin.</p>\n<p>On Bangle.js there are no LEDs, so to remain compatible with example code that\nmight expect an LED, this is an object that behaves like a pin, but which just\ndisplays a circle on the display</p>\n",
    "!url": "http://www.espruino.com/Reference#l__global_LED"
  },
  "LED1": {
    "!type": "?",
    "!doc": "<p>On most Espruino board there are LEDs, in which case <code>LED1</code> will be an actual\nPin.</p>\n<p>On Bangle.js there are no LEDs, so to remain compatible with example code that\nmight expect an LED, this is an object that behaves like a pin, but which just\ndisplays a circle on the display</p>\n",
    "!url": "http://www.espruino.com/Reference#l__global_LED1"
  },
  "LED2": {
    "!type": "?",
    "!doc": "<p>On most Espruino board there are LEDs, in which case <code>LED2</code> will be an actual\nPin.</p>\n<p>On Bangle.js there are no LEDs, so to remain compatible with example code that\nmight expect an LED, this is an object that behaves like a pin, but which just\ndisplays a circle on the display</p>\n",
    "!url": "http://www.espruino.com/Reference#l__global_LED2"
  },
  "show": {
    "!type": "fn(image: ?)",
    "!doc": "<p><strong>Note:</strong> This function is only available on the <a href=\"/MicroBit\">BBC micro:bit</a>\nboard</p>\n<p>Show an image on the in-built 5x5 LED screen.</p>\n<p>Image can be:</p>\n<ul>\n<li>A number where each bit represents a pixel (so 25 bits). e.g. <code>5</code> or\n<code>0x1FFFFFF</code></li>\n<li>A string, e.g: <code>show(&quot;10001&quot;)</code>. Newlines are ignored, and anything that is not\na space or <code>0</code> is treated as a 1.</li>\n<li>An array of 4 bytes (more will be ignored), e.g <code>show([1,2,3,0])</code></li>\n</ul>\n<p>For instance the following works for images:</p>\n<pre><code><span class=\"hljs-function\"><span class=\"hljs-title\">show</span>(<span class=\"hljs-string\">&quot;#   #&quot;</span>+\n     <span class=\"hljs-string\">&quot;  #  &quot;</span>+\n     <span class=\"hljs-string\">&quot;  #  &quot;</span>+\n     <span class=\"hljs-string\">&quot;#   #&quot;</span>+\n     <span class=\"hljs-string\">&quot; ### &quot;</span>)</span>\n</code></pre>\n<p>This means you can also use Espruino&#39;s graphics library:</p>\n<pre><code><span class=\"hljs-selector-tag\">var</span> g = Graphics<span class=\"hljs-selector-class\">.createArrayBuffer</span>(<span class=\"hljs-number\">5</span>,<span class=\"hljs-number\">5</span>,<span class=\"hljs-number\">1</span>,{msb:false})\ng<span class=\"hljs-selector-class\">.drawString</span>(<span class=\"hljs-string\">&quot;E&quot;</span>,<span class=\"hljs-number\">0</span>,<span class=\"hljs-number\">0</span>)\n<span class=\"hljs-function\"><span class=\"hljs-title\">show</span><span class=\"hljs-params\">(g.buffer)</span></span>\n</code></pre>\n",
    "!url": "http://www.espruino.com/Reference#l__global_show"
  },
  "acceleration": {
    "!type": "fn() -> ?",
    "!doc": "<p><strong>Note:</strong> This function is only available on the <a href=\"/MicroBit\">BBC micro:bit</a>\nboard</p>\n<p>Get the current acceleration of the micro:bit from the on-board accelerometer</p>\n<p><strong>This is deprecated.</strong> Please use <code>Microbit.accel</code> instead.</p>\n",
    "!url": "http://www.espruino.com/Reference#l__global_acceleration"
  },
  "compass": {
    "!type": "fn() -> ?",
    "!doc": "<p><strong>Note:</strong> This function is only available on the <a href=\"/MicroBit\">BBC micro:bit</a>\nboard</p>\n<p>Get the current compass position for the micro:bit from the on-board\nmagnetometer</p>\n<p><strong>This is deprecated.</strong> Please use <code>Microbit.mag</code> instead.</p>\n",
    "!url": "http://www.espruino.com/Reference#l__global_compass"
  },
  "SDA": {
    "!type": "+Pin",
    "!doc": "<p>The pin marked SDA on the Arduino pin footprint. This is connected directly to\npin A4.</p>\n",
    "!url": "http://www.espruino.com/Reference#l__global_SDA"
  },
  "SCL": {
    "!type": "+Pin",
    "!doc": "<p>The pin marked SDA on the Arduino pin footprint. This is connected directly to\npin A5.</p>\n",
    "!url": "http://www.espruino.com/Reference#l__global_SCL"
  },
  "FET": {
    "!type": "+Pin",
    "!doc": "<p>On Puck.js V2 (not v1.0) this is the pin that controls the FET, for high-powered\noutputs.</p>\n",
    "!url": "http://www.espruino.com/Reference#l__global_FET"
  },
  "NaN": {
    "!type": "number",
    "!doc": "",
    "!url": "http://www.espruino.com/Reference#l__global_NaN"
  },
  "Infinity": {
    "!type": "number",
    "!doc": "",
    "!url": "http://www.espruino.com/Reference#l__global_Infinity"
  },
  "HIGH": {
    "!type": "number",
    "!doc": "",
    "!url": "http://www.espruino.com/Reference#l__global_HIGH"
  },
  "LOW": {
    "!type": "number",
    "!doc": "",
    "!url": "http://www.espruino.com/Reference#l__global_LOW"
  },
  "__FILE__": {
    "!type": "?",
    "!doc": "<p>The filename of the JavaScript that is currently executing.</p>\n<p>If <code>load</code> has been called with a filename (eg <code>load(&quot;myfile.js&quot;)</code>) then\n<code>__FILE__</code> is set to that filename. Otherwise (eg <code>load()</code>) or immediately\nafter booting, <code>__FILE__</code> is not set.</p>\n",
    "!url": "http://www.espruino.com/Reference#l__global___FILE__"
  },
  "peek8": {
    "!type": "fn(addr: number, count: number) -> ?",
    "!doc": "<p>Read 8 bits of memory at the given location - DANGEROUS!</p>\n",
    "!url": "http://www.espruino.com/Reference#l__global_peek8"
  },
  "poke8": {
    "!type": "fn(addr: number, value: ?)",
    "!doc": "<p>Write 8 bits of memory at the given location - VERY DANGEROUS!</p>\n",
    "!url": "http://www.espruino.com/Reference#l__global_poke8"
  },
  "peek16": {
    "!type": "fn(addr: number, count: number) -> ?",
    "!doc": "<p>Read 16 bits of memory at the given location - DANGEROUS!</p>\n",
    "!url": "http://www.espruino.com/Reference#l__global_peek16"
  },
  "poke16": {
    "!type": "fn(addr: number, value: ?)",
    "!doc": "<p>Write 16 bits of memory at the given location - VERY DANGEROUS!</p>\n",
    "!url": "http://www.espruino.com/Reference#l__global_poke16"
  },
  "peek32": {
    "!type": "fn(addr: number, count: number) -> ?",
    "!doc": "<p>Read 32 bits of memory at the given location - DANGEROUS!</p>\n",
    "!url": "http://www.espruino.com/Reference#l__global_peek32"
  },
  "poke32": {
    "!type": "fn(addr: number, value: ?)",
    "!doc": "<p>Write 32 bits of memory at the given location - VERY DANGEROUS!</p>\n",
    "!url": "http://www.espruino.com/Reference#l__global_poke32"
  },
  "analogRead": {
    "!type": "fn(pin: +Pin) -> number",
    "!doc": "<p>Get the analogue value of the given pin.</p>\n<ul>\n<li>The value is normally greater than or equal to 0, however in some cases nRF52-based boards can produce values\nless than 0 when the ADC voltage is slightly less than the chip&#39;s internal GND.</li>\n<li>The value returned will always be <em>less</em> than 1, even when the ADC reads full range. For example a 12 bit ADC may return 4095 as a full-range value, but this is divided by 4096 to produce <code>analogRead</code>&#39;s output value.</li>\n</ul>\n<p>This is different to Arduino which only returns an integer between 0 and 1023</p>\n<p>However only pins connected to an ADC will work (see the datasheet)</p>\n<p><strong>Note:</strong> if you didn&#39;t call <code>pinMode</code> beforehand then this function will also\nreset pin&#39;s state to <code>&quot;analog&quot;</code></p>\n<p><strong>Note:</strong> <a href=\"https://www.espruino.com/Jolt.js\">Jolt.js</a> motor driver pins with\nanalog inputs are scaled with a potential divider, and so those pins return a\nnumber which is the actual voltage.</p>\n",
    "!url": "http://www.espruino.com/Reference#l__global_analogRead"
  },
  "analogWrite": {
    "!type": "fn(pin: +Pin, value: number, options: ?)",
    "!doc": "<p>Set the analog Value of a pin. It will be output using PWM.</p>\n<p>Objects can contain:</p>\n<ul>\n<li><code>freq</code> - pulse frequency in Hz, e.g. <code>analogWrite(A0,0.5,{ freq : 10 });</code> -\nspecifying a frequency will force PWM output, even if the pin has a DAC</li>\n<li><code>soft</code> - boolean, If true software PWM is used if hardware is not available.</li>\n<li><code>forceSoft</code> - boolean, If true software PWM is used even if hardware PWM or a\nDAC is available</li>\n</ul>\n<p>On nRF52-based devices (Puck.js, Pixl.js, MDBT42Q, etc) hardware PWM runs at\n16MHz, with a maximum output frequency of 4MHz (but with only 2 bit (0..3) accuracy).\nAt 1Mhz, you have 4 bits (0..15), 1kHz = 14 bits and so on.</p>\n<p> <strong>Note:</strong> if you didn&#39;t call <code>pinMode</code> beforehand then this function will also\n reset pin&#39;s state to <code>&quot;output&quot;</code></p>\n",
    "!url": "http://www.espruino.com/Reference#l__global_analogWrite"
  },
  "digitalPulse": {
    "!type": "fn(pin: +Pin, value: bool, time: ?)",
    "!doc": "<p>Pulse the pin with the value for the given time in milliseconds. It uses a\nhardware timer to produce accurate pulses, and returns immediately (before the\npulse has finished). Use <code>digitalPulse(A0,1,0)</code> to wait until a previous pulse\nhas finished.</p>\n<p>e.g. <code>digitalPulse(A0,1,5);</code> pulses A0 high for 5ms.\n<code>digitalPulse(A0,1,[5,2,4]);</code> pulses A0 high for 5ms, low for 2ms, and high for\n4ms</p>\n<p> <strong>Note:</strong> if you didn&#39;t call <code>pinMode</code> beforehand then this function will also\n reset pin&#39;s state to <code>&quot;output&quot;</code></p>\n<p>digitalPulse is for SHORT pulses that need to be very accurate. If you&#39;re doing\nanything over a few milliseconds, use setTimeout instead.</p>\n",
    "!url": "http://www.espruino.com/Reference#l__global_digitalPulse"
  },
  "digitalWrite": {
    "!type": "fn(pin: +Pin, value: ?)",
    "!doc": "<p>Set the digital value of the given pin.</p>\n<pre><code>digitalWrite(LED1, <span class=\"hljs-number\">1</span>); // light LED1\ndigitalWrite([LED1,LED2,LED3], <span class=\"hljs-number\">0b101</span>); // lights LED1 <span class=\"hljs-keyword\">and</span> LED3\n</code></pre>\n<p> <strong>Note:</strong> if you didn&#39;t call <code>pinMode(pin, ...)</code> or <code>Pin.mode(...)</code> beforehand then this function will also\nreset pin&#39;s state to <code>&quot;output&quot;</code></p>\n<p>If pin argument is an array of pins (e.g. <code>[A2,A1,A0]</code>) the value argument will\nbe treated as an array of bits where the last array element is the least\nsignificant bit.</p>\n<p>In this case, pin values are set least significant bit first (from the\nright-hand side of the array of pins). This means you can use the same pin\nmultiple times, for example <code>digitalWrite([A1,A1,A0,A0],0b0101)</code> would pulse A0\nfollowed by A1.</p>\n<p>In 2v22 and later firmwares, using a boolean for the value will set <em>all</em> pins in\nthe array to the same value, eg <code>digitalWrite(pins, value?0xFFFFFFFF:0)</code>. Previously\ndigitalWrite with a boolean behaved like <code>digitalWrite(pins, value?1:0)</code> and would\nonly set the first pin.</p>\n<p>If the pin argument is an object with a <code>write</code> method, the <code>write</code> method will\nbe called with the value passed through.</p>\n",
    "!url": "http://www.espruino.com/Reference#l__global_digitalWrite"
  },
  "digitalRead": {
    "!type": "fn(pin: +Pin) -> number",
    "!doc": "<p>Get the digital value of the given pin.</p>\n<p> <strong>Note:</strong> if you didn&#39;t call <code>pinMode</code> beforehand then this function will also\n reset pin&#39;s state to <code>&quot;input&quot;</code></p>\n<p>If the pin argument is an array of pins (e.g. <code>[A2,A1,A0]</code>) the value returned\nwill be an number where the last array element is the least significant bit, for\nexample if <code>A0=A1=1</code> and <code>A2=0</code>, <code>digitalRead([A2,A1,A0]) == 0b011</code></p>\n<p>If the pin argument is an object with a <code>read</code> method, the <code>read</code> method will be\ncalled and the integer value it returns passed back.</p>\n",
    "!url": "http://www.espruino.com/Reference#l__global_digitalRead"
  },
  "pinMode": {
    "!type": "fn(pin: +Pin, mode: ?, automatic: bool)",
    "!doc": "<p>Set the mode of the given pin.</p>\n<ul>\n<li><code>auto</code>/<code>undefined</code> - Don&#39;t change state, but allow <code>digitalWrite</code>/etc to\nautomatically change state as appropriate</li>\n<li><code>analog</code> - Analog input</li>\n<li><code>input</code> - Digital input</li>\n<li><code>input_pullup</code> - Digital input with internal ~40k pull-up resistor</li>\n<li><code>input_pulldown</code> - Digital input with internal ~40k pull-down resistor</li>\n<li><code>output</code> - Digital output</li>\n<li><code>opendrain</code> - Digital output that only ever pulls down to 0v. Sending a\nlogical <code>1</code> leaves the pin open circuit</li>\n<li><code>opendrain_pullup</code> - Digital output that pulls down to 0v. Sending a logical\n<code>1</code> enables internal ~40k pull-up resistor</li>\n<li><code>af_output</code> - Digital output from built-in peripheral</li>\n<li><code>af_opendrain</code> - Digital output from built-in peripheral that only ever pulls\ndown to 0v. Sending a logical <code>1</code> leaves the pin open circuit</li>\n</ul>\n<p> <strong>Note:</strong> <code>digitalRead</code>/<code>digitalWrite</code>/etc set the pin mode automatically\n<em>unless</em> <code>pinMode</code> has been called first. If you want <code>digitalRead</code>/etc to set\nthe pin mode automatically after you have called <code>pinMode</code>, simply call it again\nwith no mode argument (<code>pinMode(pin)</code>), <code>auto</code> as the argument (<code>pinMode(pin, &quot;auto&quot;)</code>), or with the 3rd &#39;automatic&#39; argument set to true (<code>pinMode(pin, &quot;output&quot;, true)</code>).</p>\n",
    "!url": "http://www.espruino.com/Reference#l__global_pinMode"
  },
  "getPinMode": {
    "!type": "fn(pin: +Pin) -> ?",
    "!doc": "<p>Return the current mode of the given pin. See <code>pinMode</code> for more information on\nreturned values.</p>\n",
    "!url": "http://www.espruino.com/Reference#l__global_getPinMode"
  },
  "shiftOut": {
    "!type": "fn(pins: ?, options: ?, data: ?)",
    "!doc": "<p>Shift an array of data out using the pins supplied <em>least significant bit\nfirst</em>, for example:</p>\n<pre><code><span class=\"hljs-comment\">// shift out to single clk+data</span>\nshift<span class=\"hljs-constructor\">Out(A0, { <span class=\"hljs-params\">clk</span> : A1 }, [1,0,1,0])</span>;\n</code></pre>\n<pre><code><span class=\"hljs-comment\">// shift out a whole byte (like software SPI)</span>\nshift<span class=\"hljs-constructor\">Out(A0, { <span class=\"hljs-params\">clk</span> : A1, <span class=\"hljs-params\">repeat</span>: 8 }, [1,2,3,4])</span>;\n</code></pre>\n<pre><code><span class=\"hljs-comment\">// shift out via 4 data pins</span>\n<span class=\"hljs-symbol\">shiftOut</span>([<span class=\"hljs-built_in\">A3</span>,<span class=\"hljs-built_in\">A2</span>,<span class=\"hljs-built_in\">A1</span>,A0], { clk : <span class=\"hljs-built_in\">A4</span> }, [<span class=\"hljs-number\">1</span>,<span class=\"hljs-number\">2</span>,<span class=\"hljs-number\">3</span>,<span class=\"hljs-number\">4</span>])<span class=\"hljs-comment\">;</span>\n</code></pre>\n<p><code>options</code> is an object of the form:</p>\n<pre><code>{\n  clk : pin, // a pin <span class=\"hljs-keyword\">to</span> use <span class=\"hljs-keyword\">as</span> the clock (undefined = <span class=\"hljs-keyword\">no</span> pin)\n  clkPol : <span class=\"hljs-type\">bool</span>, // clock polarity - <span class=\"hljs-keyword\">default</span> <span class=\"hljs-keyword\">is</span> <span class=\"hljs-number\">0</span> (so <span class=\"hljs-number\">1</span> normally, pulsing <span class=\"hljs-keyword\">to</span> <span class=\"hljs-number\">0</span> <span class=\"hljs-keyword\">to</span> clock data <span class=\"hljs-keyword\">in</span>)\n  repeat : <span class=\"hljs-type\">int</span>, // number <span class=\"hljs-keyword\">of</span> clocks per <span class=\"hljs-keyword\">array</span> item\n}\n</code></pre>\n<p>Each item in the <code>data</code> array will be output to the pins, with the first pin in\nthe array being the MSB and the last the LSB, then the clock will be pulsed in\nthe polarity given.</p>\n<p><code>repeat</code> is the amount of times shift data out for each array item. For instance\nwe may want to shift 8 bits out through 2 pins - in which case we need to set\nrepeat to 4.</p>\n",
    "!url": "http://www.espruino.com/Reference#l__global_shiftOut"
  },
  "setWatch": {
    "!type": "fn(function: ?, pin: +Pin, options: ?) -> ?",
    "!doc": "<p>Call the function specified when the pin changes. Watches set with <code>setWatch</code>\ncan be removed using <code>clearWatch</code>.</p>\n<p>If the <code>options</code> parameter is an object, it can contain the following\ninformation (all optional):</p>\n<pre><code>{\n   <span class=\"hljs-comment\">// Whether to keep producing callbacks, or remove the watch after the first callback</span>\n   repeat: <span class=\"hljs-keyword\">true</span>/<span class=\"hljs-keyword\">false</span>(<span class=\"hljs-keyword\">default</span>),\n   <span class=\"hljs-comment\">// Trigger on the rising or falling edge of the signal. Can be a string, or 1=&#x27;rising&#x27;, -1=&#x27;falling&#x27;, 0=&#x27;both&#x27;</span>\n   edge:<span class=\"hljs-string\">&#x27;rising&#x27;</span>(<span class=\"hljs-keyword\">default</span> <span class=\"hljs-keyword\">for</span> built-in buttons)<span class=\"hljs-regexp\">/&#x27;falling&#x27;/</span><span class=\"hljs-string\">&#x27;both&#x27;</span>(<span class=\"hljs-keyword\">default</span> <span class=\"hljs-keyword\">for</span> pins),\n   <span class=\"hljs-comment\">// Use software-debouncing to stop multiple calls if a switch bounces</span>\n   <span class=\"hljs-comment\">// This is the time in milliseconds to wait for bounces to subside, or 0 to disable</span>\n   debounce:<span class=\"hljs-number\">10</span> (<span class=\"hljs-number\">0</span> is <span class=\"hljs-keyword\">default</span> <span class=\"hljs-keyword\">for</span> pins, <span class=\"hljs-number\">25</span> is <span class=\"hljs-keyword\">default</span> <span class=\"hljs-keyword\">for</span> built-in buttons),\n   <span class=\"hljs-comment\">// Advanced: If the function supplied is a &#x27;native&#x27; function (compiled or assembly)</span>\n   <span class=\"hljs-comment\">// setting irq:true will call that function in the interrupt itself</span>\n   irq : <span class=\"hljs-keyword\">false</span>(<span class=\"hljs-keyword\">default</span>)\n   <span class=\"hljs-comment\">// Advanced: If specified, the given pin will be read whenever the watch is called</span>\n   <span class=\"hljs-comment\">// and the state will be included as a &#x27;data&#x27; field in the callback (`debounce:0` is required)</span>\n   data : pin\n   <span class=\"hljs-comment\">// Advanced: On Nordic devices, a watch may be &#x27;high&#x27; or &#x27;low&#x27; accuracy. By default low</span>\n   <span class=\"hljs-comment\">// accuracy is used (which is better for power consumption), but this means that</span>\n   <span class=\"hljs-comment\">// high speed pulses (less than 25us) may not be reliably received. Setting hispeed=true</span>\n   <span class=\"hljs-comment\">// allows for detecting high speed pulses at the expense of higher idle power consumption</span>\n   hispeed : <span class=\"hljs-keyword\">true</span>\n}\n</code></pre>\n<p>The <code>function</code> callback is called with an argument, which is an object of type\n<code>{state:bool, time:float, lastTime:float}</code>.</p>\n<ul>\n<li><code>state</code> is whether the pin is currently a <code>1</code> or a <code>0</code></li>\n<li><code>time</code> is the time in seconds at which the pin changed state</li>\n<li><code>lastTime</code> is the time in seconds at which the <strong>pin last changed state</strong>.\nWhen using <code>edge:&#39;rising&#39;</code> or <code>edge:&#39;falling&#39;</code>, this is not the same as when\nthe function was last called.</li>\n<li><code>data</code> is included if <code>data:pin</code> was specified in the options, and can be\nused for reading in clocked data. It will only work if <code>debounce:0</code> is used</li>\n</ul>\n<p>For instance, if you want to measure the length of a positive pulse you could\nuse <code>setWatch(function(e) { console.log(e.time-e.lastTime); }, BTN, { repeat:true, edge:&#39;falling&#39; });</code>. This will only be called on the falling edge\nof the pulse, but will be able to measure the width of the pulse because\n<code>e.lastTime</code> is the time of the rising edge.</p>\n<p>Internally, an interrupt writes the time of the pin&#39;s state change into a queue\nwith the exact time that it happened, and the function supplied to <code>setWatch</code> is\nexecuted only from the main message loop. However, if the callback is a native\nfunction <code>void (bool state)</code> then you can add <code>irq:true</code> to options, which will\ncause the function to be called from within the IRQ. When doing this, interrupts\nwill happen on both edges and there will be no debouncing.</p>\n<p><strong>Note:</strong> if you didn&#39;t call <code>pinMode</code> beforehand then this function will reset\npin&#39;s state to <code>&quot;input&quot;</code></p>\n<p><strong>Note:</strong> The STM32 chip (used in the <a href=\"/EspruinoBoard\">Espruino Board</a> and\n<a href=\"/Pico\">Pico</a>) cannot watch two pins with the same number - e.g. <code>A0</code> and <code>B0</code>.</p>\n<p><strong>Note:</strong> On nRF52 chips (used in Puck.js, Pixl.js, MDBT42Q) <code>setWatch</code> disables\nthe GPIO output on that pin. In order to be able to write to the pin again you\nneed to disable the watch with <code>clearWatch</code>.</p>\n",
    "!url": "http://www.espruino.com/Reference#l__global_setWatch"
  },
  "clearWatch": {
    "!type": "fn(id: ?)",
    "!doc": "<p>Clear the Watch that was created with setWatch. If no parameter is supplied, all watches will be removed.</p>\n<p>To avoid accidentally deleting all Watches, if a parameter is supplied but is <code>undefined</code> then an Exception will be thrown.</p>\n",
    "!url": "http://www.espruino.com/Reference#l__global_clearWatch"
  },
  "global": {
    "!type": "?",
    "!doc": "<p>A reference to the global scope, where everything is defined.</p>\n<p><code>global</code> is used in Node.js. Later on the ECMAScript spec introduced <code>globalThis</code> which is available in-browser too.</p>\n",
    "!url": "http://www.espruino.com/Reference#l__global_global"
  },
  "globalThis": {
    "!type": "?",
    "!doc": "<p>A reference to the global scope, where everything is defined.</p>\n<p>This is identical to <code>global</code> but was introduced in the ECMAScript spec.</p>\n",
    "!url": "http://www.espruino.com/Reference#l__global_globalThis"
  },
  "arguments": {
    "!type": "?",
    "!doc": "<p>A variable containing the arguments given to the function:</p>\n<pre><code>function <span class=\"hljs-built_in\">hello</span>() {\n  console<span class=\"hljs-selector-class\">.log</span>(arguments.length, JSON.stringify(arguments));\n}\n<span class=\"hljs-built_in\">hello</span>()        <span class=\"hljs-comment\">// 0 []</span>\n<span class=\"hljs-built_in\">hello</span>(&quot;Test&quot;)  <span class=\"hljs-comment\">// 1 [&quot;Test&quot;]</span>\n<span class=\"hljs-built_in\">hello</span>(<span class=\"hljs-number\">1</span>,<span class=\"hljs-number\">2</span>,<span class=\"hljs-number\">3</span>)   <span class=\"hljs-comment\">// 3 [1,2,3]</span>\n</code></pre>\n<p><strong>Note:</strong> Due to the way Espruino works this is doesn&#39;t behave exactly the same\nas in normal JavaScript. The length of the arguments array will never be less\nthan the number of arguments specified in the function declaration:\n<code>(function(a){ return arguments.length; })() == 1</code>. Normal JavaScript\ninterpreters would return <code>0</code> in the above case.</p>\n",
    "!url": "http://www.espruino.com/Reference#l__global_arguments"
  },
  "eval": {
    "!type": "fn(code: ?) -> ?",
    "!doc": "<p>Evaluate a string containing JavaScript code</p>\n",
    "!url": "http://www.espruino.com/Reference#l__global_eval"
  },
  "parseInt": {
    "!type": "fn(string: ?, radix: ?) -> ?",
    "!doc": "<p>Convert a string representing a number into an integer</p>\n",
    "!url": "http://www.espruino.com/Reference#l__global_parseInt"
  },
  "parseFloat": {
    "!type": "fn(string: ?) -> number",
    "!doc": "<p>Convert a string representing a number into an float</p>\n",
    "!url": "http://www.espruino.com/Reference#l__global_parseFloat"
  },
  "isFinite": {
    "!type": "fn(x: ?) -> bool",
    "!doc": "<p>Is the parameter a finite number or not? If needed, the parameter is first\nconverted to a number.</p>\n",
    "!url": "http://www.espruino.com/Reference#l__global_isFinite"
  },
  "isNaN": {
    "!type": "fn(x: ?) -> bool",
    "!doc": "<p>Whether the x is NaN (Not a Number) or not</p>\n",
    "!url": "http://www.espruino.com/Reference#l__global_isNaN"
  },
  "btoa": {
    "!type": "fn(binaryData: ?) -> ?",
    "!doc": "<p>Encode the supplied string (or array) into a base64 string</p>\n",
    "!url": "http://www.espruino.com/Reference#l__global_btoa"
  },
  "atob": {
    "!type": "fn(base64Data: ?) -> ?",
    "!doc": "<p>Decode the supplied base64 string into a normal string</p>\n",
    "!url": "http://www.espruino.com/Reference#l__global_atob"
  },
  "encodeURIComponent": {
    "!type": "fn(str: ?) -> ?",
    "!doc": "<p>Convert a string with any character not alphanumeric or <code>- _ . ! ~ * &#39; ( )</code>\nconverted to the form <code>%XY</code> where <code>XY</code> is its hexadecimal representation</p>\n",
    "!url": "http://www.espruino.com/Reference#l__global_encodeURIComponent"
  },
  "decodeURIComponent": {
    "!type": "fn(str: ?) -> ?",
    "!doc": "<p>Convert any groups of characters of the form &#39;%ZZ&#39;, into characters with hex\ncode &#39;0xZZ&#39;</p>\n",
    "!url": "http://www.espruino.com/Reference#l__global_decodeURIComponent"
  },
  "trace": {
    "!type": "fn(root: ?)",
    "!doc": "<p>Output debugging information</p>\n<p>Note: This is not included on boards with low amounts of flash memory, or the\nEspruino board.</p>\n",
    "!url": "http://www.espruino.com/Reference#l__global_trace"
  },
  "print": {
    "!type": "fn(text: ?)",
    "!doc": "<p>Print the supplied string(s) to the console</p>\n<p> <strong>Note:</strong> If you&#39;re connected to a computer (not a wall adaptor) via USB but\n <strong>you are not running a terminal app</strong> then when you print data Espruino may\n pause execution and wait until the computer requests the data it is trying to\n print.</p>\n",
    "!url": "http://www.espruino.com/Reference#l__global_print"
  },
  "setBusyIndicator": {
    "!type": "fn(pin: +Pin)",
    "!doc": "<p>When Espruino is busy, set the pin specified here high. Set this to undefined to\ndisable the feature.</p>\n",
    "!url": "http://www.espruino.com/Reference#l__global_setBusyIndicator"
  },
  "setSleepIndicator": {
    "!type": "fn(pin: +Pin)",
    "!doc": "<p>When Espruino is asleep, set the pin specified here low (when it&#39;s awake, set it\nhigh). Set this to undefined to disable the feature.</p>\n<p>Please see <a href=\"http://www.espruino.com/Power+Consumption\">http://www.espruino.com/Power+Consumption</a> for more details on this.</p>\n",
    "!url": "http://www.espruino.com/Reference#l__global_setSleepIndicator"
  },
  "setDeepSleep": {
    "!type": "fn(sleep: bool)",
    "!doc": "<p>Set whether we can enter deep sleep mode, which reduces power consumption to\naround 100uA. This only works on STM32 Espruino Boards (nRF52 boards sleep\nautomatically).</p>\n<p>Please see <a href=\"http://www.espruino.com/Power+Consumption\">http://www.espruino.com/Power+Consumption</a> for more details on this.</p>\n",
    "!url": "http://www.espruino.com/Reference#l__global_setDeepSleep"
  },
  "dump": {
    "!type": "fn()",
    "!doc": "<p>Output current interpreter state in a text form such that it can be copied to a\nnew device</p>\n<p>Espruino keeps its current state in RAM (even if the function code is stored in\nFlash). When you type <code>dump()</code> it dumps the current state of code in RAM plus\nthe hardware state, then if there&#39;s code saved in flash it writes &quot;// Code saved\nwith E.setBootCode&quot; and dumps that too.</p>\n<p><strong>Note:</strong> &#39;Internal&#39; functions are currently not handled correctly. You will\nneed to recreate these in the <code>onInit</code> function.</p>\n",
    "!url": "http://www.espruino.com/Reference#l__global_dump"
  },
  "load": {
    "!type": "fn(filename: ?)",
    "!doc": "<p>Restart and load the program out of flash - this has an effect similar to\ncompletely rebooting Espruino (power off/power on), but without actually\nperforming a full reset of the hardware.</p>\n<p>This command only executes when the Interpreter returns to the Idle state - for\ninstance <code>a=1;load();a=2;</code> will still leave &#39;a&#39; as undefined (or what it was\nset to in the saved program).</p>\n<p>Espruino will resume from where it was when you last typed <code>save()</code>. If you want\ncode to be executed right after loading (for instance to initialise devices\nconnected to Espruino), add an <code>init</code> event handler to <code>E</code> with <code>E.on(&#39;init&#39;, function() { ... your_code ... });</code>. This will then be automatically executed by\nEspruino every time it starts.</p>\n<p><strong>If you specify a filename in the argument then that file will be loaded from\nStorage after reset</strong> in much the same way as calling <code>reset()</code> then\n<code>eval(require(&quot;Storage&quot;).read(filename))</code></p>\n",
    "!url": "http://www.espruino.com/Reference#l__global_load"
  },
  "save": {
    "!type": "fn()",
    "!doc": "<p>Save the state of the interpreter into flash (including the results of calling\n<code>setWatch</code>, <code>setInterval</code>, <code>pinMode</code>, and any listeners). The state will then be\nloaded automatically every time Espruino powers on or is hard-reset. To see what\nwill get saved you can call <code>dump()</code>.</p>\n<p><strong>Note:</strong> If you set up intervals/etc in <code>onInit()</code> and you have already called\n<code>onInit</code> before running <code>save()</code>, when Espruino resumes there will be two copies\nof your intervals - the ones from before the save, and the ones from after -\nwhich may cause you problems.</p>\n<p>For more information about this and other options for saving, please see the\n<a href=\"https://www.espruino.com/Saving\">Saving code on Espruino</a> page.</p>\n<p>This command only executes when the Interpreter returns to the Idle state - for\ninstance <code>a=1;save();a=2;</code> will save &#39;a&#39; as 2.</p>\n<p>When Espruino powers on, it will resume from where it was when you typed\n<code>save()</code>. If you want code to be executed right after loading (for instance to\ninitialise devices connected to Espruino), add a function called <code>onInit</code>, or\nadd a <code>init</code> event handler to <code>E</code> with <code>E.on(&#39;init&#39;, function() { ... your_code ... });</code>. This will then be automatically executed by Espruino every time it\nstarts.</p>\n<p>In order to stop the program saved with this command being loaded automatically,\ncheck out <a href=\"https://www.espruino.com/Troubleshooting#espruino-stopped-working-after-i-typed-save-\">the Troubleshooting\nguide</a></p>\n",
    "!url": "http://www.espruino.com/Reference#l__global_save"
  },
  "reset": {
    "!type": "fn(clearFlash: bool)",
    "!doc": "<p>Reset the interpreter - clear program memory in RAM, and do not load a saved\nprogram from flash. This does NOT reset the underlying hardware (which allows\nyou to reset the device without it disconnecting from USB).</p>\n<p>This command only executes when the Interpreter returns to the Idle state - for\ninstance <code>a=1;reset();a=2;</code> will still leave &#39;a&#39; as undefined.</p>\n<p>The safest way to do a full reset is to hit the reset button.</p>\n<p>If <code>reset()</code> is called with no arguments, it will reset the board&#39;s state in RAM\nbut will not reset the state in flash. When next powered on (or when <code>load()</code> is\ncalled) the board will load the previously saved code.</p>\n<p>Calling <code>reset(true)</code> will cause <em>all saved code in flash memory to be cleared\nas well</em>.</p>\n",
    "!url": "http://www.espruino.com/Reference#l__global_reset"
  },
  "edit": {
    "!type": "fn(funcName: ?)",
    "!doc": "<p>Fill the console with the contents of the given function, so you can edit it.</p>\n<p>NOTE: This is a convenience function - it will not edit &#39;inner functions&#39;. For\nthat, you must edit the &#39;outer function&#39; and re-execute it.</p>\n",
    "!url": "http://www.espruino.com/Reference#l__global_edit"
  },
  "echo": {
    "!type": "fn(echoOn: bool)",
    "!doc": "<p>Should Espruino echo what you type back to you? true = yes (Default), false =\nno. When echo is off, the result of executing a command is not returned.\nInstead, you must use &#39;print&#39; to send output.</p>\n",
    "!url": "http://www.espruino.com/Reference#l__global_echo"
  },
  "getTime": {
    "!type": "fn() -> number",
    "!doc": "<p>Return the current system time in Seconds (as a floating point number)</p>\n",
    "!url": "http://www.espruino.com/Reference#l__global_getTime"
  },
  "setTime": {
    "!type": "fn(time: number)",
    "!doc": "<p>Set the current system time in seconds (<code>time</code> can be a floating point value).</p>\n<p>This is used with <code>getTime</code>, the time reported from <code>setWatch</code>, as well as when\nusing <code>new Date()</code>.</p>\n<p><code>Date.prototype.getTime()</code> reports the time in milliseconds, so you can set the\ntime to a <code>Date</code> object using:</p>\n<pre><code><span class=\"hljs-keyword\">set</span><span class=\"hljs-built_in\">Time</span>((<span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Date</span>(<span class=\"hljs-string\">&quot;Tue, 19 Feb 2019 10:57&quot;</span>)).<span class=\"hljs-keyword\">get</span><span class=\"hljs-built_in\">Time</span>()/<span class=\"hljs-number\">1000</span>)\n</code></pre>\n<p>To set the timezone for all new Dates, use <code>E.setTimeZone(hours)</code>.</p>\n",
    "!url": "http://www.espruino.com/Reference#l__global_setTime"
  },
  "getSerial": {
    "!type": "fn() -> ?",
    "!doc": "<p>Get the serial number of this board</p>\n",
    "!url": "http://www.espruino.com/Reference#l__global_getSerial"
  },
  "setInterval": {
    "!type": "fn(function: ?, timeout: number, args: ?) -> ?",
    "!doc": "<p>Call the function (or evaluate the string) specified REPEATEDLY after the\ntimeout in milliseconds.</p>\n<p>For instance:</p>\n<pre><code><span class=\"hljs-built_in\">setInterval</span>(<span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\"></span>) {\n  <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-string\">&quot;Hello World&quot;</span>);\n}, <span class=\"hljs-number\">1000</span>);\n<span class=\"hljs-comment\">// or</span>\n<span class=\"hljs-built_in\">setInterval</span>(<span class=\"hljs-string\">&#x27;console.log(&quot;Hello World&quot;);&#x27;</span>, <span class=\"hljs-number\">1000</span>);\n<span class=\"hljs-comment\">// both print &#x27;Hello World&#x27; every second</span>\n</code></pre>\n<p>You can also specify extra arguments that will be sent to the function when it\nis executed. For example:</p>\n<pre><code>setInterval(<span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">a,b</span>) {\n  <span class=\"hljs-built_in\">console</span>.<span class=\"hljs-built_in\">log</span>(a+<span class=\"hljs-string\">&quot; &quot;</span>+b);\n}, <span class=\"hljs-number\">1000</span>, <span class=\"hljs-string\">&quot;Hello&quot;</span>, <span class=\"hljs-string\">&quot;World&quot;</span>);\n<span class=\"hljs-comment\">// prints &#x27;Hello World&#x27; every second</span>\n</code></pre>\n<p>If you want to stop your function from being called, pass the number that was\nreturned by <code>setInterval</code> into the <code>clearInterval</code> function.</p>\n<p> <strong>Note:</strong> If <code>setDeepSleep(true)</code> has been called and the interval is greater\n than 5 seconds, Espruino may execute the interval up to 1 second late. This is\n because Espruino can only wake from deep sleep every second - and waking early\n would cause Espruino to waste power while it waited for the correct time.</p>\n",
    "!url": "http://www.espruino.com/Reference#l__global_setInterval"
  },
  "setTimeout": {
    "!type": "fn(function: ?, timeout: number, args: ?) -> ?",
    "!doc": "<p>Call the function (or evaluate the string) specified ONCE after the timeout in\nmilliseconds.</p>\n<p>For instance:</p>\n<pre><code><span class=\"hljs-built_in\">setTimeout</span>(<span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\"></span>) {\n  <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-string\">&quot;Hello World&quot;</span>);\n}, <span class=\"hljs-number\">1000</span>);\n<span class=\"hljs-comment\">// or</span>\n<span class=\"hljs-built_in\">setTimeout</span>(<span class=\"hljs-string\">&#x27;console.log(&quot;Hello World&quot;);&#x27;</span>, <span class=\"hljs-number\">1000</span>);\n<span class=\"hljs-comment\">// both print &#x27;Hello World&#x27; after a second</span>\n</code></pre>\n<p>You can also specify extra arguments that will be sent to the function when it\nis executed. For example:</p>\n<pre><code>setTimeout(<span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">a,b</span>) {\n  <span class=\"hljs-built_in\">console</span>.<span class=\"hljs-built_in\">log</span>(a+<span class=\"hljs-string\">&quot; &quot;</span>+b);\n}, <span class=\"hljs-number\">1000</span>, <span class=\"hljs-string\">&quot;Hello&quot;</span>, <span class=\"hljs-string\">&quot;World&quot;</span>);\n<span class=\"hljs-comment\">// prints &#x27;Hello World&#x27; after 1 second</span>\n</code></pre>\n<p>If you want to stop the function from being called, pass the number that was\nreturned by <code>setTimeout</code> into the <code>clearTimeout</code> function.</p>\n<p> <strong>Note:</strong> If <code>setDeepSleep(true)</code> has been called and the interval is greater\n than 5 seconds, Espruino may execute the interval up to 1 second late. This is\n because Espruino can only wake from deep sleep every second - and waking early\n would cause Espruino to waste power while it waited for the correct time.</p>\n",
    "!url": "http://www.espruino.com/Reference#l__global_setTimeout"
  },
  "clearInterval": {
    "!type": "fn(id: ?)",
    "!doc": "<p>Clear the Interval that was created with <code>setInterval</code>, for example:</p>\n<p><code>var id = setInterval(function () { print(&#39;foo&#39;); }, 1000);</code></p>\n<p><code>clearInterval(id);</code></p>\n<p>If no argument is supplied, all timeouts and intervals are stopped.</p>\n<p>To avoid accidentally deleting all Intervals, if a parameter is supplied but is <code>undefined</code> then an Exception will be thrown.</p>\n",
    "!url": "http://www.espruino.com/Reference#l__global_clearInterval"
  },
  "clearTimeout": {
    "!type": "fn(id: ?)",
    "!doc": "<p>Clear the Timeout that was created with <code>setTimeout</code>, for example:</p>\n<p><code>var id = setTimeout(function () { print(&#39;foo&#39;); }, 1000);</code></p>\n<p><code>clearTimeout(id);</code></p>\n<p>If no argument is supplied, all timeouts and intervals are stopped.</p>\n<p>To avoid accidentally deleting all Timeouts, if a parameter is supplied but is <code>undefined</code> then an Exception will be thrown.</p>\n",
    "!url": "http://www.espruino.com/Reference#l__global_clearTimeout"
  },
  "changeInterval": {
    "!type": "fn(id: ?, time: number)",
    "!doc": "<p>Change the Interval on a callback created with <code>setInterval</code>, for example:</p>\n<p><code>var id = setInterval(function () { print(&#39;foo&#39;); }, 1000); // every second</code></p>\n<p><code>changeInterval(id, 1500); // now runs every 1.5 seconds</code></p>\n<p>This takes effect immediately and resets the timeout, so in the example above,\nregardless of when you call <code>changeInterval</code>, the next interval will occur\n1500ms after it.</p>\n",
    "!url": "http://www.espruino.com/Reference#l__global_changeInterval"
  },
  "require": {
    "!type": "fn(moduleName: ?) -> ?",
    "!doc": "<p>Load the given module, and return the exported functions and variables.</p>\n<p>For example:</p>\n<pre><code>var s = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">&quot;Storage&quot;</span>);\ns.<span class=\"hljs-built_in\">write</span>(<span class=\"hljs-string\">&quot;test&quot;</span>, <span class=\"hljs-string\">&quot;hello world&quot;</span>);\n<span class=\"hljs-built_in\">print</span>(s.<span class=\"hljs-built_in\">read</span>(<span class=\"hljs-string\">&quot;test&quot;</span>));\n// prints <span class=\"hljs-string\">&quot;hello world&quot;</span>\n</code></pre>\n<p>Check out <a href=\"/Modules\">the page on Modules</a> for an explanation of what modules are\nand how you can use them.</p>\n",
    "!url": "http://www.espruino.com/Reference#l__global_require"
  },
  "Boolean": {
    "!type": "fn(value: ?) -> bool",
    "!doc": "<p>Creates a boolean</p>\n",
    "!url": "http://www.espruino.com/Reference#l_Boolean_Boolean"
  }
}
